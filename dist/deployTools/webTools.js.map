{"version":3,"sources":["../../src/deployTools/webTools.js"],"names":["DEPLOY_TARGET_DOCKER","DEPLOY_TARGET_FTP","DEPLOY_TARGET_NOW","DEPLOY_TARGET_NONE","_runDeployment","c","platform","deployType","Promise","resolve","rnvPath","process","mainModule","filename","split","deployToDocker","setRNVPath","doDeploy","reject","Error","_runExport","doExport","selectToolAndExecute","choices","configFunction","executeFunction","isDeploy","argv","slice","type","t","targetConfig","buildConfig","platforms","deploy","inquirer","prompt","name","message","chalk","white","selectedTarget","paths","appConfig","config","selectWebToolAndDeploy","configureDeploymentIfRequired","selectWebToolAndExport","configureExportIfRequired"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport minimist from 'minimist';\nimport inquirer from 'inquirer';\nimport path from 'path';\n\nimport { deployToNow } from './now';\nimport { deployToFtp } from './ftp';\nimport {\n    importPackageFromProject\n} from '../common';\nimport {\n    logInfo\n} from '../systemTools/logger';\nimport { configureDeploymentIfRequired, configureExportIfRequired } from './configure';\n\nconst DEPLOY_TARGET_DOCKER = 'docker';\nconst DEPLOY_TARGET_FTP = 'ftp';\nconst DEPLOY_TARGET_NOW = 'now';\nconst DEPLOY_TARGET_NONE = 'none';\n\nconst _runDeployment = async (c, platform, deployType) => {\n    switch (deployType) {\n        case DEPLOY_TARGET_FTP:\n            return deployToFtp(c, platform);\n        case DEPLOY_TARGET_NOW:\n            return deployToNow(c, platform);\n        case DEPLOY_TARGET_NONE:\n            return Promise.resolve();\n        case DEPLOY_TARGET_DOCKER:\n            const rnvPath = process.mainModule.filename.split('/bin/index.js')[0];\n            const deployToDocker = importPackageFromProject('@rnv/deploy-docker');\n            deployToDocker.setRNVPath(rnvPath);\n            return deployToDocker.doDeploy();\n        default:\n            return Promise.reject(new Error(`Deploy Type not supported ${deployType}`));\n    }\n};\n\nconst _runExport = (c, platform, deployType) => {\n    switch (deployType) {\n        case DEPLOY_TARGET_DOCKER:\n            const rnvPath = process.mainModule.filename.split('/bin/index.js')[0];\n            const deployToDocker = importPackageFromProject('@rnv/deploy-docker');\n            deployToDocker.setRNVPath(rnvPath);\n            return deployToDocker.doExport();\n        default:\n            return Promise.reject(new Error(`Deploy Type not supported ${deployType}`));\n    }\n};\n\nconst selectToolAndExecute = async ({\n    c, platform, choices, configFunction, executeFunction, isDeploy = true\n}) => {\n    const argv = minimist(c.process.argv.slice(2));\n    const type = argv.t;\n    const targetConfig = c.buildConfig.platforms[platform];\n\n    if (type || (targetConfig && targetConfig.deploy && targetConfig.deploy.type)) {\n        await configFunction(type || targetConfig.deploy.type);\n        return executeFunction(c, platform, type || targetConfig.deploy.type);\n    }\n    const { selectedTarget } = await inquirer.prompt({\n        name: 'selectedTarget',\n        type: 'list',\n        choices,\n        message: `Which type of ${isDeploy ? 'deploy' : 'export'} option would you like to use for ${chalk.white(platform)}?`\n    });\n\n    await configFunction(selectedTarget);\n\n    logInfo(`Setting your appconfig for ${chalk.white(platform)} to include ${isDeploy ? 'deploy' : 'export'} type: ${chalk.white(selectedTarget)} at ${chalk.white(c.paths.appConfig.config)}`);\n    return executeFunction(c, platform, selectedTarget);\n};\n\nconst selectWebToolAndDeploy = (c, platform) => selectToolAndExecute({\n    c,\n    platform,\n    choices: [DEPLOY_TARGET_DOCKER, DEPLOY_TARGET_FTP, DEPLOY_TARGET_NOW, DEPLOY_TARGET_NONE],\n    configFunction: configureDeploymentIfRequired,\n    executeFunction: _runDeployment\n});\n\nconst selectWebToolAndExport = (c, platform) => selectToolAndExecute({\n    c,\n    platform,\n    choices: [DEPLOY_TARGET_DOCKER],\n    configFunction: configureExportIfRequired,\n    executeFunction: _runExport,\n    isDeploy: false\n});\n\nexport {\n    selectWebToolAndDeploy,\n    selectWebToolAndExport,\n    DEPLOY_TARGET_FTP,\n    DEPLOY_TARGET_NOW,\n    DEPLOY_TARGET_NONE\n};\n"],"file":"webTools.js"}