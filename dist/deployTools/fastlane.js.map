{"version":3,"file":"fastlane.js","names":["rnvFastlane","args","Config","rnvArguments","shift","commandExistsSync","setupInstance","PlatformSetup","askToInstallSDK","c","getConfig","appFolder","getAppFolder","platform","fastlaneArgs","program","rawArgs","slice","executeAsync","join","interactive","env","process","cwd"],"sources":["../../src/deployTools/fastlane.js"],"sourcesContent":["import { executeAsync } from '../systemTools/exec';\nimport { commandExistsSync } from '../systemTools/exec';\nimport { getAppFolder } from '../common';\nimport Config from '../config';\nimport PlatformSetup from '../setupTools';\n\nconst rnvFastlane = async () => {\n    const args = Config.rnvArguments;\n    args.shift(); // we know the first one is fastlane, trash it\n\n    if (!commandExistsSync('fastlane')) {\n        const setupInstance = PlatformSetup();\n        await setupInstance.askToInstallSDK('fastlane');\n    }\n\n    const c = Config.getConfig();\n    const appFolder = getAppFolder(c, c.platform);\n\n    let fastlaneArgs = [...c.program.rawArgs];\n    fastlaneArgs = fastlaneArgs.slice(3);\n\n    return executeAsync(c, `fastlane ${fastlaneArgs.join(' ')}`, {\n        interactive: true,\n        env: process.env,\n        cwd: appFolder\n    });\n};\n\nexport { rnvFastlane };\n"],"mappings":"0VAAA;;AAEA;AACA;AACA;;AAEA,GAAMA,YAAW,CAAG,QAAdA,YAAW;AACPC,IAAI,CAAGC,eAAM,CAACC,YAAY;AAChCF,IAAI,CAACG,KAAK,EAAE,CAAC;;AAER,GAAAC,uBAAiB,EAAC,UAAU,CAAC;AACxBC,aAAa,CAAG,GAAAC,mBAAa,GAAE;AAC/BD,aAAa,CAACE,eAAe,CAAC,UAAU,CAAC;;;AAG7CC,CAAC,CAAGP,eAAM,CAACQ,SAAS,EAAE;AACtBC,SAAS,CAAG,GAAAC,oBAAY,EAACH,CAAC,CAAEA,CAAC,CAACI,QAAQ,CAAC;;AAEzCC,YAAY,iCAAOL,CAAC,CAACM,OAAO,CAACC,OAAO;AACxCF,YAAY,CAAGA,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAE9B,GAAAC,kBAAY,EAACT,CAAC,aAAcK,YAAY,CAACK,IAAI,CAAC,GAAG,CAAC,CAAI;AACzDC,WAAW,CAAE,IAAI;AACjBC,GAAG,CAAEC,OAAO,CAACD,GAAG;AAChBE,GAAG,CAAEZ;AACT,CAAC,CAAC,uEACL,CAAC"}