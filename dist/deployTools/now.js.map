{"version":3,"sources":["../../src/deployTools/now.js"],"names":["_runDeploymentTask","c","nowConfigPath","Promise","resolve","reject","dotenv","config","defaultBuildFolder","path","join","params","process","env","NOW_TOKEN","push","nowIsProduction","platform","then","catch","error","_createConfigFiles","configFilePath","envConfigPath","nowParamsExists","envContent","fs","existsSync","content","public","version","chalk","white","inquirer","prompt","type","name","message","validate","i","token","writeFileSync","JSON","stringify","deployToNow","paths","project","dir","readFileSync","toString","err","matched","split","map","line","forEach","key","indexOf"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport dotenv from 'dotenv';\n\nimport { executeAsync } from '../systemTools/exec';\nimport { getAppFolder, getConfigProp } from '../common';\nimport { logInfo } from '../systemTools/logger';\n\nconst _runDeploymentTask = (c, nowConfigPath) => new Promise((resolve, reject) => {\n    dotenv.config();\n    const defaultBuildFolder = path.join(getAppFolder(c, 'web'), 'public');\n    const params = [defaultBuildFolder, '-A', nowConfigPath];\n    if (process.env.NOW_TOKEN) params.push('-t', process.env.NOW_TOKEN);\n    const nowIsProduction = getConfigProp(c, c.platform, 'nowIsProduction', false) === true;\n\n    if (nowIsProduction) params.push('--prod');\n\n    executeAsync(c, `now ${params.join(' ')}`)\n        .then(() => resolve())\n        .catch(error => reject(error));\n});\n\nconst _createConfigFiles = async (configFilePath, envConfigPath, nowParamsExists = false, envContent = '') => {\n    if (!fs.existsSync(configFilePath)) {\n        const content = { public: true, version: 2 };\n        logInfo(`${chalk.white('now.json')} file does not exist. Creating one for you`);\n\n        const { name } = await inquirer.prompt([{\n            type: 'input',\n            name: 'name',\n            message: 'What is your project name?',\n            validate: i => !!i || 'Please enter a name'\n        }, {\n            type: 'input',\n            name: 'token',\n            message: 'Do you have now token? If no leave empty and you will be asked to create one'\n        }]);\n\n        content.name = name;\n\n        if (!nowParamsExists) {\n            const { token } = await inquirer.prompt({\n                type: 'input',\n                name: 'token',\n                message: 'Do you have now token? If no leave empty and you will be asked to create one'\n            });\n            if (token) {\n                envContent += `NOW_TOKEN=${token}\\n`;\n                fs.writeFileSync(envConfigPath, envContent);\n            }\n            return fs.writeFileSync(configFilePath, JSON.stringify(content, null, 2));\n        }\n        return fs.writeFileSync(configFilePath, JSON.stringify(content, null, 2));\n    }\n};\n\nconst deployToNow = c => new Promise((resolve, reject) => {\n    const nowConfigPath = path.resolve(c.paths.project.dir, 'now.json');\n    const envConfigPath = path.resolve(c.paths.project.dir, '.env');\n\n    let envContent;\n    try {\n        envContent = fs.readFileSync(envConfigPath).toString();\n    } catch (err) {\n        envContent = '';\n    }\n\n    let matched = false;\n    envContent.split('\\n').map(line => line.split('=')).forEach(([key]) => {\n        if (['NOW_TOKEN'].indexOf(key) > -1) {\n            matched = true;\n        }\n    });\n\n    _createConfigFiles(nowConfigPath, envConfigPath, matched, envContent)\n        .then(() => {\n            _runDeploymentTask(c, nowConfigPath)\n                .then(() => {\n                    resolve();\n                })\n                .catch(err => reject(err));\n        });\n});\n\nexport { deployToNow };\n"],"file":"now.js"}