{"version":3,"file":"ftp.js","names":["_deployToFtp","c","platform","Promise","resolve","reject","logTask","promise","envPath","path","paths","project","dir","fs","existsSync","logInfo","_createEnvFtpConfig","readFile","err","data","toString","then","envContent","matches","targetMatches","split","map","line","forEach","key","val","indexOf","envPromise","require","config","user","process","env","RNV_DEPLOY_WEB_FTP_USER","password","RNV_DEPLOY_WEB_FTP_PASSWORD","host","RNV_DEPLOY_WEB_FTP_SERVER","port","RNV_DEPLOY_WEB_FTP_PORT","localRoot","buildConfig","platforms","deploy","DEPLOY_TARGET_FTP","remoteRoot","include","exclude","deleteRemote","forcePasv","FtpDeploy","ftpDeploy","catch","configFilePath","previousContent","inquirer","prompt","name","type","message","validate","i","default","writeFileSync","_createDeployConfig","builds","runtime","appId","excludeSourcemaps","concat","appConfig","files","deployToFtp","targetConfig"],"sources":["../../src/deployTools/ftp.js"],"sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\n\nimport {\n    logInfo,\n    logTask,\n} from '../systemTools/logger';\nimport { writeFileSync } from '../systemTools/fileutils';\nimport { DEPLOY_TARGET_FTP } from './webTools';\n\nconst _deployToFtp = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`_deployToFtp:${platform}`);\n    let promise;\n    const envPath = path.resolve(c.paths.project.dir, '.env');\n    if (!fs.existsSync(envPath)) {\n        logInfo('.env file does not exist. Creating one for you');\n        promise = _createEnvFtpConfig(envPath);\n    } else {\n        promise = new Promise((resolve, reject) => {\n            fs.readFile(envPath, (err, data) => {\n                if (err) return reject(err);\n                resolve(data.toString());\n            });\n        });\n    }\n    promise.then((envContent) => {\n        let matches = 0;\n        const targetMatches = 2;\n        envContent.split('\\n').map(line => line.split('=')).forEach(([key, val]) => {\n            if (['RNV_DEPLOY_WEB_FTP_SERVER', 'RNV_DEPLOY_WEB_FTP_USER'].indexOf(key) > -1) {\n                matches++;\n            }\n        });\n        let envPromise;\n        if (matches >= targetMatches) {\n            envPromise = Promise.resolve();\n        } else {\n            logInfo('.env file does not contain all needed FTP config, helping you to set it up');\n            envPromise = _createEnvFtpConfig(envPath, `${envContent}\\n`);\n        }\n        return envPromise;\n    })\n        .then(() => {\n            require('dotenv').config();\n            const config = {\n                user: process.env.RNV_DEPLOY_WEB_FTP_USER,\n                password: process.env.RNV_DEPLOY_WEB_FTP_PASSWORD, // optional, prompted if none given\n                host: process.env.RNV_DEPLOY_WEB_FTP_SERVER,\n                port: process.env.RNV_DEPLOY_WEB_FTP_PORT || 21,\n                localRoot: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].localRoot,\n                remoteRoot: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].remoteRoot || '/',\n                include: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].include || ['*', '**/*'], // this would upload everything except dot files\n                exclude: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].exclude || [], // e.g. exclude sourcemaps - ** exclude: [] if nothing to exclude **\n                deleteRemote: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].exclude.deleteRemote || false, // delete ALL existing files at destination before uploading, if true\n                forcePasv: true // Passive mode is forced (EPSV command is not sent)\n            };\n            return config;\n        })\n        .then((config) => {\n            const FtpDeploy = require('ftp-deploy');\n            const ftpDeploy = new FtpDeploy();\n            return ftpDeploy.deploy(config);\n        }).catch(reject);\n});\n\nconst _createEnvFtpConfig = async (configFilePath, previousContent = '') => {\n    let envContent = previousContent || '';\n\n    const { host, user, password, port } = await inquirer.prompt([\n        {\n            name: 'host',\n            type: 'input',\n            message: 'Type your FTP host',\n            validate: i => !!i || 'No FTP server provided'\n        },\n        {\n            name: 'port',\n            type: 'number',\n            message: 'Type your FTP port',\n            default: 21,\n            validate: i => !!i || 'No FTP server provided'\n        },\n        {\n            name: 'user',\n            message: 'Type your FTP user',\n            type: 'input',\n            validate: i => !!i || 'No FTP user provided'\n        },\n        {\n            name: 'password',\n            message: 'Type your FTP password (or press ENTER for prompting every time)',\n            type: 'password',\n        },\n    ]);\n\n    envContent += `RNV_DEPLOY_WEB_FTP_SERVER=${host}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_USER=${user}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_PASSWORD=${password}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_PORT=${port}`;\n\n    fs.writeFileSync(configFilePath, envContent);\n    logInfo(`Writing .env config to ${configFilePath}`);\n};\n\nconst _createDeployConfig = async (c, platform) => {\n    logTask(`_createDeployConfig:${platform}`);\n\n    const deploy = c.buildConfig.platforms[platform].deploy || {};\n\n    deploy[DEPLOY_TARGET_FTP] = {};\n    deploy[DEPLOY_TARGET_FTP].type = DEPLOY_TARGET_FTP;\n\n    deploy[DEPLOY_TARGET_FTP].localRoot = path.resolve(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n    const { remoteRoot, deleteRemote, include, exclude, excludeSourcemaps } = await inquirer.prompt([\n        {\n            name: 'remoteRoot',\n            type: 'input',\n            message: 'Folder on the ftp to upload the project',\n            default: '/',\n        },\n        {\n            name: 'deleteRemote',\n            type: 'confirm',\n            message: 'Delete all contents of that folder when deploying versions?',\n        },\n        {\n            name: 'include',\n            type: 'input',\n            message: 'Included files pattern, comma separated',\n            default: '\\'*\\',\\'**/*\\''\n        },\n        {\n            name: 'exclude',\n            type: 'input',\n            message: 'Excluded files pattern, comma separated',\n            default: '[]'\n        },\n        {\n            name: 'excludeSourcemaps',\n            type: 'confirm',\n            message: 'Exclude sourcemaps?',\n        },\n    ]);\n\n    deploy[DEPLOY_TARGET_FTP].remoteRoot = remoteRoot || '/';\n    deploy[DEPLOY_TARGET_FTP].deleteRemote = deleteRemote;\n    deploy[DEPLOY_TARGET_FTP].include = include ? include.split(',') : ['*', '**/*'];\n    deploy[DEPLOY_TARGET_FTP].exclude = exclude ? exclude.split(',') : [];\n    deploy[DEPLOY_TARGET_FTP].exclude = deploy[DEPLOY_TARGET_FTP].exclude.concat(excludeSourcemaps ? ['**/*.map'] : []);\n\n    logInfo(`Setting your appconfig for ${platform} to include deploy type: ${DEPLOY_TARGET_FTP}\n                    on ${c.paths.appConfig.config}\n                `);\n\n    // TODO: Review this (where to put what props renative.*.json)\n    c.files.appConfig.config.platforms[platform].deploy = deploy;\n    writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n};\n\nconst deployToFtp = (c, platform) => {\n    logTask(`checkDeployConfigTarget:${platform}`);\n    const targetConfig = c.buildConfig.platforms[platform];\n    if (targetConfig?.deploy?.[DEPLOY_TARGET_FTP]?.type) {\n        return _deployToFtp(c, platform);\n    }\n    return _createDeployConfig(c, platform).then(() => _deployToFtp(c, platform));\n};\n\nexport { deployToFtp };\n"],"mappings":"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"}