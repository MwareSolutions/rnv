{"version":3,"sources":["../../src/deployTools/ftp.js"],"names":["_deployToFtp","c","platform","Promise","resolve","reject","promise","envPath","path","paths","project","dir","fs","existsSync","_createEnvFtpConfig","readFile","err","data","toString","then","envContent","matches","targetMatches","split","map","line","forEach","key","val","indexOf","envPromise","require","config","user","process","env","RNV_DEPLOY_WEB_FTP_USER","password","RNV_DEPLOY_WEB_FTP_PASSWORD","host","RNV_DEPLOY_WEB_FTP_SERVER","port","RNV_DEPLOY_WEB_FTP_PORT","localRoot","buildConfig","platforms","deploy","DEPLOY_TARGET_FTP","remoteRoot","include","exclude","deleteRemote","forcePasv","FtpDeploy","ftpDeploy","catch","configFilePath","previousContent","inquirer","prompt","name","type","message","validate","i","default","writeFileSync","_createDeployConfig","builds","runtime","appId","excludeSourcemaps","concat","appConfig","files","deployToFtp","targetConfig"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\n\nimport {\n    logInfo,\n    logTask,\n} from '../systemTools/logger';\nimport { writeFileSync } from '../systemTools/fileutils';\nimport { DEPLOY_TARGET_FTP } from './webTools';\n\nconst _deployToFtp = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`_deployToFtp:${platform}`);\n    let promise;\n    const envPath = path.resolve(c.paths.project.dir, '.env');\n    if (!fs.existsSync(envPath)) {\n        logInfo('.env file does not exist. Creating one for you');\n        promise = _createEnvFtpConfig(envPath);\n    } else {\n        promise = new Promise((resolve, reject) => {\n            fs.readFile(envPath, (err, data) => {\n                if (err) return reject(err);\n                resolve(data.toString());\n            });\n        });\n    }\n    promise.then((envContent) => {\n        let matches = 0;\n        const targetMatches = 2;\n        envContent.split('\\n').map(line => line.split('=')).forEach(([key, val]) => {\n            if (['RNV_DEPLOY_WEB_FTP_SERVER', 'RNV_DEPLOY_WEB_FTP_USER'].indexOf(key) > -1) {\n                matches++;\n            }\n        });\n        let envPromise;\n        if (matches >= targetMatches) {\n            envPromise = Promise.resolve();\n        } else {\n            logInfo('.env file does not contain all needed FTP config, helping you to set it up');\n            envPromise = _createEnvFtpConfig(envPath, `${envContent}\\n`);\n        }\n        return envPromise;\n    })\n        .then(() => {\n            require('dotenv').config();\n            const config = {\n                user: process.env.RNV_DEPLOY_WEB_FTP_USER,\n                password: process.env.RNV_DEPLOY_WEB_FTP_PASSWORD, // optional, prompted if none given\n                host: process.env.RNV_DEPLOY_WEB_FTP_SERVER,\n                port: process.env.RNV_DEPLOY_WEB_FTP_PORT || 21,\n                localRoot: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].localRoot,\n                remoteRoot: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].remoteRoot || '/',\n                include: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].include || ['*', '**/*'], // this would upload everything except dot files\n                exclude: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].exclude || [], // e.g. exclude sourcemaps - ** exclude: [] if nothing to exclude **\n                deleteRemote: c.buildConfig.platforms[platform].deploy[DEPLOY_TARGET_FTP].exclude.deleteRemote || false, // delete ALL existing files at destination before uploading, if true\n                forcePasv: true // Passive mode is forced (EPSV command is not sent)\n            };\n            return config;\n        })\n        .then((config) => {\n            const FtpDeploy = require('ftp-deploy');\n            const ftpDeploy = new FtpDeploy();\n            return ftpDeploy.deploy(config);\n        }).catch(reject);\n});\n\nconst _createEnvFtpConfig = async (configFilePath, previousContent = '') => {\n    let envContent = previousContent || '';\n\n    const { host, user, password, port } = await inquirer.prompt([\n        {\n            name: 'host',\n            type: 'input',\n            message: 'Type your FTP host',\n            validate: i => !!i || 'No FTP server provided'\n        },\n        {\n            name: 'port',\n            type: 'number',\n            message: 'Type your FTP port',\n            default: 21,\n            validate: i => !!i || 'No FTP server provided'\n        },\n        {\n            name: 'user',\n            message: 'Type your FTP user',\n            type: 'input',\n            validate: i => !!i || 'No FTP user provided'\n        },\n        {\n            name: 'password',\n            message: 'Type your FTP password (or press ENTER for prompting every time)',\n            type: 'password',\n        },\n    ]);\n\n    envContent += `RNV_DEPLOY_WEB_FTP_SERVER=${host}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_USER=${user}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_PASSWORD=${password}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_PORT=${port}`;\n\n    fs.writeFileSync(configFilePath, envContent);\n    logInfo(`Writing .env config to ${configFilePath}`);\n};\n\nconst _createDeployConfig = async (c, platform) => {\n    logTask(`_createDeployConfig:${platform}`);\n\n    const deploy = c.buildConfig.platforms[platform].deploy || {};\n\n    deploy[DEPLOY_TARGET_FTP] = {};\n    deploy[DEPLOY_TARGET_FTP].type = DEPLOY_TARGET_FTP;\n\n    deploy[DEPLOY_TARGET_FTP].localRoot = path.resolve(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n    const { remoteRoot, deleteRemote, include, exclude, excludeSourcemaps } = await inquirer.prompt([\n        {\n            name: 'remoteRoot',\n            type: 'input',\n            message: 'Folder on the ftp to upload the project',\n            default: '/',\n        },\n        {\n            name: 'deleteRemote',\n            type: 'confirm',\n            message: 'Delete all contents of that folder when deploying versions?',\n        },\n        {\n            name: 'include',\n            type: 'input',\n            message: 'Included files pattern, comma separated',\n            default: '\\'*\\',\\'**/*\\''\n        },\n        {\n            name: 'exclude',\n            type: 'input',\n            message: 'Excluded files pattern, comma separated',\n            default: '[]'\n        },\n        {\n            name: 'excludeSourcemaps',\n            type: 'confirm',\n            message: 'Exclude sourcemaps?',\n        },\n    ]);\n\n    deploy[DEPLOY_TARGET_FTP].remoteRoot = remoteRoot || '/';\n    deploy[DEPLOY_TARGET_FTP].deleteRemote = deleteRemote;\n    deploy[DEPLOY_TARGET_FTP].include = include ? include.split(',') : ['*', '**/*'];\n    deploy[DEPLOY_TARGET_FTP].exclude = exclude ? exclude.split(',') : [];\n    deploy[DEPLOY_TARGET_FTP].exclude = deploy[DEPLOY_TARGET_FTP].exclude.concat(excludeSourcemaps ? ['**/*.map'] : []);\n\n    logInfo(`Setting your appconfig for ${platform} to include deploy type: ${DEPLOY_TARGET_FTP}\n                    on ${c.paths.appConfig.config}\n                `);\n\n    // TODO: Review this (where to put what props renative.*.json)\n    c.files.appConfig.config.platforms[platform].deploy = deploy;\n    writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n};\n\nconst deployToFtp = (c, platform) => {\n    logTask(`checkDeployConfigTarget:${platform}`);\n    const targetConfig = c.buildConfig.platforms[platform];\n    if (targetConfig?.deploy?.[DEPLOY_TARGET_FTP]?.type) {\n        return _deployToFtp(c, platform);\n    }\n    return _createDeployConfig(c, platform).then(() => _deployToFtp(c, platform));\n};\n\nexport { deployToFtp };\n"],"file":"ftp.js"}