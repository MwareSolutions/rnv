{"version":3,"sources":["../../src/projectTools/projectGenerator.js"],"names":["highlight","chalk","green","configureGit","c","projectPath","paths","project","dir","fs","existsSync","path","join","cwd","_generateProject","data","base","resolve","projectName","replace","package","config","RENATIVE_CONFIG_NAME","packageName","appTitle","toLowerCase","templates","optionTemplates","selectedOption","selectedVersion","grey","version","workspaceID","optionWorkspaces","appConfigsDir","platformTemplatesDir","entryDir","platformAssetsDir","platformBuildsDir","projectConfigDir","defaults","title","id","appID","supportedPlatforms","optionPlatforms","selectedOptions","currentTemplate","isNew","gitEnabled","white","_prepareProjectOverview","inputProjectName","inputAppTitle","defaultAppTitle","teamID","inputAppID","inputVersion","defaultVersion","tempString","str","gray","confirmString","createNewProject","args","program","defaultTemplate","defaultProjectName","defaultWorkspace","SUPPORTED_PLATFORMS","inquirer","prompt","name","type","validate","value","message","inputProjectNameObj","default","val","match","v","semver","valid","coerce","choices","keysAsArray","inputWorkspace","runtime","selectedWorkspace","inputTemplate","templateVersionsStr","versionArr","split","reverse","rnvVersion","validVersions","filter","lte","map","inputTemplateVersion","pageSize","length","inputSupportedPlatforms","confirm","Analytics","captureEvent","template","platforms"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport path from 'path';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport semver from 'semver';\nimport fs from 'fs';\nimport { generateOptions } from '../systemTools/prompt';\nimport {\n    RENATIVE_CONFIG_NAME,\n    SUPPORTED_PLATFORMS\n} from '../constants';\nimport { getTemplateOptions } from '../templateTools';\nimport { mkdirSync, writeFileSync } from '../systemTools/fileutils';\nimport { executeAsync, commandExistsSync } from '../systemTools/exec';\nimport { printIntoBox, printBoxStart, printBoxEnd, printArrIntoBox,\n    logTask,\n    logSuccess,\n    logInfo,\n    logWarning } from '../systemTools/logger';\nimport { getWorkspaceOptions } from './workspace';\nimport { parseRenativeConfigs } from '../configTools/configParser';\nimport Analytics from '../systemTools/analytics';\n\nconst highlight = chalk.green;\n\nconst configureGit = async (c) => {\n    const projectPath = c.paths.project.dir;\n    logTask(`configureGit:${projectPath}`);\n\n    if (!fs.existsSync(path.join(projectPath, '.git'))) {\n        logInfo('Your project does not have a git repo. Creating one...');\n        if (commandExistsSync('git')) {\n            await executeAsync('git init', { cwd: projectPath });\n            await executeAsync('git add -A', { cwd: projectPath });\n            await executeAsync('git commit -m \"Initial\"', { cwd: projectPath });\n        } else {\n            logWarning('We tried to create a git repo inside your project but you don\\'t seem to have git installed');\n        }\n    }\n};\n\nconst _generateProject = async (c, data) => {\n    logTask('_generateProject');\n\n    const base = path.resolve('.');\n\n    c.paths.project.dir = path.join(base, data.projectName.replace(/(\\s+)/g, '_'));\n    c.paths.project.package = path.join(c.paths.project.dir, 'package.json');\n    c.paths.project.config = path.join(c.paths.project.dir, RENATIVE_CONFIG_NAME);\n\n    data.packageName = data.appTitle.replace(/\\s+/g, '-').toLowerCase();\n\n    mkdirSync(c.paths.project.dir);\n\n    const templates = {};\n\n\n    logTask(`_generateProject:${data.optionTemplates.selectedOption}:${data.optionTemplates.selectedVersion}`, chalk.grey);\n\n    templates[data.optionTemplates.selectedOption] = {\n        version: data.optionTemplates.selectedVersion\n    };\n\n    const config = {\n        projectName: data.projectName,\n        workspaceID: data.optionWorkspaces.selectedOption,\n        paths: {\n            appConfigsDir: './appConfigs',\n            platformTemplatesDir: '$RNV_HOME/platformTemplates',\n            entryDir: './',\n            platformAssetsDir: './platformAssets',\n            platformBuildsDir: './platformBuilds',\n            projectConfigDir: './projectConfig'\n        },\n        defaults: {\n            title: data.appTitle,\n            id: data.appID,\n            supportedPlatforms: data.optionPlatforms.selectedOptions\n        },\n        templates,\n        currentTemplate: data.optionTemplates.selectedOption,\n        isNew: true\n    };\n\n    writeFileSync(c.paths.project.config, config);\n\n    if (data.gitEnabled) {\n        await configureGit(c);\n    }\n\n    logSuccess(\n        `Your project is ready! navigate to project ${chalk.white(`cd ${data.projectName}`)} and run ${chalk.white(\n            `rnv run -p ${data.optionPlatforms.selectedOptions[0]}`,\n        )} to see magic happen!`,\n    );\n};\n\nconst _prepareProjectOverview = (c, data) => {\n    data.projectName = data.inputProjectName;\n    data.appTitle = data.inputAppTitle || data.defaultAppTitle;\n    data.teamID = '';\n    data.appID = data.inputAppID ? data.inputAppID.replace(/\\s+/g, '-').toLowerCase() : data.appID;\n    data.version = data.inputVersion || data.defaultVersion;\n    const tempString = `${data.optionTemplates.selectedOption}@${data.optionTemplates.selectedVersion}`;\n\n    let str = printBoxStart('🚀  ReNative Project Generator');\n    str += printIntoBox('');\n    str += printIntoBox(`Project Name (folder): ${highlight(data.projectName)}`, 1);\n    str += printIntoBox(`Workspace: ${highlight(data.optionWorkspaces.selectedOption)}`, 1);\n    str += printIntoBox(`Project Title: ${highlight(data.appTitle)}`, 1);\n    str += printIntoBox(`Project Version: ${highlight(data.version)}`, 1);\n    str += printIntoBox(`App ID: ${highlight(data.appID)}`, 1);\n    str += printIntoBox(`Project Template: ${highlight(tempString)}`, 1);\n    str += printIntoBox(`Git Enabled: ${highlight(data.gitEnabled)}`, 1);\n    str += printIntoBox('');\n    str += printIntoBox('Project Platforms:');\n    str += printArrIntoBox(data.optionPlatforms.selectedOptions);\n    str += printIntoBox('');\n    str += printIntoBox('Project Structure:');\n    str += printIntoBox('');\n    str += printIntoBox(data.projectName);\n    str += chalk.gray(`│   ├── appConfigs            # Application flavour configuration files/assets │\n│   │   └── [APP_ID]          # Example application flavour                    │\n│   │       ├── assets        # Platform assets injected to ./platformAssets   │\n│   │       ├── builds        # Platform files injected to ./platformBuilds    │\n│   │       ├── fonts             # Folder for all custom fonts                │\n│   │       ├── plugins           # Multi-platform plugins injections          │\n│   │       └── renative.json # Application flavour config                     │\n│   ├── platformAssets        # Generated cross-platform assets                │\n│   ├── platformBuilds        # Generated platform app projects                │\n│   ├── src                   # Source code files                              │\n│   ├── index.*.js            # Entry files                                    │\n│   └── renative.json         # ReNative project configuration                 │\n`);\n    str += printIntoBox('');\n    str += printBoxEnd();\n    str += '\\n';\n\n    data.confirmString = str;\n};\n\nexport const createNewProject = async (c) => {\n    logTask('createNewProject');\n    const { args } = c.program;\n\n    let data = {\n        defaultVersion: '0.1.0',\n        defaultTemplate: 'renative-template-hello-world',\n        defaultProjectName: 'helloRenative',\n        defaultAppTitle: 'Hello Renative',\n        defaultWorkspace: 'rnv'\n    };\n    data.optionPlatforms = generateOptions(SUPPORTED_PLATFORMS, true);\n    data.optionTemplates = {};\n    data.optionWorkspaces = getWorkspaceOptions(c);\n\n    // logWelcome();\n    let inputProjectName;\n\n    if (args[1] && args[1] !== '') {\n        inputProjectName = args[1];\n    } else {\n        const inputProjectNameObj = await inquirer.prompt({\n            name: 'inputProjectName',\n            type: 'input',\n            validate: value => !!value,\n            message: \"What's your project Name? (no spaces, folder based on ID will be created in this directory)\"\n        });\n        inputProjectName = inputProjectNameObj.inputProjectName;\n    }\n\n    const {\n        inputAppTitle, inputAppID, inputVersion, inputWorkspace\n    } = await inquirer.prompt([{\n        name: 'inputAppTitle',\n        type: 'input',\n        default: data.defaultAppTitle,\n        validate: val => !!val || 'Please enter a title',\n        message: 'What\\'s your project Title?'\n    }, {\n        name: 'inputAppID',\n        type: 'input',\n        default: () => {\n            data.appID = `com.mycompany.${inputProjectName.replace(/\\s+/g, '').toLowerCase()}`;\n            return data.appID;\n        },\n        validate: id => !!id.match(/[a-z]+\\.[a-z0-9]+\\.[a-z0-9]+/) || 'Please enter a valid appID (com.test.app)',\n        message: 'What\\'s your App ID?'\n    }, {\n        name: 'inputVersion',\n        type: 'input',\n        default: data.defaultVersion,\n        validate: v => !!semver.valid(semver.coerce(v)) || 'Please enter a valid semver version (1.0.0, 42.6.7.9.3-alpha, etc.)',\n        message: 'What\\'s your Version?'\n    }, {\n        name: 'inputWorkspace',\n        type: 'list',\n        message: 'What workspace to use?',\n        default: data.defaultWorkspace,\n        choices: data.optionWorkspaces.keysAsArray\n    }]);\n    data.optionWorkspaces.selectedOption = inputWorkspace;\n\n    c.runtime.selectedWorkspace = inputWorkspace;\n    await parseRenativeConfigs(c);\n    data.optionTemplates = getTemplateOptions(c);\n\n    const {\n        inputTemplate\n    } = await inquirer.prompt({\n        name: 'inputTemplate',\n        type: 'list',\n        message: 'What template to use?',\n        default: data.defaultTemplate,\n        choices: data.optionTemplates.keysAsArray\n    });\n    data.optionTemplates.selectedOption = inputTemplate;\n\n    const templateVersionsStr = await executeAsync(c, `npm view ${data.optionTemplates.selectedOption} versions`);\n    const versionArr = templateVersionsStr.replace(/\\r?\\n|\\r|\\s|'|\\[|\\]/g, '').split(',').reverse();\n    const { rnvVersion } = c;\n\n    // filter greater versions than rnv\n    const validVersions = versionArr.filter(version => semver.lte(version, rnvVersion)).map(v => ({ name: v, value: v }));\n    if (validVersions[0].name === rnvVersion) {\n        // mark the same versions as recommended\n        validVersions[0].name = `${validVersions[0].name} (recommended)`;\n    }\n\n    data.optionTemplates.selectedVersion = versionArr[0];\n\n    const {\n        inputTemplateVersion\n    } = await inquirer.prompt({\n        name: 'inputTemplateVersion',\n        type: 'list',\n        message: 'What version of template to use?',\n        default: data.optionTemplates.selectedVersion,\n        choices: validVersions\n    });\n    data.optionTemplates.selectedVersion = inputTemplateVersion;\n\n\n    const {\n        inputSupportedPlatforms\n    } = await inquirer.prompt({\n        name: 'inputSupportedPlatforms',\n        type: 'checkbox',\n        pageSize: 20,\n        message: 'What platforms would you like to use?',\n        validate: val => !!val.length || 'Please select at least a platform',\n        default: data.optionPlatforms.keysAsArray,\n        choices: data.optionPlatforms.keysAsArray\n    });\n\n    const {\n        gitEnabled\n    } = await inquirer.prompt({\n        name: 'gitEnabled',\n        type: 'confirm',\n        message: 'Do you want to set-up git in your new project?'\n    });\n\n    data = {\n        ...data, inputProjectName, inputAppTitle, inputAppID, inputVersion, inputTemplate, inputSupportedPlatforms, inputWorkspace, gitEnabled\n    };\n    data.optionPlatforms.selectedOptions = inputSupportedPlatforms;\n\n\n    _prepareProjectOverview(c, data);\n\n    const { confirm } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'confirm',\n        message: `\\n${data.confirmString}\\nIs all this correct?`\n    });\n\n    if (confirm) {\n        try {\n            await Analytics.captureEvent({\n                type: 'newProject',\n                template: inputTemplate,\n                platforms: inputSupportedPlatforms\n            });\n        } catch {}\n\n        await _generateProject(c, data);\n    }\n};\n"],"file":"projectGenerator.js"}