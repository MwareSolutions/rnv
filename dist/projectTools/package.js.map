{"version":3,"file":"package.js","names":["bumpVersions","version","Config","getConfig","paths","dir","project","pluginTemplates","rnv","packagesDir","path","join","fs","existsSync","packages","readdirSync","forEach","name","pkgPath","pkgJsonPath","lstatSync","isDirectory","existingPkgJson","require","writeObjectSync","renativePkgPath","copyFileSync","updateObjectSync","config","renative","publishAll","Promise","all","map","executeAsync","cwd","rnvPkg","args","program","rawArgs","slice","firstArg","secondArg","logError","semver","valid"],"sources":["../../src/projectTools/package.js"],"sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require */\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n\nimport Config from '../config';\nimport { executeAsync } from '../systemTools/exec';\nimport { writeObjectSync, copyFileSync, updateObjectSync } from '../systemTools/fileutils';\nimport { logError } from '../systemTools/logger';\n\nconst bumpVersions = (version) => {\n    const { project: { dir }, rnv: { pluginTemplates } } = Config.getConfig().paths;\n    // check for packages to bump\n    const packagesDir = path.join(dir, 'packages');\n    if (fs.existsSync(packagesDir)) {\n        const packages = fs.readdirSync(packagesDir);\n        packages.forEach((name) => {\n            const pkgPath = path.join(packagesDir, name);\n            const pkgJsonPath = path.join(pkgPath, 'package.json');\n            if (fs.lstatSync(pkgPath).isDirectory() && fs.existsSync(pkgJsonPath)) {\n                // we found a packaaaage, fist-bumpin' it\n                const existingPkgJson = require(pkgJsonPath);\n                existingPkgJson.version = version;\n                writeObjectSync(pkgJsonPath, existingPkgJson);\n            }\n        });\n        // check if it's our turf and do some extra magic\n        const renativePkgPath = path.join(packagesDir, 'renative');\n        if (fs.existsSync(renativePkgPath)) {\n            copyFileSync(path.join(dir, 'README.md'), path.join(renativePkgPath, 'README.md'));\n            updateObjectSync(pluginTemplates.config, {\n                pluginTemplates: {\n                    renative: {\n                        version\n                    }\n                }\n            });\n        }\n    }\n};\n\nconst publishAll = () => {\n    const { project: { dir } } = Config.getConfig().paths;\n    const packagesDir = path.join(dir, 'packages');\n    if (fs.existsSync(packagesDir)) {\n        const packages = fs.readdirSync(packagesDir);\n        return Promise.all(packages.map((name) => {\n            const pkgPath = path.join(packagesDir, name);\n            return executeAsync('npm i', { cwd: pkgPath });\n        }));\n    }\n    return true;\n};\n\nconst rnvPkg = async () => {\n    let args = [...Config.getConfig().program.rawArgs];\n    args = args.slice(3);\n\n    const firstArg = args[0];\n    const secondArg = args[1];\n\n    switch (firstArg) {\n        case 'version':\n            // sets the given version to all of the packages, if there are any\n            if (!secondArg) return logError('No version specified', false, true);\n            if (!semver.valid(secondArg)) return logError(`Invalid version specified ${secondArg}`, false, true);\n            return bumpVersions(secondArg);\n        case 'publish':\n            return publishAll();\n        default:\n            logError(`Unknown argument ${firstArg}`, false, true);\n            break;\n    }\n};\n\nexport default rnvPkg;\n"],"mappings":"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"}