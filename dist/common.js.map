{"version":3,"sources":["../src/common.js"],"names":["initializeBuilder","cmd","subCmd","process","program","c","command","subCommand","info","generateChecksum","str","algorithm","encoding","crypto","createHash","update","digest","getSourceExts","sExt","PLATFORMS","platform","sourceExts","factors","platforms","fallbacks","getSourceExtsAsString","length","join","sanitizeColor","val","rgb","rgbDecimal","hex","colorString","get","to","map","v","Math","round","isBuildSchemeSupported","scheme","buildConfig","buildSchemes","schemeDoesNotExist","opts","name","type","message","choices","keysAsArray","logMessage","selectedScheme","confirmActiveBundler","runtime","skipActiveServerCheck","warningMessage","port","confirm","Promise","reject","getAppFolder","path","paths","project","builds","dir","appId","getAppSubFolder","subFolder","IOS","TVOS","getAppTemplateFolder","platformTemplatesDirs","CLI_PROPS","getConfigProp","key","defaultVal","p","ps","resultPlatforms","undefined","getFlavouredProp","resultCli","includes","resultScheme","resultCommon","common","result","Config","getValueOrMergedObject","chalk","grey","getAppId","id","idSuffix","getAppTitle","getAppVersion","files","package","version","getAppAuthor","author","getAppLicense","license","getEntryFile","entryFile","getGetJsBundleFile","getAppDescription","description","getAppVersionCode","versionCode","vc","split","forEach","Number","toString","logErrorPlatform","white","PLATFORM_RUNS","configureIfRequired","device","nc","appConfig","reset","resetHard","getBinaryPath","appFolder","signingConfig","productName","appName","ANDROID","ANDROID_TV","ANDROID_WEAR","WEB","MACOS","WINDOWS","TIZEN","TIZEN_MOBILE","WEBOS","writeCleanFile","source","destination","overrides","fs","existsSync","pFile","readFileSync","pFileClean","regEx","RegExp","pattern","replace","override","writeFileSync","getBuildsFolder","customPath","pp","getIP","ip","address","cleanPlatformIfRequired","checkPortInUse","resolve","err","availablePort","parseInt","resolveNodeModulePath","filePath","pth","rnv","nodeModulesDir","obj","val1","getBuildFilePath","sp","sp2","projectConfig","sp3","waitForEmulator","cli","callback","attempts","maxAttempts","CHECK_INTEVAL","maxErrorLength","spinner","start","interval","setInterval","silent","timeout","then","resp","clearInterval","succeed","fail","catch","waitForWebpack","extendConfig","devServerHost","localhost","url","axios","res","status","importPackageFromProject","getConfig","pkg","require","default"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport detectPort from 'detect-port';\nimport ora from 'ora';\nimport ip from 'ip';\nimport axios from 'axios';\nimport colorString from 'color-string';\nimport crypto from 'crypto';\nimport { getValidLocalhost } from './utils';\nimport { createPlatformBuild, cleanPlatformBuild } from './platformTools';\nimport CLI from './cli';\nimport {\n    configureLogger, logError, logTask,\n    logWarning, logInfo,\n    logInitialize\n} from './systemTools/logger';\nimport {\n    IOS, ANDROID, ANDROID_TV, ANDROID_WEAR, WEB, TIZEN, TIZEN_MOBILE, TVOS,\n    WEBOS, MACOS, WINDOWS,\n    PLATFORMS\n} from './constants';\nimport { execCLI } from './systemTools/exec';\nimport {\n    createRnvConfig,\n} from './configTools/configParser';\nimport { cleanPlaformAssets } from './projectTools/projectParser';\nimport { generateOptions, inquirerPrompt } from './systemTools/prompt';\nimport Config from './config';\n\nexport const initializeBuilder = async (cmd, subCmd, process, program) => {\n    const c = createRnvConfig(program, process, cmd, subCmd);\n\n    configureLogger(c, c.process, c.command, c.subCommand, program.info === true);\n    logInitialize();\n\n    return c;\n};\n\n\nexport const generateChecksum = (str, algorithm, encoding) => crypto\n    .createHash(algorithm || 'md5')\n    .update(str, 'utf8')\n    .digest(encoding || 'hex');\n\nexport const getSourceExts = (c) => {\n    const sExt = PLATFORMS[c.platform]?.sourceExts;\n    if (sExt) {\n        return [...sExt.factors, ...sExt.platforms, ...sExt.fallbacks];\n    }\n    return [];\n};\n\nexport const getSourceExtsAsString = (c) => {\n    const sourceExts = getSourceExts(c);\n    return sourceExts.length ? `['${sourceExts.join('\\',\\'')}']` : '[]';\n};\n\nexport const sanitizeColor = (val) => {\n    if (!val) {\n        logWarning('sanitizeColor: passed null. will use default #FFFFFF instead');\n        return {\n            rgb: [255, 255, 255, 1],\n            rgbDecimal: [1, 1, 1, 1],\n            hex: '#FFFFFF'\n        };\n    }\n\n    const rgb = colorString.get.rgb(val);\n    const hex = colorString.to.hex(rgb);\n\n    return {\n        rgb,\n        rgbDecimal: rgb.map(v => (v > 1 ? Math.round((v / 255) * 10) / 10 : v)),\n        hex\n    };\n};\n\nexport const isBuildSchemeSupported = async (c) => {\n    logTask(`isBuildSchemeSupported:${c.platform}`);\n\n    const { scheme } = c.program;\n\n    if (!c.buildConfig.platforms[c.platform]) {\n        c.buildConfig.platforms[c.platform] = {};\n    }\n\n    const { buildSchemes } = c.buildConfig.platforms[c.platform];\n\n\n    if (!buildSchemes) {\n        logWarning(`Your appConfig for platform ${c.platform} has no buildSchemes. Will continue with defaults`);\n        return false;\n    }\n\n    const schemeDoesNotExist = scheme && !buildSchemes[scheme];\n    if (scheme === true || schemeDoesNotExist) {\n        if (schemeDoesNotExist && scheme && scheme !== true) {\n            logError('Build scheme you picked does not exists.');\n        }\n        const opts = generateOptions(buildSchemes);\n\n        const { selectedScheme } = await inquirerPrompt({\n            name: 'selectedScheme',\n            type: 'list',\n            message: 'Pick one of available buildSchemes',\n            choices: opts.keysAsArray,\n            logMessage: 'You need to specify scheme'\n        });\n\n        c.program.scheme = selectedScheme;\n        return selectedScheme;\n    }\n    return scheme;\n};\n\nexport const confirmActiveBundler = async (c) => {\n    if (c.runtime.skipActiveServerCheck) return true;\n    const { confirm } = await inquirerPrompt({\n        type: 'confirm',\n        message: 'It will be used for this session. Continue?',\n        warningMessage: `Another ${c.platform} server at port ${c.runtime.port} already running`\n    });\n\n    if (confirm) return true;\n    return Promise.reject('Cancelled by user');\n};\n\nexport const getAppFolder = (c, platform) => path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n\nexport const getAppSubFolder = (c, platform) => {\n    let subFolder = '';\n    if (platform === IOS) subFolder = 'RNVApp';\n    else if (platform === TVOS) subFolder = 'RNVAppTVOS';\n    return path.join(getAppFolder(c, platform), subFolder);\n};\n\nexport const getAppTemplateFolder = (c, platform) => path.join(c.paths.project.platformTemplatesDirs[platform], `${platform}`);\n\nexport const CLI_PROPS = [\n    'provisioningStyle',\n    'codeSignIdentity',\n    'provisionProfileSpecifier'\n];\n\n// We need to slowly move this to Config and refactor everything to use it from there\nexport const getConfigProp = (c, platform, key, defaultVal) => {\n    if (!c.buildConfig) {\n        logError('getConfigProp: c.buildConfig is undefined!');\n        return null;\n    }\n    const p = c.buildConfig.platforms[platform];\n    const ps = c.runtime.scheme;\n    let resultPlatforms;\n    let scheme;\n    if (p) {\n        scheme = p.buildSchemes ? p.buildSchemes[ps] : undefined;\n        resultPlatforms = getFlavouredProp(c, c.buildConfig.platforms[platform], key);\n    }\n\n    scheme = scheme || {};\n    const resultCli = CLI_PROPS.includes(key) ? c.program[key] : undefined;\n    const resultScheme = scheme[key];\n    const resultCommon = getFlavouredProp(c, c.buildConfig.common, key);\n\n    let result = Config.getValueOrMergedObject(resultCli, resultScheme, resultPlatforms, resultCommon);\n\n    if (result === undefined) result = defaultVal; // default the value only if it's not specified in any of the files. i.e. undefined\n    logTask(`getConfigProp:${platform}:${key}:${result}`, chalk.grey);\n    return result;\n};\n\nexport const getAppId = (c, platform) => {\n    const id = getConfigProp(c, platform, 'id');\n    const idSuffix = getConfigProp(c, platform, 'idSuffix');\n    return idSuffix ? `${id}${idSuffix}` : id;\n};\n\nexport const getAppTitle = (c, platform) => getConfigProp(c, platform, 'title');\n\nexport const getAppVersion = (c, platform) => getConfigProp(c, platform, 'version') || c.files.project.package?.version;\n\nexport const getAppAuthor = (c, platform) => getConfigProp(c, platform, 'author') || c.files.project.package?.author;\n\nexport const getAppLicense = (c, platform) => getConfigProp(c, platform, 'license') || c.files.project.package?.license;\n\nexport const getEntryFile = (c, platform) => c.buildConfig.platforms?.[platform]?.entryFile;\n\nexport const getGetJsBundleFile = (c, platform) => getConfigProp(c, platform, 'getJsBundleFile');\n\nexport const getAppDescription = (c, platform) => getConfigProp(c, platform, 'description') || c.files.project.package?.description;\n\nexport const getAppVersionCode = (c, platform) => {\n    const versionCode = getConfigProp(c, platform, 'versionCode');\n    if (versionCode) return versionCode;\n\n    const version = getAppVersion(c, platform);\n\n    let vc = '';\n    version\n        .split('-')[0]\n        .split('.')\n        .forEach((v) => {\n            vc += v.length > 1 ? v : `0${v}`;\n        });\n    return Number(vc).toString();\n};\n\nexport const logErrorPlatform = (c, platform) => {\n    logError(`Platform: ${chalk.white(platform)} doesn't support command: ${chalk.white(c.command)}`);\n};\n\nexport const PLATFORM_RUNS = {};\n\nexport const configureIfRequired = async (c, platform) => {\n    logTask(`configureIfRequired:${platform}`);\n\n    if (PLATFORM_RUNS[platform]) {\n        return;\n    }\n    PLATFORM_RUNS[platform] = true;\n    const { device } = c.program;\n    const nc = {\n        command: 'configure',\n        program: {\n            appConfig: c.id,\n            update: false,\n            platform,\n            device\n        }\n    };\n\n    if (c.program.reset) {\n        await cleanPlatformBuild(c, platform);\n    }\n\n    if (c.program.resetHard) {\n        await cleanPlaformAssets(c);\n    }\n    await createPlatformBuild(c, platform);\n    await CLI(c, nc);\n};\n\nexport const getBinaryPath = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n    const id = getConfigProp(c, platform, 'id');\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'debug');\n    const version = getAppVersion(c, platform);\n    const productName = 'ReNative - macos';\n    const appName = getConfigProp(c, platform, 'appName');\n\n    switch (platform) {\n        case IOS:\n        case TVOS:\n            return `${appFolder}/release/RNVApp.ipa`;\n        case ANDROID:\n        case ANDROID_TV:\n        case ANDROID_WEAR:\n            return `${appFolder}/app/build/outputs/apk/${signingConfig}/app-${signingConfig}.apk`;\n        case WEB:\n            return `${appFolder}/public`;\n        case MACOS:\n        case WINDOWS:\n            return `${appFolder}/build/release/${productName}-${version}`;\n        case TIZEN:\n        case TIZEN_MOBILE:\n            return `${appFolder}/output/${appName}.wgt`;\n        case WEBOS:\n            return `${appFolder}/output/${id}_${version}_all.ipk`;\n        default:\n            return appFolder;\n    }\n};\n\nexport const writeCleanFile = (source, destination, overrides) => {\n    // logTask(`writeCleanFile`)\n    if (!fs.existsSync(source)) {\n        logError(`Cannot write file. source path doesn't exists: ${source}`);\n        return;\n    }\n    if (!fs.existsSync(destination)) {\n        logWarning(`destination path doesn't exists: ${destination}. will create new one`);\n        // return;\n    }\n    const pFile = fs.readFileSync(source, 'utf8');\n    let pFileClean = pFile;\n    if (overrides) {\n        overrides.forEach((v) => {\n            const regEx = new RegExp(v.pattern, 'g');\n            pFileClean = pFileClean.replace(regEx, v.override);\n        });\n    }\n\n    fs.writeFileSync(destination, pFileClean, 'utf8');\n};\n\nexport const getBuildsFolder = (c, platform, customPath) => {\n    const pp = customPath || c.paths.appConfig.dir;\n    // if (!fs.existsSync(pp)) {\n    //     logWarning(`Path ${chalk.white(pp)} does not exist! creating one for you..`);\n    // }\n    const p = path.join(pp, `builds/${platform}@${c.runtime.scheme}`);\n    if (fs.existsSync(p)) return p;\n    return path.join(pp, `builds/${platform}`);\n};\n\nexport const getIP = () => ip.address();\n\nexport const cleanPlatformIfRequired = async (c, platform) => {\n    if (c.program.reset) {\n        logInfo(`You passed ${chalk.white('-r')} argument. paltform ${chalk.white(platform)} will be cleaned up first!`);\n        await cleanPlatformBuild(c, platform);\n    }\n};\n\nexport const checkPortInUse = (c, platform, port) => new Promise((resolve, reject) => {\n    detectPort(port, (err, availablePort) => {\n        if (err) {\n            reject(err);\n            return;\n        }\n        resolve(parseInt(port, 10) !== parseInt(availablePort, 10));\n    });\n});\n\nexport const resolveNodeModulePath = (c, filePath) => {\n    let pth = path.join(c.paths.rnv.nodeModulesDir, filePath);\n    if (!fs.existsSync(pth)) {\n        pth = path.join(c.paths.project.nodeModulesDir, filePath);\n    }\n    return pth;\n};\n\nexport const getFlavouredProp = (c, obj, key) => {\n    if (!key) return null;\n    const val1 = obj[`${key}@${c.runtime.scheme}`];\n    if (val1) return val1;\n    return obj[key];\n};\n\nexport const getBuildFilePath = (c, platform, filePath) => {\n    // P1 => platformTemplates\n    let sp = path.join(getAppTemplateFolder(c, platform), filePath);\n    // P2 => appConfigs/base + @buildSchemes\n    const sp2 = path.join(getBuildsFolder(c, platform, c.paths.project.projectConfig.dir), filePath);\n    if (fs.existsSync(sp2)) sp = sp2;\n    // P3 => appConfigs + @buildSchemes\n    const sp3 = path.join(getBuildsFolder(c, platform), filePath);\n    if (fs.existsSync(sp3)) sp = sp3;\n    return sp;\n};\n\nexport const waitForEmulator = async (c, cli, command, callback) => {\n    let attempts = 0;\n    const maxAttempts = 30;\n    const CHECK_INTEVAL = 2000;\n    const { maxErrorLength } = c.program;\n    const spinner = ora('Waiting for emulator to boot...').start();\n\n    return new Promise((resolve, reject) => {\n        const interval = setInterval(() => {\n            execCLI(c, cli, command, { silent: true, timeout: 10000, maxErrorLength })\n                .then((resp) => {\n                    if (callback(resp)) {\n                        clearInterval(interval);\n                        spinner.succeed();\n                        return resolve(true);\n                    }\n                    attempts++;\n                    if (attempts === maxAttempts) {\n                        clearInterval(interval);\n                        spinner.fail('Can\\'t connect to the running emulator. Try restarting it.');\n                        return reject('Can\\'t connect to the running emulator. Try restarting it.');\n                    }\n                }).catch(() => {\n                    attempts++;\n                    if (attempts > maxAttempts) {\n                        clearInterval(interval);\n                        spinner.fail('Can\\'t connect to the running emulator. Try restarting it.');\n                        return reject('Can\\'t connect to the running emulator. Try restarting it.');\n                    }\n                });\n        }, CHECK_INTEVAL);\n    });\n};\n\nexport const waitForWebpack = async (c) => {\n    logTask(`waitForWebpack:${c.runtime.port}`);\n    let attempts = 0;\n    const maxAttempts = 10;\n    const CHECK_INTEVAL = 2000;\n    // const spinner = ora('Waiting for webpack to finish...').start();\n\n    const extendConfig = getConfigProp(c, c.platform, 'webpackConfig', {});\n    const devServerHost = getValidLocalhost(extendConfig.devServerHost, c.runtime.localhost);\n    const url = `http://${devServerHost}:${c.runtime.port}/assets/bundle.js`;\n    return new Promise((resolve, reject) => {\n        const interval = setInterval(() => {\n            axios.get(url).then((res) => {\n                if (res.status === 200) {\n                    clearInterval(interval);\n                    // spinner.succeed();\n                    return resolve(true);\n                }\n                attempts++;\n                if (attempts === maxAttempts) {\n                    clearInterval(interval);\n                    // spinner.fail('Can\\'t connect to webpack. Try restarting it.');\n                    return reject('Can\\'t connect to webpack. Try restarting it.');\n                }\n            }).catch(() => {\n                attempts++;\n                if (attempts > maxAttempts) {\n                    clearInterval(interval);\n                    // spinner.fail('Can\\'t connect to webpack. Try restarting it.');\n                    return reject('Can\\'t connect to webpack. Try restarting it.');\n                }\n            });\n        }, CHECK_INTEVAL);\n    });\n};\nexport const importPackageFromProject = (name) => {\n    const c = Config.getConfig();\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const pkg = require(path.join(c.paths.project.nodeModulesDir, `/${name}`));\n    if (pkg.default) return pkg.default;\n    return pkg;\n};\n\nexport default {\n    getBuildFilePath,\n    getBuildsFolder,\n    isBuildSchemeSupported,\n    getAppFolder,\n    getAppTemplateFolder,\n    initializeBuilder,\n    logErrorPlatform,\n    configureIfRequired,\n    getAppId,\n    getAppTitle,\n    getAppVersion,\n    getAppVersionCode,\n    writeCleanFile,\n    getEntryFile,\n    getGetJsBundleFile,\n    getAppDescription,\n    getAppAuthor,\n    getAppLicense,\n    getConfigProp,\n    getIP,\n    cleanPlatformIfRequired,\n    checkPortInUse,\n    resolveNodeModulePath,\n    waitForEmulator\n};\n"],"file":"common.js"}