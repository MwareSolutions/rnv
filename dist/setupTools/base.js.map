{"version":3,"sources":["../../src/setupTools/base.js"],"names":["BasePlatformSetup","os","c","Config","getConfig","paths","globalConfigPath","workspace","config","availableDownloader","androidSdkLocation","sdksToInstall","sdk","location","setupConfig","android","androidSdk","tizenSdk","tizenSdkPath","webosSdk","webosSdkPath","downloader","Error","downloadLocation","shell","rm","aditionalArguments","locationArgument","command","sdkUrl","exec","skipPrereq","checkPrereqs","installPrereqs","downloadSdk","unzipSdk","installSdksAndEmulator","installTizenSdk","installWebosSdk","installFastlane","installDocker","postInstall","program","ci","inquirer","prompt","name","type","message","response","sdkInstall","installSdk","includes"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport shell from 'shelljs';\nimport inquirer from 'inquirer';\n\nimport { commandExistsSync } from '../systemTools/exec';\nimport { configureRnvGlobal } from '../configTools/configParser';\nimport { replaceHomeFolder, updateConfigFile } from '../systemTools/fileutils';\nimport setupConfig from './config';\nimport Config from '../config';\nimport { logTask, logError, logInfo, logDebug } from '../systemTools/logger';\n\nclass BasePlatformSetup {\n    constructor(os, c) {\n        // eslint-disable-next-line no-param-reassign\n        if (!c) c = Config.getConfig();\n        const { paths } = c;\n        this.os = os;\n        this.c = c;\n        this.globalConfigPath = paths.workspace.config;\n        this.availableDownloader = null;\n        this.androidSdkLocation = replaceHomeFolder('~/Android');\n        this.sdksToInstall = '\"build-tools;28.0.3\" \"emulator\" \"extras;android;m2repository\" \"extras;google;m2repository\" \"patcher;v4\" \"platform-tools\" \"platforms;android-28\" \"sources;android-28\" \"system-images;android-28;google_apis_playstore;x86\" \"tools\"';\n    }\n\n    checkPrereqs() {\n        logInfo(`Platform ${this.os}`);\n        logInfo('Checking if wget or curl is installed');\n        if (commandExistsSync('wget')) {\n            this.availableDownloader = 'wget';\n        } else if (commandExistsSync('curl')) {\n            this.availableDownloader = 'curl';\n        }\n    }\n\n    async installPrereqs() {\n        // to be overwritten\n        return true;\n    }\n\n    async postInstall(sdk) {\n        if (sdk === 'android') {\n            const { location } = setupConfig.android;\n            await updateConfigFile({ androidSdk: location }, this.globalConfigPath);\n            await configureRnvGlobal(this.c); // trigger the configure to update the paths for clis\n        }\n\n        if (sdk === 'tizen') {\n            await updateConfigFile({ tizenSdk: this.tizenSdkPath }, this.globalConfigPath);\n            await configureRnvGlobal(this.c); // trigger the configure to update the paths for clis\n        }\n\n        if (sdk === 'webos') {\n            await updateConfigFile({ webosSdk: this.webosSdkPath }, this.globalConfigPath);\n            await configureRnvGlobal(this.c); // trigger the configure to update the paths for clis\n        }\n    }\n\n    async downloadSdk(sdk) {\n        const downloader = this.availableDownloader;\n        if (!downloader) throw new Error('Wget or cURL not installed!');\n        logDebug(`Downloading ${sdk} SDK to ${setupConfig[sdk].downloadLocation} using ${downloader}`);\n        // remove the file if existing first\n        await shell.rm(setupConfig[sdk].downloadLocation);\n\n        let aditionalArguments;\n        let locationArgument;\n        if (downloader === 'wget') {\n            aditionalArguments = '-q';\n            locationArgument = replaceHomeFolder('-P ~/');\n        }\n        if (downloader === 'curl') {\n            aditionalArguments = '-#';\n            locationArgument = `--output ${setupConfig[sdk].downloadLocation}`;\n        }\n\n        const command = `${downloader} ${aditionalArguments} ${setupConfig[sdk].sdkUrl} ${locationArgument}`;\n\n        logDebug('Running', command);\n        logInfo(`Downloading ${sdk} SDK...`);\n        await shell.exec(command);\n    }\n\n    async unzipSdk(sdk) {\n        logDebug(`Unzipping from ${setupConfig[sdk].downloadLocation} to ${setupConfig[sdk].location}`);\n        if (!commandExistsSync('unzip')) throw new Error('unzip is not installed');\n        await shell.exec(`unzip -qq -o ${setupConfig[sdk].downloadLocation} -d ${setupConfig[sdk].location}`);\n    }\n\n    async installSdksAndEmulator() {\n        logDebug('Accepting licenses');\n        await shell.exec(`yes | ${setupConfig.android.location}/tools/bin/sdkmanager --licenses > /dev/null`);\n        logDebug('Installing SDKs', this.sdksToInstall);\n        await shell.exec(`${setupConfig.android.location}/tools/bin/sdkmanager ${this.sdksToInstall} > /dev/null`);\n    }\n\n    async installSdk(sdk, skipPrereq) {\n        logTask(`installSdk:${sdk}`);\n        !skipPrereq && this.checkPrereqs();\n        !skipPrereq && await this.installPrereqs();\n\n        switch (sdk) {\n            case 'android':\n                await this.downloadSdk(sdk);\n                await this.unzipSdk(sdk);\n                await this.installSdksAndEmulator();\n                break;\n            case 'tizen':\n                await this.installTizenSdk();\n                break;\n            case 'webos':\n                await this.installWebosSdk();\n                break;\n            case 'fastlane':\n                await this.installFastlane();\n                break;\n            case 'docker':\n                await this.installDocker();\n                break;\n            default:\n                break;\n        }\n\n        this.postInstall(sdk);\n    }\n\n    async installTizenSdk() {\n        // to be overwritten\n        logError('Install webos sdk not supported yet. Follow https://developer.tizen.org/development/tizen-studio/download to install it manually');\n        return true;\n    }\n\n    async installWebosSdk() {\n        // to be overwritten\n        logError('Install webos sdk not supported yet. Follow http://webostv.developer.lge.com/sdk/installation/ to install it manually');\n        return true;\n    }\n\n    async installFastlane() {\n        // to be overwritten\n        logError('Install fastlane not supported yet. Follow https://docs.fastlane.tools/getting-started/ios/setup/ to install it manually');\n        return true;\n    }\n\n    async installDocker() {\n        // to be overwritten\n        logError('Install docker not supported yet');\n        return true;\n    }\n\n    async askToInstallSDK(sdk) {\n        let sdkInstall;\n        if (!this.c.program.ci) {\n            const response = await inquirer.prompt([{\n                name: 'sdkInstall',\n                type: 'confirm',\n                message: `Do you want to install ${sdk} SDK?`,\n            }]);\n            // eslint-disable-next-line prefer-destructuring\n            sdkInstall = response.sdkInstall;\n        }\n\n        if (this.c.program.ci || sdkInstall) {\n            await this.installSdk(sdk, ['fastlane', 'docker'].includes(sdk)); // no prereqs needed for fastlane\n        } else {\n            throw new Error(`You can't run the project on this platform without ${sdk} sdk installed`);\n        }\n    }\n}\n\nexport default BasePlatformSetup;\n"],"file":"base.js"}