{"version":3,"sources":["../../src/setupTools/linux.js"],"names":["LinuxPlatformSetup","c","software","shell","exec","availableDownloader","installSoftware","sdk","location","setupConfig","android","globalConfigPath","JSON","stringify","androidSdk","files","workspace","config","sdks","ANDROID_SDK","cli","CLI_ANDROID_EMULATOR","path","join","CLI_ANDROID_ADB","CLI_ANDROID_AVDMANAGER","CLI_ANDROID_SDKMANAGER","BasePlatformSetup"],"mappings":"4sBAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;AAOMA,kB;AACF,4BAAYC,CAAZ,CAAe;AACL,OADK,CACIA,CADJ;AAEd,C;;AAED,yBAAsBC,QAAtB;AACQ,4BAAkB,SAAlB,CADR;AAEcC,iBAAMC,IAAN,0CAAoDF,QAApD,mBAFd;;;AAKW,IALX,uE;;;AAQA;AACS,KAAKG,mBADd;AAEQ,oBAAQ,gFAAR,EAFR;AAGc,KAAKC,eAAL,CAAqB,MAArB,CAHd;AAIQ,KAAKD,mBAAL,CAA2B,MAA3B,CAJR;;;AAOS,4BAAkB,OAAlB,CAPT;AAQQ,oBAAQ,uEAAR,EARR;AASc,KAAKC,eAAL,CAAqB,OAArB,CATd;;;AAYS,4BAAkB,OAAlB,CAZT;AAaQ,oBAAQ,sEAAR,EAbR;AAcc,KAAKA,eAAL,CAAqB,eAArB,CAdd;;;AAiBW,IAjBX,yE;;;AAoBA,qBAAkBC,GAAlB;AACQA,GAAG,GAAK,SADhB;AAEgBC,QAFhB,CAE6BC,gBAAYC,OAFzC,CAEgBF,QAFhB;AAGQ,iCAAqB,KAAKG,gBAA1B,UAAmDC,IAAI,CAACC,SAAL,CAAe,CAAEC,UAAU,CAAEN,QAAd,CAAf,CAAnD,EAHR;AAIc,gCAAiB,CAAEM,UAAU,CAAEN,QAAd,CAAjB,CAA2C,KAAKG,gBAAhD,CAJd;;AAMQ,KAAKV,CAAL,CAAOc,KAAP,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BC,IAA9B,CAAmCC,WAAnC,CAAiDX,QAAjD;AACgBW,WAPxB,CAO0C,KAAKlB,CAAL,CAAOc,KAAP,CAAaC,SAAb,CAAuBC,MAPjE,CAOgBC,IAPhB,CAOwBC,WAPxB;AAQQ,KAAKlB,CAAL,CAAOmB,GAAP,CAAWC,+BAAX,EAAmC,2BAAY,KAAKpB,CAAjB,CAAoBqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,mBAAvB,CAApB,CAAnC;AACA,KAAKlB,CAAL,CAAOmB,GAAP,CAAWI,0BAAX,EAA8B,2BAAY,KAAKvB,CAAjB,CAAoBqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,oBAAvB,CAApB,CAA9B;AACA,KAAKlB,CAAL,CAAOmB,GAAP,CAAWK,iCAAX,EAAqC,2BAAY,KAAKxB,CAAjB,CAAoBqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,sBAAvB,CAApB,CAArC;AACA,KAAKlB,CAAL,CAAOmB,GAAP,CAAWM,iCAAX,EAAqC,2BAAY,KAAKzB,CAAjB,CAAoBqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,sBAAvB,CAApB,CAArC,CAXR,uE,gCAjC6BQ,a;;;;;AAiDlB3B,kB","sourcesContent":["import shell from 'shelljs';\nimport path from 'path';\n\nimport { commandExistsSync } from '../systemTools/exec';\nimport { logInfo, logDebug } from '../systemTools/logger';\nimport BasePlatformSetup from './base';\nimport { updateConfigFile, getRealPath } from '../systemTools/fileutils';\nimport setupConfig from './config';\nimport {\n    CLI_ANDROID_ADB,\n    CLI_ANDROID_AVDMANAGER,\n    CLI_ANDROID_EMULATOR,\n    CLI_ANDROID_SDKMANAGER\n} from '../constants';\n\nclass LinuxPlatformSetup extends BasePlatformSetup {\n    constructor(c) {\n        super('linux', c);\n    }\n\n    async installSoftware(software) {\n        if (commandExistsSync('apt-get')) {\n            await shell.exec(`apt-get -qq update && apt-get install ${software} -y > /dev/null`);\n        }\n        // @todo also treat other linux flavours\n        return true;\n    }\n\n    async installPrereqs() {\n        if (!this.availableDownloader) {\n            logInfo('Looks like you don\\'t have wget or curl installed. We\\'ll install wget for you');\n            await this.installSoftware('wget');\n            this.availableDownloader = 'wget';\n        }\n\n        if (!commandExistsSync('unzip')) {\n            logInfo('Looks like you don\\'t have unzip installed. We\\'ll install it for you');\n            await this.installSoftware('unzip');\n        }\n\n        if (!commandExistsSync('javac')) {\n            logInfo('Looks like you don\\'t have java installed. We\\'ll install it for you');\n            await this.installSoftware('openjdk-8-jdk');\n        }\n\n        return true;\n    }\n\n    async postInstall(sdk) {\n        if (sdk === 'android') {\n            const { location } = setupConfig.android;\n            logDebug(`Updating ${this.globalConfigPath} with ${JSON.stringify({ androidSdk: location })}`);\n            await updateConfigFile({ androidSdk: location }, this.globalConfigPath);\n            // @todo find a more elegant way to update this\n            this.c.files.workspace.config.sdks.ANDROID_SDK = location;\n            const { sdks: { ANDROID_SDK } } = this.c.files.workspace.config;\n            this.c.cli[CLI_ANDROID_EMULATOR] = getRealPath(this.c, path.join(ANDROID_SDK, 'emulator/emulator'));\n            this.c.cli[CLI_ANDROID_ADB] = getRealPath(this.c, path.join(ANDROID_SDK, 'platform-tools/adb'));\n            this.c.cli[CLI_ANDROID_AVDMANAGER] = getRealPath(this.c, path.join(ANDROID_SDK, 'tools/bin/avdmanager'));\n            this.c.cli[CLI_ANDROID_SDKMANAGER] = getRealPath(this.c, path.join(ANDROID_SDK, 'tools/bin/sdkmanager'));\n        }\n    }\n}\n\nexport default LinuxPlatformSetup;\n"],"file":"linux.js"}