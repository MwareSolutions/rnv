{"version":3,"sources":["../../src/setupTools/windows.js"],"names":["LinuxPlatformSetup","c","scoopInstalled","os","availableDownloader","software","shell","exec","reloadPathEnv","bucket","installSoftware","addScoopBucket","androidSdkLocation","sdksToInstall","downloadDir","setupConfig","tizen","downloadLocation","split","pop","join","inquirer","prompt","type","name","message","default","validate","value","fs","existsSync","res","path","sdkPath","tizenSdkPath","downloadLink","webos","openCommand","webosSdkPath","BasePlatformSetup"],"mappings":"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","sourcesContent":["import shell from 'shelljs';\nimport { getInstalledPathSync } from 'get-installed-path';\nimport path from 'path';\nimport { exec } from 'child_process';\nimport inquirer from 'inquirer';\nimport fs from 'fs';\n\nimport { commandExistsSync, executeAsync, openCommand } from '../systemTools/exec';\nimport { logInfo, logDebug } from '../systemTools/logger';\nimport { replaceHomeFolder } from '../systemTools/fileutils';\nimport BasePlatformSetup from './base';\nimport setupConfig from './config';\n\nclass LinuxPlatformSetup extends BasePlatformSetup {\n    constructor(c) {\n        super('win32', c);\n        this.scoopInstalled = false;\n    }\n\n    checkPrereqs() {\n        logInfo(`Platform ${this.os}`);\n        logInfo('Checking wget is installed');\n        if (commandExistsSync('wget')) {\n            this.availableDownloader = 'wget';\n        }\n\n        // check if scoop is installed\n        if (commandExistsSync('scoop')) {\n            this.scoopInstalled = true;\n        }\n    }\n\n    async installSoftware(software) {\n        await shell.exec(replaceHomeFolder(`~/scoop/shims/scoop install ${software}`));\n        await this.reloadPathEnv();\n        return true;\n    }\n\n    addScoopBucket(bucket) {\n        return shell.exec(replaceHomeFolder(`~/scoop/shims/scoop bucket add ${bucket}`));\n    }\n\n    async reloadPathEnv() {\n        await shell.exec(`${getInstalledPathSync('rnv')}/scripts/resetPath.vbs`);\n        await shell.exec('%TEMP%/resetvars.bat');\n        return true;\n    }\n\n    async installPrereqs() {\n        if (!this.scoopInstalled) {\n            logInfo('Installing Scoop...');\n            await shell.exec(`powershell -executionpolicy remotesigned \"& \"\"${getInstalledPathSync('rnv')}/scripts/installPackageManager.ps1\"\"\"`);\n            await this.reloadPathEnv();\n        }\n        if (!this.availableDownloader) {\n            logInfo('Looks like you don\\'t have wget or curl installed. We\\'ll install wget for you');\n            await this.installSoftware('wget');\n            this.availableDownloader = 'wget';\n        }\n\n        if (!commandExistsSync('unzip')) {\n            logInfo('Looks like you don\\'t have unzip installed. We\\'ll install it for you');\n            await this.installSoftware('unzip');\n        }\n\n        if (!commandExistsSync('javac')) {\n            logInfo('Looks like you don\\'t have java installed. We\\'ll install it for you');\n            await this.installSoftware('shellcheck');\n            await this.addScoopBucket('java');\n            await this.installSoftware('ojdkbuild8');\n        }\n\n        return true;\n    }\n\n    async installSdksAndEmulator() {\n        logDebug('Accepting licenses');\n        await executeAsync({}, `${this.androidSdkLocation}/tools/bin/sdkmanager.bat --licenses`);\n        logDebug('Installing SDKs', this.sdksToInstall);\n        await executeAsync({}, `${this.androidSdkLocation}/tools/bin/sdkmanager.bat ${this.sdksToInstall}`);\n    }\n\n    async installTizenSdk() {\n        let downloadDir = setupConfig.tizen.downloadLocation.split('/');\n        downloadDir.pop();\n        downloadDir = downloadDir.join('/');\n        logInfo(`Opening ${downloadDir}. Please install the SDK then continue after it finished installing.`);\n        exec(`start \"\" \"${downloadDir}\"`);\n\n        const res = await inquirer.prompt({\n            type: 'input',\n            name: 'sdkPath',\n            message: \"Where did you install the SDK? (if you haven't changed the default just press enter)\",\n            default: 'C:\\\\tizen-studio',\n            validate(value) {\n                if (fs.existsSync(value)) return true;\n                return 'Path does not exist';\n            }\n        });\n\n        await inquirer.prompt({\n            type: 'confirm',\n            name: 'toolsInstalled',\n            message: 'Please open Package Manager and install: Tizen SDK Tools (Main SDK), TV Extensions-* (Extension SDK). Continue after you finished installing them.',\n            validate() {\n                return fs.existsSync(path.join(res.sdkPath, 'tools/ide/bin/tizen.bat')) || 'This does not look like a Tizen SDK path';\n            }\n        });\n\n        this.tizenSdkPath = res.sdkPath;\n    }\n\n    async installWebosSdk() {\n        const { downloadLink } = setupConfig.webos;\n        logInfo(`Opening ${downloadLink}. Please download and install the SDK then continue after it finished installing. Make sure you also install the CLI and Emulator components`);\n        exec(`${openCommand} ${downloadLink}`);\n        const res = await inquirer.prompt({\n            type: 'input',\n            name: 'sdkPath',\n            message: \"Where did you install the SDK? (if you haven't changed the default just press enter)\",\n            default: 'C:\\\\webOS_TV_SDK',\n            validate(value) {\n                if (fs.existsSync(value)) return true;\n                return 'Path does not exist';\n            }\n        });\n\n        await inquirer.prompt({\n            type: 'confirm',\n            name: 'toolsInstalled',\n            message: 'Are the CLI and Emulator components installed?',\n            validate() {\n                return fs.existsSync(path.join(res.sdkPath, 'tools/ide/bin/tizen.bat')) || 'This does not look like a Tizen SDK path';\n            }\n        });\n\n        this.webosSdkPath = res.sdkPath;\n    }\n}\n\nexport default LinuxPlatformSetup;\n"],"file":"windows.js"}