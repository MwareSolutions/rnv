{"version":3,"file":"config.js","names":["CLI_PROPS","Config","config","c","command","subCommand","program","args","rawArgs","argsCopy","missingArg","indexOf","undefined","length","filter","arg","dependency","version","type","skipInstall","currentPackage","files","project","package","existingPath","paths","writeFileSync","npmInstall","pkg","skipAsking","projectConfig","getProjectConfig","confirm","inquirerPrompt","message","resp","latestVersion","executeAsync","injectProjectDependency","currentVersion","updateAvailable","semver","lt","e","platform","npmDeps","rnv","platformTemplates","platforms","npm","promises","Object","keys","reduce","acc","forEach","dep","push","checkRequiredPackage","Promise","all","installed","some","i","configExists","key","global","fs","existsSync","cfg","require","GLOBAL_RNV_CONFIG","value","configSchema","buildConfig","default","localVal","getConfigValueSeparate","toString","globalVal","table","Key","keySchema","logWarning","values","includes","join","isConfigValueValid","configPath","resultCli","resultScheme","resultPlatforms","resultCommon","Array","isArray","val","defaultVal","logError","p","ps","runtime","scheme","buildSchemes","common","result","getValueOrMergedObject","logTask","chalk","grey","hosted","bundleAssets","getConfigProp","WEB_HOSTED_PLATFORMS","getMergedConfigValue","dir","Conf","rnvConfigHandler","rnvArguments","rows","k","listConfigValue","printTable","concat","setConfigValue"],"sources":["../src/config.js"],"sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require, valid-typeof */\nimport { printTable } from 'console-table-printer';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport { writeFileSync } from './systemTools/fileutils';\nimport { npmInstall, executeAsync } from './systemTools/exec';\nimport { logWarning, logTask, logError } from './systemTools/logger';\nimport { inquirerPrompt } from './systemTools/prompt';\nimport { configSchema, WEB_HOSTED_PLATFORMS } from './constants';\n\nexport const CLI_PROPS = [\n    'provisioningStyle',\n    'codeSignIdentity',\n    'provisionProfileSpecifier'\n];\n\nclass Config {\n    constructor() {\n        this.config = {};\n    }\n\n    // async initializeConfig(cmd, subCmd, program) {\n    //     this.config = await initializeBuilder(cmd, subCmd, process, program);\n    // }\n\n    initializeConfig(c) {\n        this.config = c;\n        return c;\n    }\n\n    getConfig() {\n        return this.config;\n    }\n\n    get command() {\n        return this.config.command;\n    }\n\n    get subCommand() {\n        return this.config.subCommand;\n    }\n\n    get rnvArguments() {\n        // commander is stupid https://github.com/tj/commander.js/issues/53\n        const { args, rawArgs } = this.config.program;\n        const argsCopy = [...args];\n        let missingArg = rawArgs[rawArgs.indexOf(argsCopy[1]) + 1];\n        if (missingArg?.[0] === '-') {\n            if (rawArgs[rawArgs.indexOf(argsCopy[1]) + 2]) {\n                missingArg = rawArgs[rawArgs.indexOf(argsCopy[1]) + 2];\n            } else {\n                missingArg = undefined;\n            }\n        }\n        if (rawArgs.length === 3) missingArg = undefined;\n        argsCopy[2] = missingArg;\n        return argsCopy.filter(arg => !!arg);\n    }\n\n    async injectProjectDependency(dependency, version, type, skipInstall = false) {\n        const currentPackage = this.config.files.project.package;\n        const existingPath = this.config.paths.project.package;\n        if (!currentPackage[type]) currentPackage[type] = {};\n        currentPackage[type][dependency] = version;\n        writeFileSync(existingPath, currentPackage);\n        if (!skipInstall) await npmInstall();\n        return true;\n    }\n\n    getProjectConfig() {\n        return this.config.files.project;\n    }\n\n    async checkRequiredPackage(pkg, version = false, type, skipAsking = false, skipInstall = false) {\n        if (!pkg) return false;\n        const projectConfig = this.getProjectConfig();\n\n        if (!projectConfig.package[type]?.[pkg]) {\n            // package does not exist, adding it\n            let confirm = skipAsking;\n            if (!confirm) {\n                const resp = await inquirerPrompt({\n                    type: 'confirm',\n                    message: `You do not have ${pkg} installed. Do you want to add it now?`\n                });\n                // eslint-disable-next-line prefer-destructuring\n                confirm = resp.confirm;\n            }\n\n            if (confirm) {\n                let latestVersion = 'latest';\n                if (!version) {\n                    try {\n                        latestVersion = await executeAsync(`npm show ${pkg} version`);\n                        // eslint-disable-next-line no-empty\n                    } catch (e) {}\n                }\n                return this.injectProjectDependency(pkg, version || latestVersion, type, skipInstall);\n            }\n        } else if (!version) {\n            // package exists, checking version only if version is not\n            const currentVersion = projectConfig.package[type][pkg];\n            let latestVersion = false;\n            try {\n                latestVersion = await executeAsync(`npm show ${pkg} version`);\n                // eslint-disable-next-line no-empty\n            } catch (e) {}\n            if (latestVersion) {\n                let updateAvailable = false;\n\n                try {\n                    // semver might fail if you have a path instead of a version (like when you are developing)\n                    updateAvailable = semver.lt(currentVersion, latestVersion);\n                    // eslint-disable-next-line no-empty\n                } catch (e) {}\n\n                if (updateAvailable) {\n                    let confirm = skipAsking;\n                    if (!confirm) {\n                        const resp = await inquirerPrompt({\n                            type: 'confirm',\n                            message: `Seems like ${pkg}@${currentVersion} is installed while there is a newer version, ${pkg}@${latestVersion}. Do you want to upgrade?`\n                        });\n                        // eslint-disable-next-line prefer-destructuring\n                        confirm = resp.confirm;\n                    }\n\n                    if (confirm) {\n                        return this.injectProjectDependency(pkg, latestVersion, type, skipInstall);\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    async injectPlatformDependencies(platform) {\n        const npmDeps = this.config.files?.rnv?.platformTemplates?.config?.platforms?.[platform]?.npm;\n\n        if (npmDeps) {\n            const promises = Object.keys(npmDeps).reduce((acc, type) => { // iterate over dependencies, devDepencencies or optionalDependencies\n                Object.keys(npmDeps[type]).forEach((dep) => { // iterate over deps\n                    acc.push(this.checkRequiredPackage(dep, npmDeps[type][dep], type, true, true));\n                });\n                return acc;\n            }, []);\n\n            const installed = await Promise.all(promises);\n\n            if (installed.some(i => i === true)) { // do npm i only if something new is added\n                await npmInstall();\n            }\n        }\n\n        // add other deps that are not npm\n    }\n\n    get platform() {\n        return this.config.platform;\n    }\n\n    get isRenativeProject() {\n        return this.config?.paths?.project?.configExists || false;\n    }\n\n    get program() {\n        return this.config.program;\n    }\n\n    get paths() {\n        return this.config.paths;\n    }\n\n    // RNV CONFIG\n    getConfigValueSeparate(key, global = false) {\n        const { paths } = this.config;\n\n        if (!global && !fs.existsSync(paths.project.config)) return 'N/A'; // string because there might be a setting where we will use null\n        const cfg = global ? require(paths.GLOBAL_RNV_CONFIG) : require(paths.project.config);\n\n        const value = cfg[configSchema[key].key];\n        if (value === undefined) return 'N/A';\n\n        return value;\n    }\n\n    getMergedConfigValue(key) {\n        let value = this.config.buildConfig?.[configSchema[key].key];\n        if (value === undefined && configSchema[key].default) value = configSchema[key].default;\n        return value;\n    }\n\n    listConfigValue(key) {\n        let localVal = this.getConfigValueSeparate(key).toString();\n        let globalVal = this.getConfigValueSeparate(key, true).toString();\n\n        if (globalVal === 'N/A' && configSchema[key].default) globalVal = configSchema[key].default;\n        if (localVal === 'N/A') localVal = globalVal;\n\n        const table = [{\n            Key: key,\n            'Global Value': globalVal\n        }];\n\n\n        if (localVal !== 'N/A') {\n            table[0]['Project Value'] = localVal;\n        }\n\n        return table;\n    }\n\n    isConfigValueValid(key, value) {\n        const keySchema = configSchema[key];\n        if (!keySchema) {\n            logWarning(`Unknown config param ${key}`);\n            return false;\n        }\n\n        if (keySchema.values && !keySchema.values.includes(value)) {\n            logWarning(`Unsupported value provided for ${key}. Correct values are ${keySchema.values.join(', ')}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    setConfigValue(key, value) {\n        const { program: { global }, paths } = this.config;\n\n        if (this.isConfigValueValid(key, value)) {\n            const configPath = global ? paths.GLOBAL_RNV_CONFIG : paths.project.config;\n            const config = require(configPath);\n\n            if (['true', 'false'].includes(value)) value = value === 'true'; // convert string to bool if it matches a bool value\n\n            config[configSchema[key].key] = value;\n            writeFileSync(configPath, config);\n            return true;\n        }\n        return false;\n    }\n\n    getValueOrMergedObject(resultCli, resultScheme, resultPlatforms, resultCommon) {\n        if (resultCli !== undefined) {\n            return resultCli;\n        }\n        if (resultScheme !== undefined) {\n            if (Array.isArray(resultScheme) || typeof resultScheme !== 'object') return resultScheme;\n            const val = Object.assign(resultCommon || {}, resultPlatforms || {}, resultScheme);\n            return val;\n        }\n        if (resultPlatforms !== undefined) {\n            if (Array.isArray(resultPlatforms) || typeof resultPlatforms !== 'object') return resultPlatforms;\n            return Object.assign(resultCommon || {}, resultPlatforms);\n        }\n        if (resultPlatforms === null) return null;\n        return resultCommon;\n    }\n\n\n    getConfigProp(c, platform, key, defaultVal) {\n        if (!c.buildConfig) {\n            logError('getConfigProp: c.buildConfig is undefined!');\n            return null;\n        }\n        const p = c.buildConfig.platforms[platform];\n        const ps = c.runtime.scheme;\n        let resultPlatforms;\n        let scheme;\n        if (p) {\n            scheme = p.buildSchemes ? p.buildSchemes[ps] : undefined;\n            resultPlatforms = c.buildConfig.platforms[platform][key];\n        }\n\n        scheme = scheme || {};\n        const resultCli = CLI_PROPS.includes(key) ? c.program[key] : undefined;\n        const resultScheme = scheme[key];\n        const resultCommon = c.buildConfig.common?.[key];\n\n        let result = this.getValueOrMergedObject(resultCli, resultScheme, resultPlatforms, resultCommon);\n\n        if (result === undefined) result = defaultVal; // default the value only if it's not specified in any of the files. i.e. undefined\n        logTask(`getConfigProp:${platform}:${key}:${result}`, chalk.grey);\n        return result;\n    }\n\n    get isWebHostEnabled() {\n        const { hosted } = this.config.program;\n        // if (debug) return false;\n        const bundleAssets = this.getConfigProp(this.config, this.platform, 'bundleAssets');\n        return (hosted || !bundleAssets) && WEB_HOSTED_PLATFORMS.includes(this.platform);\n    }\n\n    get isAnalyticsEnabled() {\n        return this.getMergedConfigValue('analytics');\n    }\n\n    get projectPath() {\n        return this.config.paths.project.dir;\n    }\n\n    //     getBuildConfig() {\n    //         return this.config.buildConfig;\n    //     }\n\n    //     updateLocalConfig() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     updateGlobalonfig() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     updateCLIPath() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     getPath(path) { // getPath(RNV_PLUGINTEMPLATES_DIR) / PROJECT_BUILDS_DIR...\n    //         return this.config.paths[path];\n    //     }\n\n    //     get getInfo() {\n    //         return this.c.program.info;\n    //     }\n\n    //     get platform() {\n    //         return this.config.program.platform;\n    //     }\n\n    //     get mono() {\n    //         return this.config.program.mono;\n    //     }\n\n    //     get target() {}\n\n//     set target(newTarget) {\n//         this.config.target = newTarget;\n//         this.initializeConfig();\n//     }\n}\n\nconst Conf = new Config();\n// excluded from Config because for some reason passing this function to RNV as a handler makes it lose it's context\nconst rnvConfigHandler = () => {\n    const [, key, value] = Conf.rnvArguments; // first arg is config so it's useless\n    if (key === 'list') {\n        const rows = [];\n        Object.keys(configSchema).forEach(k => rows.push(Conf.listConfigValue(k)));\n\n        printTable([].concat(...rows));\n        return true;\n    }\n\n    // validate args\n    if (!key) { // @todo add inquirer with list of options\n        logWarning('Please specify a config');\n        return true;\n    }\n    if (!configSchema[key]) {\n        logWarning(`Unknown config ${key}`);\n        return true;\n    }\n\n    if (!value) {\n        // list the value\n        printTable(Conf.listConfigValue(key));\n    } else if (Conf.setConfigValue(key, value)) printTable(Conf.listConfigValue(key));\n\n    return true;\n};\n\nexport default Conf;\nexport { rnvConfigHandler };\n"],"mappings":"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"}