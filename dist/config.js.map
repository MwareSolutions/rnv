{"version":3,"sources":["../src/config.js"],"names":["CLI_PROPS","Config","config","c","command","subCommand","program","args","rawArgs","argsCopy","missingArg","indexOf","undefined","length","filter","arg","dependency","version","type","skipInstall","currentPackage","files","project","package","existingPath","paths","pkg","skipAsking","projectConfig","getProjectConfig","confirm","message","resp","latestVersion","injectProjectDependency","currentVersion","updateAvailable","semver","lt","e","platform","npmDeps","rnv","platformTemplates","platforms","npm","promises","Object","keys","reduce","acc","forEach","dep","push","checkRequiredPackage","Promise","all","installed","some","i","configExists","key","global","fs","existsSync","cfg","require","GLOBAL_RNV_CONFIG","value","configSchema","buildConfig","default","localVal","getConfigValueSeparate","toString","globalVal","table","Key","keySchema","values","includes","join","isConfigValueValid","configPath","resultCli","resultScheme","resultPlatforms","resultCommon","Array","isArray","val","defaultVal","p","ps","runtime","scheme","buildSchemes","common","result","getValueOrMergedObject","chalk","grey","hosted","bundleAssets","getConfigProp","WEB_HOSTED_PLATFORMS","getMergedConfigValue","dir","Conf","rnvConfigHandler","rnvArguments","rows","k","listConfigValue","concat","setConfigValue"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require, valid-typeof */\nimport { printTable } from 'console-table-printer';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport { writeFileSync } from './systemTools/fileutils';\nimport { npmInstall, executeAsync } from './systemTools/exec';\nimport { logWarning, logTask, logError } from './systemTools/logger';\nimport { inquirerPrompt } from './systemTools/prompt';\nimport { configSchema, WEB_HOSTED_PLATFORMS } from './constants';\n\nexport const CLI_PROPS = [\n    'provisioningStyle',\n    'codeSignIdentity',\n    'provisionProfileSpecifier'\n];\n\nclass Config {\n    constructor() {\n        this.config = {};\n    }\n\n    // async initializeConfig(cmd, subCmd, program) {\n    //     this.config = await initializeBuilder(cmd, subCmd, process, program);\n    // }\n\n    initializeConfig(c) {\n        this.config = c;\n        return c;\n    }\n\n    getConfig() {\n        return this.config;\n    }\n\n    get command() {\n        return this.config.command;\n    }\n\n    get subCommand() {\n        return this.config.subCommand;\n    }\n\n    get rnvArguments() {\n        // commander is stupid https://github.com/tj/commander.js/issues/53\n        const { args, rawArgs } = this.config.program;\n        const argsCopy = [...args];\n        let missingArg = rawArgs[rawArgs.indexOf(argsCopy[1]) + 1];\n        if (missingArg?.[0] === '-') {\n            if (rawArgs[rawArgs.indexOf(argsCopy[1]) + 2]) {\n                missingArg = rawArgs[rawArgs.indexOf(argsCopy[1]) + 2];\n            } else {\n                missingArg = undefined;\n            }\n        }\n        if (rawArgs.length === 3) missingArg = undefined;\n        argsCopy[2] = missingArg;\n        return argsCopy.filter(arg => !!arg);\n    }\n\n    async injectProjectDependency(dependency, version, type, skipInstall = false) {\n        const currentPackage = this.config.files.project.package;\n        const existingPath = this.config.paths.project.package;\n        if (!currentPackage[type]) currentPackage[type] = {};\n        currentPackage[type][dependency] = version;\n        writeFileSync(existingPath, currentPackage);\n        if (!skipInstall) await npmInstall();\n        return true;\n    }\n\n    getProjectConfig() {\n        return this.config.files.project;\n    }\n\n    async checkRequiredPackage(pkg, version = false, type, skipAsking = false, skipInstall = false) {\n        if (!pkg) return false;\n        const projectConfig = this.getProjectConfig();\n\n        if (!projectConfig.package[type]?.[pkg]) {\n            // package does not exist, adding it\n            let confirm = skipAsking;\n            if (!confirm) {\n                const resp = await inquirerPrompt({\n                    type: 'confirm',\n                    message: `You do not have ${pkg} installed. Do you want to add it now?`\n                });\n                // eslint-disable-next-line prefer-destructuring\n                confirm = resp.confirm;\n            }\n\n            if (confirm) {\n                let latestVersion = 'latest';\n                if (!version) {\n                    try {\n                        latestVersion = await executeAsync(`npm show ${pkg} version`);\n                        // eslint-disable-next-line no-empty\n                    } catch (e) {}\n                }\n                return this.injectProjectDependency(pkg, version || latestVersion, type, skipInstall);\n            }\n        } else if (!version) {\n            // package exists, checking version only if version is not\n            const currentVersion = projectConfig.package[type][pkg];\n            let latestVersion = false;\n            try {\n                latestVersion = await executeAsync(`npm show ${pkg} version`);\n                // eslint-disable-next-line no-empty\n            } catch (e) {}\n            if (latestVersion) {\n                let updateAvailable = false;\n\n                try {\n                    // semver might fail if you have a path instead of a version (like when you are developing)\n                    updateAvailable = semver.lt(currentVersion, latestVersion);\n                    // eslint-disable-next-line no-empty\n                } catch (e) {}\n\n                if (updateAvailable) {\n                    let confirm = skipAsking;\n                    if (!confirm) {\n                        const resp = await inquirerPrompt({\n                            type: 'confirm',\n                            message: `Seems like ${pkg}@${currentVersion} is installed while there is a newer version, ${pkg}@${latestVersion}. Do you want to upgrade?`\n                        });\n                        // eslint-disable-next-line prefer-destructuring\n                        confirm = resp.confirm;\n                    }\n\n                    if (confirm) {\n                        return this.injectProjectDependency(pkg, latestVersion, type, skipInstall);\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    async injectPlatformDependencies(platform) {\n        const npmDeps = this.config.files?.rnv?.platformTemplates?.config?.platforms?.[platform]?.npm;\n\n        if (npmDeps) {\n            const promises = Object.keys(npmDeps).reduce((acc, type) => { // iterate over dependencies, devDepencencies or optionalDependencies\n                Object.keys(npmDeps[type]).forEach((dep) => { // iterate over deps\n                    acc.push(this.checkRequiredPackage(dep, npmDeps[type][dep], type, true, true));\n                });\n                return acc;\n            }, []);\n\n            const installed = await Promise.all(promises);\n\n            if (installed.some(i => i === true)) { // do npm i only if something new is added\n                await npmInstall();\n            }\n        }\n\n        // add other deps that are not npm\n    }\n\n    get platform() {\n        return this.config.platform;\n    }\n\n    get isRenativeProject() {\n        return this.config?.paths?.project?.configExists || false;\n    }\n\n    get program() {\n        return this.config.program;\n    }\n\n    get paths() {\n        return this.config.paths;\n    }\n\n    // RNV CONFIG\n    getConfigValueSeparate(key, global = false) {\n        const { paths } = this.config;\n\n        if (!global && !fs.existsSync(paths.project.config)) return 'N/A'; // string because there might be a setting where we will use null\n        const cfg = global ? require(paths.GLOBAL_RNV_CONFIG) : require(paths.project.config);\n\n        const value = cfg[configSchema[key].key];\n        if (value === undefined) return 'N/A';\n\n        return value;\n    }\n\n    getMergedConfigValue(key) {\n        let value = this.config.buildConfig?.[configSchema[key].key];\n        if (value === undefined && configSchema[key].default) value = configSchema[key].default;\n        return value;\n    }\n\n    listConfigValue(key) {\n        let localVal = this.getConfigValueSeparate(key).toString();\n        let globalVal = this.getConfigValueSeparate(key, true).toString();\n\n        if (globalVal === 'N/A' && configSchema[key].default) globalVal = configSchema[key].default;\n        if (localVal === 'N/A') localVal = globalVal;\n\n        const table = [{\n            Key: key,\n            'Global Value': globalVal\n        }];\n\n\n        if (localVal !== 'N/A') {\n            table[0]['Project Value'] = localVal;\n        }\n\n        return table;\n    }\n\n    isConfigValueValid(key, value) {\n        const keySchema = configSchema[key];\n        if (!keySchema) {\n            logWarning(`Unknown config param ${key}`);\n            return false;\n        }\n\n        if (keySchema.values && !keySchema.values.includes(value)) {\n            logWarning(`Unsupported value provided for ${key}. Correct values are ${keySchema.values.join(', ')}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    setConfigValue(key, value) {\n        const { program: { global }, paths } = this.config;\n\n        if (this.isConfigValueValid(key, value)) {\n            const configPath = global ? paths.GLOBAL_RNV_CONFIG : paths.project.config;\n            const config = require(configPath);\n\n            if (['true', 'false'].includes(value)) value = value === 'true'; // convert string to bool if it matches a bool value\n\n            config[configSchema[key].key] = value;\n            writeFileSync(configPath, config);\n            return true;\n        }\n        return false;\n    }\n\n    getValueOrMergedObject(resultCli, resultScheme, resultPlatforms, resultCommon) {\n        if (resultCli !== undefined) {\n            return resultCli;\n        }\n        if (resultScheme !== undefined) {\n            if (Array.isArray(resultScheme) || typeof resultScheme !== 'object') return resultScheme;\n            const val = Object.assign(resultCommon || {}, resultPlatforms || {}, resultScheme);\n            return val;\n        }\n        if (resultPlatforms !== undefined) {\n            if (Array.isArray(resultPlatforms) || typeof resultPlatforms !== 'object') return resultPlatforms;\n            return Object.assign(resultCommon || {}, resultPlatforms);\n        }\n        if (resultPlatforms === null) return null;\n        return resultCommon;\n    }\n\n\n    getConfigProp(c, platform, key, defaultVal) {\n        if (!c.buildConfig) {\n            logError('getConfigProp: c.buildConfig is undefined!');\n            return null;\n        }\n        const p = c.buildConfig.platforms[platform];\n        const ps = c.runtime.scheme;\n        let resultPlatforms;\n        let scheme;\n        if (p) {\n            scheme = p.buildSchemes ? p.buildSchemes[ps] : undefined;\n            resultPlatforms = c.buildConfig.platforms[platform][key];\n        }\n\n        scheme = scheme || {};\n        const resultCli = CLI_PROPS.includes(key) ? c.program[key] : undefined;\n        const resultScheme = scheme[key];\n        const resultCommon = c.buildConfig.common?.[key];\n\n        let result = this.getValueOrMergedObject(resultCli, resultScheme, resultPlatforms, resultCommon);\n\n        if (result === undefined) result = defaultVal; // default the value only if it's not specified in any of the files. i.e. undefined\n        logTask(`getConfigProp:${platform}:${key}:${result}`, chalk.grey);\n        return result;\n    }\n\n    get isWebHostEnabled() {\n        const { hosted } = this.config.program;\n        // if (debug) return false;\n        const bundleAssets = this.getConfigProp(this.config, this.platform, 'bundleAssets');\n        return (hosted || !bundleAssets) && WEB_HOSTED_PLATFORMS.includes(this.platform);\n    }\n\n    get isAnalyticsEnabled() {\n        return this.getMergedConfigValue('analytics');\n    }\n\n    get projectPath() {\n        return this.config.paths.project.dir;\n    }\n\n    //     getBuildConfig() {\n    //         return this.config.buildConfig;\n    //     }\n\n    //     updateLocalConfig() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     updateGlobalonfig() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     updateCLIPath() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     getPath(path) { // getPath(RNV_PLUGINTEMPLATES_DIR) / PROJECT_BUILDS_DIR...\n    //         return this.config.paths[path];\n    //     }\n\n    //     get getInfo() {\n    //         return this.c.program.info;\n    //     }\n\n    //     get platform() {\n    //         return this.config.program.platform;\n    //     }\n\n    //     get mono() {\n    //         return this.config.program.mono;\n    //     }\n\n    //     get target() {}\n\n//     set target(newTarget) {\n//         this.config.target = newTarget;\n//         this.initializeConfig();\n//     }\n}\n\nconst Conf = new Config();\n// excluded from Config because for some reason passing this function to RNV as a handler makes it lose it's context\nconst rnvConfigHandler = () => {\n    const [, key, value] = Conf.rnvArguments; // first arg is config so it's useless\n    if (key === 'list') {\n        const rows = [];\n        Object.keys(configSchema).forEach(k => rows.push(Conf.listConfigValue(k)));\n\n        printTable([].concat(...rows));\n        return true;\n    }\n\n    // validate args\n    if (!key) { // @todo add inquirer with list of options\n        logWarning('Please specify a config');\n        return true;\n    }\n    if (!configSchema[key]) {\n        logWarning(`Unknown config ${key}`);\n        return true;\n    }\n\n    if (!value) {\n        // list the value\n        printTable(Conf.listConfigValue(key));\n    } else if (Conf.setConfigValue(key, value)) printTable(Conf.listConfigValue(key));\n\n    return true;\n};\n\nexport default Conf;\nexport { rnvConfigHandler };\n"],"file":"config.js"}