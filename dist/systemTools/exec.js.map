{"version":3,"sources":["../../src/systemTools/exec.js"],"names":["require","exec","execSync","_execute","c","command","opts","defaultOpts","stdio","localDir","path","resolve","preferLocal","all","maxErrorLength","program","mono","interactive","silent","shell","mergedOpts","cleanCommand","interval","intervalTimer","timer","privateMask","Array","isArray","join","logMessage","privateParams","ignoreErrors","spinner","text","start","setInterval","console","log","child","rawCommand","args","execa","MAX_OUTPUT_LENGTH","printLastLine","buffer","Buffer","from","toString","trim","lastLine","split","pop","substring","length","info","stdout","pipe","process","on","then","res","off","succeed","clearInterval","catch","err","fail","errMessage","parseErrorMessage","stderr","message","Promise","reject","execCLI","cli","p","fs","existsSync","chalk","white","paths","globalConfigPath","executeAsync","cmd","Config","getConfig","includes","platform","replace","executeTelnet","port","nc2","NClient","output","addr","runtime","localhost","parseInt","connect","send","data","resp","close","toSearch","arr","errFound","filter","v","search","map","str","extractedError","isUsingWindows","fileNotExists","commandName","callback","constants","F_OK","fileNotExistsSync","e","localExecutable","X_OK","localExecutableSync","commandExistsUnix","cleanedCommandName","isFile","error","commandExistsWindows","test","commandExistsUnixSync","commandExistsWindowsSync","cleanInput","s","isPathName","dirname","basename","commandExists","commandExistsSync","cleanNodeModules","project","nodeModulesDir","rnv","npmInstall","failOnError","f","openCommand"],"mappings":"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","sourcesContent":["// /* eslint-disable import/no-cycle */\nimport path from 'path';\nimport fs, { access, accessSync, constants } from 'fs';\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport ora from 'ora';\nimport NClient from 'netcat/client';\nimport Config from '../config';\n\nimport { logDebug, logTask, logError, logWarning } from './logger';\nimport { removeDirs, invalidatePodsChecksum } from './fileutils';\nimport { replaceOverridesInString } from '../utils';\n\nconst { exec, execSync } = require('child_process');\n\n/**\n *\n * Also accepts the Node's child_process exec/spawn options\n *\n * @typedef {Object} Opts\n * @property {Object} privateParams - private params that will be masked in the logs\n * @property {Boolean} silent - don't print anything\n * @property {Boolean} ignoreErrors - will print the loader but it will finish with a\n * checkmark regardless of the outcome. Also, it never throws a catch.\n * @property {Boolean} interactive - when you want to execute a command that requires user input\n *\n * Execute commands\n *\n * @param {String} command - command to be executed\n * @param {Opts} [opts={}] - the options for the command\n * @returns {Promise}\n *\n */\nconst _execute = (c, command, opts = {}) => {\n    const defaultOpts = {\n        stdio: 'pipe',\n        localDir: path.resolve('./node_modules/.bin'),\n        preferLocal: true,\n        all: true,\n        maxErrorLength: c.program?.maxErrorLength,\n        mono: c.program?.mono,\n    };\n\n    if (opts.interactive) {\n        defaultOpts.silent = true;\n        defaultOpts.stdio = 'inherit';\n        defaultOpts.shell = true;\n    }\n\n    const mergedOpts = { ...defaultOpts, ...opts };\n\n    let cleanCommand = command;\n    let interval;\n    const intervalTimer = 30000; // 30s\n    let timer = intervalTimer;\n    const privateMask = '*******';\n\n    if (Array.isArray(command)) cleanCommand = command.join(' ');\n\n    let logMessage = cleanCommand;\n    const { privateParams } = mergedOpts;\n    if (privateParams && Array.isArray(privateParams)) {\n        logMessage = replaceOverridesInString(command, privateParams, privateMask);\n    }\n\n    logDebug(`_execute: ${logMessage}`);\n    const { silent, mono, maxErrorLength, ignoreErrors } = mergedOpts;\n    const spinner = !silent && !mono && ora({ text: `Executing: ${logMessage}` }).start();\n\n    if (mono) {\n        interval = setInterval(() => {\n            console.log(`Executing: ${logMessage} - ${timer / 1000}s`);\n            timer += intervalTimer;\n        }, intervalTimer);\n    }\n    let child;\n    if (opts.rawCommand) {\n        const { args } = opts.rawCommand;\n        child = execa(command, args, mergedOpts);\n    } else {\n        child = execa.command(cleanCommand, mergedOpts);\n    }\n\n    const MAX_OUTPUT_LENGTH = 200;\n\n    const printLastLine = (buffer) => {\n        const text = Buffer.from(buffer).toString().trim();\n        const lastLine = text.split('\\n').pop();\n        spinner.text = replaceOverridesInString(lastLine.substring(0, MAX_OUTPUT_LENGTH), privateParams, privateMask);\n        if (lastLine.length === MAX_OUTPUT_LENGTH) spinner.text += '...\\n';\n    };\n\n    if (c.program?.info) {\n        child?.stdout?.pipe(process.stdout);\n    } else if (spinner) {\n        child?.stdout?.on('data', printLastLine);\n    }\n\n    return child.then((res) => {\n        spinner && child?.stdout?.off('data', printLastLine);\n        !silent && !mono && spinner.succeed(`Executing: ${logMessage}`);\n        logDebug(replaceOverridesInString(res.all, privateParams, privateMask));\n        interval && clearInterval(interval);\n        // logDebug(res);\n        return res.stdout;\n    }).catch((err) => {\n        spinner && child?.stdout?.off('data', printLastLine);\n        if (!silent && !mono && !ignoreErrors) spinner.fail(`FAILED: ${logMessage}`); // parseErrorMessage will return false if nothing is found, default to previous implementation\n\n        logDebug(replaceOverridesInString(err.all, privateParams, privateMask));\n        interval && clearInterval(interval);\n        // logDebug(err);\n        if (ignoreErrors && !silent && !mono) {\n            spinner.succeed(`Executing: ${logMessage}`);\n            return true;\n        }\n        let errMessage = parseErrorMessage(err.all, maxErrorLength) || err.stderr || err.message;\n        errMessage = replaceOverridesInString(errMessage, privateParams, privateMask);\n        return Promise.reject(`COMMAND: \\n\\n${logMessage} \\n\\nFAILED with ERROR: \\n\\n${errMessage}`); // parseErrorMessage will return false if nothing is found, default to previous implementation\n    });\n};\n\n/**\n *\n * Execute CLI command\n *\n * @param {Object} c - the trusty old c object\n * @param {String} cli - the cli to be executed\n * @param {String} command - the command to be executed\n * @param {Opts} [opts={}] - the options for the command\n * @returns {Promise}\n *\n */\nconst execCLI = (c, cli, command, opts = {}) => {\n    if (!c.program) return Promise.reject('You need to pass c object as first parameter to execCLI()');\n    const p = c.cli[cli];\n\n    if (!fs.existsSync(p)) {\n        logDebug('execCLI error', cli, command);\n        return Promise.reject(`Location of your cli ${chalk.white(p)} does not exists. check your ${chalk.white(\n            c.paths.globalConfigPath\n        )} file if you SDK path is correct`);\n    }\n\n    return _execute(c, `${p} ${command}`, { ...opts, shell: true });\n};\n\n/**\n *\n * Execute a plain command\n *\n * @param {String} command - the command to be executed\n * @param {Opts} [opts={}] - the options for the command\n * @returns {Promise}\n *\n */\nconst executeAsync = (c, cmd, opts) => {\n    // swap values if c is not specified and get it from it's rightful place, config :)\n    if (typeof c === 'string') {\n        opts = cmd;\n        cmd = c;\n        c = Config.getConfig();\n    }\n    if (cmd.includes('npm') && process.platform === 'win32') cmd.replace('npm', 'npm.cmd');\n    return _execute(c, cmd, opts);\n};\n\n/**\n *\n * Connect to a local telnet server and execute a command\n *\n * @param {Number|String} port - where do you want me to connect to?\n * @param {String} command - the command to be executed once I'm connected\n * @returns {Promise}\n *\n */\nconst executeTelnet = (c, port, command) => new Promise((resolve) => {\n    const nc2 = new NClient();\n    logDebug(`execTelnet: ${port} ${command}`);\n\n    let output = '';\n\n    nc2.addr(c.runtime.localhost)\n        .port(parseInt(port, 10))\n        .connect()\n        .send(`${command}\\n`);\n    nc2.on('data', (data) => {\n        const resp = Buffer.from(data).toString();\n        output += resp;\n        if (output.includes('OK')) nc2.close();\n    });\n    nc2.on('close', () => resolve(output));\n});\n\n// Legacy error parser\n// export const parseErrorMessage = (text, maxErrorLength = 800) => {\n//     const errors = [];\n//     const toSearch = /(exception|error|fatal|\\[!])/i;\n//\n//     const extractError = (t) => {\n//         const errorFound = t ? t.search(toSearch) : -1;\n//         if (errorFound === -1) return errors.length ? errors.join(' ') : false; // return the errors or false if we found nothing at all\n//         const usefulString = t.substring(errorFound); // dump first part of the string that doesn't contain what we look for\n//         let extractedError = usefulString.substring(0, maxErrorLength);\n//         if (extractedError.length === maxErrorLength) extractedError += '...'; // add elipsis if string is bigger than maxErrorLength\n//         errors.push(extractedError); // save the error\n//         const newString = usefulString.substring(100); // dump everything we processed and continue\n//         return extractError(newString);\n//     };\n//\n//     return extractError(text);\n// };\n\nexport const parseErrorMessage = (text, maxErrorLength = 800) => {\n    if (!text) return '';\n    const toSearch = /(exception|error|fatal|\\[!])/i;\n    let arr = text.split('\\n');\n\n    let errFound = 0;\n    arr = arr.filter((v) => {\n        if (v === '') return false;\n        // Cleaner iOS reporting\n        if (v.includes('-Werror')) {\n            return false;\n        }\n        // Cleaner Android reporting\n        if (v.includes('[DEBUG]') || v.includes('[INFO]') || v.includes('[LIFECYCLE]') || v.includes('[WARN]') || v.includes(':+HeapDumpOnOutOfMemoryError') || v.includes('.errors.') || v.includes('-exception-') || v.includes('error_prone_annotations')) {\n            return false;\n        }\n        if (v.search(toSearch) !== -1) {\n            errFound = 5;\n            return true;\n        }\n        if (errFound > 0) {\n            errFound -= 1;\n            return true;\n        }\n        return false;\n    });\n\n    arr = arr.map((str) => {\n        const v = str.replace(/\\s{2,}/g, ' ');\n        let extractedError = v.substring(0, maxErrorLength);\n        if (extractedError.length === maxErrorLength) extractedError += '...';\n        return extractedError;\n    });\n\n    return arr.join('\\n');\n};\n\n\nconst isUsingWindows = process.platform === 'win32';\n\nconst fileNotExists = (commandName, callback) => {\n    access(commandName, constants.F_OK,\n        (err) => {\n            callback(!err);\n        });\n};\n\nconst fileNotExistsSync = (commandName) => {\n    try {\n        accessSync(commandName, constants.F_OK);\n        return false;\n    } catch (e) {\n        return true;\n    }\n};\n\nconst localExecutable = (commandName, callback) => {\n    access(commandName, constants.F_OK | constants.X_OK,\n        (err) => {\n            callback(null, !err);\n        });\n};\n\nconst localExecutableSync = (commandName) => {\n    try {\n        accessSync(commandName, constants.F_OK | constants.X_OK);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst commandExistsUnix = (commandName, cleanedCommandName, callback) => {\n    fileNotExists(commandName, (isFile) => {\n        if (!isFile) {\n            exec(`command -v ${cleanedCommandName\n            } 2>/dev/null`\n                  + ` && { echo >&1 ${cleanedCommandName}; exit 0; }`,\n            (error, stdout) => {\n                callback(null, !!stdout);\n            });\n            return;\n        }\n\n        localExecutable(commandName, callback);\n    });\n};\n\nconst commandExistsWindows = (commandName, cleanedCommandName, callback) => {\n    if (/[\\x00-\\x1f<>:\"\\|\\?\\*]/.test(commandName)) {\n        callback(null, false);\n        return;\n    }\n    exec(`where ${cleanedCommandName}`,\n        (error) => {\n            if (error !== null) {\n                callback(null, false);\n            } else {\n                callback(null, true);\n            }\n        });\n};\n\nconst commandExistsUnixSync = (commandName, cleanedCommandName) => {\n    if (fileNotExistsSync(commandName)) {\n        try {\n            const stdout = execSync(`command -v ${cleanedCommandName\n            } 2>/dev/null`\n              + ` && { echo >&1 ${cleanedCommandName}; exit 0; }`);\n            return !!stdout;\n        } catch (error) {\n            return false;\n        }\n    }\n    return localExecutableSync(commandName);\n};\n\nconst commandExistsWindowsSync = (commandName, cleanedCommandName) => {\n    if (/[\\x00-\\x1f<>:\"\\|\\?\\*]/.test(commandName)) {\n        return false;\n    }\n    try {\n        const stdout = execSync(`where ${cleanedCommandName}`, { stdio: [] });\n        return !!stdout;\n    } catch (error) {\n        return false;\n    }\n};\n\nlet cleanInput = (s) => {\n    if (/[^A-Za-z0-9_\\/:=-]/.test(s)) {\n        s = `'${s.replace(/'/g, \"'\\\\''\")}'`;\n        s = s.replace(/^(?:'')+/g, '') // unduplicate single-quote at the beginning\n            .replace(/\\\\'''/g, \"\\\\'\"); // remove non-escaped single-quote if there are enclosed between 2 escaped\n    }\n    return s;\n};\n\nif (isUsingWindows) {\n    cleanInput = (s) => {\n        const isPathName = /[\\\\]/.test(s);\n        if (isPathName) {\n            const dirname = `\"${path.dirname(s)}\"`;\n            const basename = `\"${path.basename(s)}\"`;\n            return `${dirname}:${basename}`;\n        }\n        return `\"${s}\"`;\n    };\n}\n\nconst commandExists = (commandName, callback) => {\n    const cleanedCommandName = cleanInput(commandName);\n    if (!callback && typeof Promise !== 'undefined') {\n        return new Promise(((resolve, reject) => {\n            commandExists(commandName, (error, output) => {\n                if (output) {\n                    resolve(commandName);\n                } else {\n                    reject(error);\n                }\n            });\n        }));\n    }\n    if (isUsingWindows) {\n        commandExistsWindows(commandName, cleanedCommandName, callback);\n    } else {\n        commandExistsUnix(commandName, cleanedCommandName, callback);\n    }\n};\n\nconst commandExistsSync = (commandName) => {\n    const cleanedCommandName = cleanInput(commandName);\n    if (isUsingWindows) {\n        return commandExistsWindowsSync(commandName, cleanedCommandName);\n    }\n    return commandExistsUnixSync(commandName, cleanedCommandName);\n};\n\nexport const cleanNodeModules = c => new Promise((resolve, reject) => {\n    logTask(`cleanNodeModules:${c.paths.project.nodeModulesDir}`);\n    removeDirs([\n        path.join(c.paths.project.nodeModulesDir, 'react-native-safe-area-view/.git'),\n        path.join(c.paths.project.nodeModulesDir, '@react-navigation/native/node_modules/react-native-safe-area-view/.git'),\n        path.join(c.paths.project.nodeModulesDir, 'react-navigation/node_modules/react-native-safe-area-view/.git'),\n        path.join(c.paths.rnv.nodeModulesDir, 'react-native-safe-area-view/.git'),\n        path.join(c.paths.rnv.nodeModulesDir, '@react-navigation/native/node_modules/react-native-safe-area-view/.git'),\n        path.join(c.paths.rnv.nodeModulesDir, 'react-navigation/node_modules/react-native-safe-area-view/.git')\n    ]).then(() => resolve()).catch(e => reject(e));\n});\n\nexport const npmInstall = async (failOnError = false) => {\n    logTask('npmInstall');\n    const c = Config.getConfig();\n\n    return executeAsync('npm install')\n        .then(() => invalidatePodsChecksum(c))\n        .catch((e) => {\n            if (failOnError) {\n                return logError(e);\n            }\n            logWarning(`${e}\\n Seems like your node_modules is corrupted by other libs. ReNative will try to fix it for you`);\n            return cleanNodeModules(Config.getConfig())\n                .then(() => npmInstall(true))\n                .catch(f => logError(f));\n        });\n};\n\n// eslint-disable-next-line no-nested-ternary\nconst openCommand = process.platform === 'darwin' ? 'open' : process.platform === 'win32' ? 'start' : 'xdg-open';\n\nexport { executeAsync, execCLI, commandExists, commandExistsSync, openCommand, executeTelnet };\n\nexport default {\n    executeAsync,\n    execCLI,\n    openCommand,\n    executeTelnet\n};\n"],"file":"exec.js"}