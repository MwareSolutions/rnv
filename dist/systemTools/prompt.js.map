{"version":3,"sources":["../../src/systemTools/prompt.js"],"names":["highlight","chalk","grey","bold","inquirerPrompt","params","c","Config","getConfig","msg","logMessage","warningMessage","message","program","ci","Error","type","name","inquirer","prompt","result","generateOptions","inputData","isMultiChoice","mapping","renderMethod","asString","valuesAsObject","valuesAsArray","keysAsObject","keysAsArray","optionsAsArray","isArray","Array","output","renderer","_generateOptionString","map","v","i","rn","push","k","sort","_sort","a","b","aStr","bStr","toLowerCase","com","obj","defaultVal"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { logWarning, logTask, rnvStatus, logEnd, logToSummary } from './logger';\nimport Config from '../config';\n\nconst highlight = chalk.grey.bold;\n\nexport const inquirerPrompt = async (params) => {\n    const c = Config.getConfig();\n    const msg = params.logMessage || params.warningMessage || params.message;\n    if (c.program.ci) {\n        throw new Error(`--ci option does not allow prompts: ${msg}`);\n    }\n    if (msg && params.logMessage) logTask(msg, chalk.grey);\n    if (msg && params.warningMessage) logWarning(msg);\n\n    // allow passing in just { type: 'prompt', ... } instead of { type: 'prompt', name: 'prompt', ... }\n    const { type, name } = params;\n    if (type === 'confirm' && !name) params.name = 'confirm';\n\n    const result = await inquirer.prompt(params);\n    return result;\n};\n\nexport const generateOptions = (inputData, isMultiChoice = false, mapping, renderMethod) => {\n    let asString = '';\n    const valuesAsObject = {};\n    const valuesAsArray = [];\n    const keysAsObject = {};\n    const keysAsArray = [];\n    const optionsAsArray = [];\n    const isArray = Array.isArray(inputData);\n\n    const output = {};\n    const renderer = renderMethod || _generateOptionString;\n    if (isArray) {\n        inputData.map((v, i) => {\n            const rn = renderer(i, v, mapping, v);\n            asString += rn;\n            optionsAsArray.push(rn);\n            valuesAsArray.push(v);\n            if (!mapping) keysAsArray.push(v);\n            if (!mapping) valuesAsObject[v] = v;\n        });\n    } else {\n        let i = 0;\n        for (const k in inputData) {\n            const v = inputData[k];\n            const rn = renderer(i, v, mapping, k);\n            asString += rn;\n            optionsAsArray.push(rn);\n            keysAsArray.push(k);\n            keysAsObject[k] = true;\n            valuesAsObject[k] = v;\n            valuesAsArray.push(v);\n            i++;\n        }\n    }\n    output.keysAsArray = keysAsArray.sort(_sort);\n    output.valuesAsArray = valuesAsArray.sort(_sort);\n    output.keysAsObject = keysAsObject;\n    output.valuesAsObject = valuesAsObject;\n    output.asString = asString;\n    output.optionsAsArray = optionsAsArray;\n    return output;\n};\n\nconst _sort = (a, b) => {\n    let aStr = '';\n    let bStr = '';\n    if (typeof a === 'string') {\n        // TODO: temp fix for weird issue when a/b are marked as string\n        // but toLowerCase() is undefined. need to investigate\n        aStr = a.toLowerCase ? a.toLowerCase() : a;\n        bStr = b.toLowerCase ? b.toLowerCase() : b;\n    } else {\n        if (a && a.name) aStr = a.name.toLowerCase();\n        if (b && b.name) bStr = b.name.toLowerCase();\n    }\n\n    let com = 0;\n    if (aStr > bStr) {\n        com = 1;\n    } else if (aStr < bStr) {\n        com = -1;\n    }\n    return com;\n};\n\nconst _generateOptionString = (i, obj, mapping, defaultVal) => ` [${highlight(i + 1)}]> ${highlight(mapping ? '' : defaultVal)} \\n`;\n"],"file":"prompt.js"}