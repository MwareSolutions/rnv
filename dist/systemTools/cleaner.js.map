{"version":3,"file":"cleaner.js","names":["rnvClean","c","skipQuestion","logTask","program","ci","pathsToRemove","fs","existsSync","paths","project","nodeModulesDir","push","pkgLock","path","join","dir","msg","chalk","red","packagesFolder","readdirSync","forEach","pth","pth2","pth3","buildDirs","builds","assets","answers","modules","cache","nothingToClean","length","inquirer","prompt","name","type","message","confirm","confirmBuilds","confirmCache","logToSummary","Promise","resolve","removeDirs","executeAsync"],"sources":["../../src/systemTools/cleaner.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport { removeDirs } from './fileutils';\nimport { logTask, logToSummary } from './logger';\nimport { executeAsync } from './exec';\n\nconst rnvClean = async (c, skipQuestion = false) => {\n    logTask('rnvClean');\n    if (c.program.ci) skipQuestion = true;\n    const pathsToRemove = [];\n    if (fs.existsSync(c.paths.project.nodeModulesDir)) pathsToRemove.push(c.paths.project.nodeModulesDir);\n    const pkgLock = path.join(c.paths.project.dir, 'package-lock.json');\n    if (fs.existsSync(pkgLock)) pathsToRemove.push(pkgLock);\n    let msg = chalk.red(`${c.paths.project.nodeModulesDir}\\n${pkgLock}\\n`);\n    const packagesFolder = path.join(c.paths.project.dir, 'packages');\n    if (fs.existsSync(packagesFolder)) {\n        fs.readdirSync(packagesFolder).forEach((dir) => {\n            if (dir === '.DS_Store') {\n                const pth = path.join(packagesFolder, dir);\n\n                if (fs.existsSync(pth)) {\n                    pathsToRemove.push(pth);\n                    msg += chalk.red(`${pth}\\n`);\n                }\n            } else {\n                const pth2 = path.join(packagesFolder, dir, 'node_modules');\n                if (fs.existsSync(pth2)) {\n                    pathsToRemove.push(pth2);\n                    msg += chalk.red(`${pth2}\\n`);\n                }\n\n                const pth3 = path.join(packagesFolder, dir, 'package-lock.json');\n                if (fs.existsSync(pth3)) {\n                    pathsToRemove.push(pth3);\n                    msg += chalk.red(`${pth3}\\n`);\n                }\n            }\n        });\n    }\n\n    const buildDirs = [];\n    if (fs.existsSync(c.paths.project.builds.dir)) buildDirs.push(c.paths.project.builds.dir);\n    if (fs.existsSync(c.paths.project.assets.dir)) buildDirs.push(c.paths.project.assets.dir);\n\n    const answers = {\n        modules: false,\n        builds: false,\n        cache: false,\n        nothingToClean: !skipQuestion\n    };\n\n    if (pathsToRemove.length) {\n        if (!skipQuestion) {\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                type: 'confirm',\n                message: `Do you want to remove node_module related files/folders? \\n${msg}`,\n            });\n            answers.modules = confirm;\n            if (confirm) answers.nothingToClean = false;\n        } else {\n            answers.modules = true;\n        }\n    }\n\n    if (buildDirs.length) {\n        if (!skipQuestion) {\n            const { confirmBuilds } = await inquirer.prompt({\n                name: 'confirmBuilds',\n                type: 'confirm',\n                message: `Do you want to clean your platformBuilds and platformAssets? \\n${chalk.red(buildDirs.join('\\n'))}`,\n            });\n            answers.builds = confirmBuilds;\n            if (confirmBuilds) answers.nothingToClean = false;\n        } else {\n            answers.builds = true;\n        }\n    }\n\n    if (!skipQuestion) {\n        const { confirmCache } = await inquirer.prompt({\n            name: 'confirmCache',\n            type: 'confirm',\n            message: 'Do you want to clean your npm/bundler cache?',\n        });\n        answers.cache = confirmCache;\n        if (confirmCache) answers.nothingToClean = false;\n    } else {\n        answers.cache = true;\n    }\n\n    if (answers.nothingToClean) {\n        logToSummary('Nothing to clean');\n        return Promise.resolve();\n    }\n\n    if (answers.modules) {\n        await removeDirs(pathsToRemove);\n    }\n    if (answers.builds) {\n        await removeDirs(buildDirs);\n    }\n    if (answers.cache) {\n        await executeAsync(c, 'watchman watch-del-all');\n        await executeAsync(c, 'rm -rf $TMPDIR/metro-* && rm -rf $TMPDIR/react-* && rm -rf $TMPDIR/haste-*');\n    }\n};\n\nexport { rnvClean };\n"],"mappings":"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"}