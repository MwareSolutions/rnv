{"version":3,"sources":["../../src/systemTools/cleaner.js"],"names":["rnvClean","c","skipQuestion","program","ci","pathsToRemove","fs","existsSync","paths","project","nodeModulesDir","push","pkgLock","path","join","dir","msg","chalk","red","packagesFolder","readdirSync","forEach","pth","pth2","pth3","buildDirs","builds","assets","answers","modules","cache","nothingToClean","length","inquirer","prompt","name","type","message","confirm","confirmBuilds","confirmCache","Promise","resolve"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport { removeDirs } from './fileutils';\nimport { logTask, logToSummary } from './logger';\nimport { executeAsync } from './exec';\n\nconst rnvClean = async (c, skipQuestion = false) => {\n    logTask('rnvClean');\n    if (c.program.ci) skipQuestion = true;\n    const pathsToRemove = [];\n    if (fs.existsSync(c.paths.project.nodeModulesDir)) pathsToRemove.push(c.paths.project.nodeModulesDir);\n    const pkgLock = path.join(c.paths.project.dir, 'package-lock.json');\n    if (fs.existsSync(pkgLock)) pathsToRemove.push(pkgLock);\n    let msg = chalk.red(`${c.paths.project.nodeModulesDir}\\n${pkgLock}\\n`);\n    const packagesFolder = path.join(c.paths.project.dir, 'packages');\n    if (fs.existsSync(packagesFolder)) {\n        fs.readdirSync(packagesFolder).forEach((dir) => {\n            if (dir === '.DS_Store') {\n                const pth = path.join(packagesFolder, dir);\n\n                if (fs.existsSync(pth)) {\n                    pathsToRemove.push(pth);\n                    msg += chalk.red(`${pth}\\n`);\n                }\n            } else {\n                const pth2 = path.join(packagesFolder, dir, 'node_modules');\n                if (fs.existsSync(pth2)) {\n                    pathsToRemove.push(pth2);\n                    msg += chalk.red(`${pth2}\\n`);\n                }\n\n                const pth3 = path.join(packagesFolder, dir, 'package-lock.json');\n                if (fs.existsSync(pth3)) {\n                    pathsToRemove.push(pth3);\n                    msg += chalk.red(`${pth3}\\n`);\n                }\n            }\n        });\n    }\n\n    const buildDirs = [];\n    if (fs.existsSync(c.paths.project.builds.dir)) buildDirs.push(c.paths.project.builds.dir);\n    if (fs.existsSync(c.paths.project.assets.dir)) buildDirs.push(c.paths.project.assets.dir);\n\n    const answers = {\n        modules: false,\n        builds: false,\n        cache: false,\n        nothingToClean: !skipQuestion\n    };\n\n    if (pathsToRemove.length) {\n        if (!skipQuestion) {\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                type: 'confirm',\n                message: `Do you want to remove node_module related files/folders? \\n${msg}`,\n            });\n            answers.modules = confirm;\n            if (confirm) answers.nothingToClean = false;\n        } else {\n            answers.modules = true;\n        }\n    }\n\n    if (buildDirs.length) {\n        if (!skipQuestion) {\n            const { confirmBuilds } = await inquirer.prompt({\n                name: 'confirmBuilds',\n                type: 'confirm',\n                message: `Do you want to clean your platformBuilds and platformAssets? \\n${chalk.red(buildDirs.join('\\n'))}`,\n            });\n            answers.builds = confirmBuilds;\n            if (confirmBuilds) answers.nothingToClean = false;\n        } else {\n            answers.builds = true;\n        }\n    }\n\n    if (!skipQuestion) {\n        const { confirmCache } = await inquirer.prompt({\n            name: 'confirmCache',\n            type: 'confirm',\n            message: 'Do you want to clean your npm/bundler cache?',\n        });\n        answers.cache = confirmCache;\n        if (confirmCache) answers.nothingToClean = false;\n    } else {\n        answers.cache = true;\n    }\n\n    if (answers.nothingToClean) {\n        logToSummary('Nothing to clean');\n        return Promise.resolve();\n    }\n\n    if (answers.modules) {\n        await removeDirs(pathsToRemove);\n    }\n    if (answers.builds) {\n        await removeDirs(buildDirs);\n    }\n    if (answers.cache) {\n        await executeAsync(c, 'watchman watch-del-all');\n        await executeAsync(c, 'rm -rf $TMPDIR/metro-* && rm -rf $TMPDIR/react-* && rm -rf $TMPDIR/haste-*');\n    }\n};\n\nexport { rnvClean };\n"],"file":"cleaner.js"}