{"version":3,"sources":["../../src/systemTools/analytics.js"],"names":["sanitizeError","err","includes","toLowerCase","split","Redash","e","defaultProps","fingerprint","os","platform","rnvVersion","pkg","version","axios","post","REDASH_URL","headers","REDASH_KEY","catch","Analytics","errorFixer","knowItAll","Config","isAnalyticsEnabled","require","init","dsn","release","integrations","RewriteFrames","root","iteratee","frame","filename","path","sep","context","withScope","scope","extra","tags","setTags","setExtras","Error","captureException","captureEvent","Promise","resolve","client","getCurrentHub","getClient","close","then"],"mappings":"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","sourcesContent":["import { RewriteFrames } from '@sentry/integrations';\nimport { machineIdSync } from 'node-machine-id';\nimport axios from 'axios';\nimport os from 'os';\nimport path from 'path';\n\nimport Config from '../config';\nimport pkg from '../../package.json';\nimport { REDASH_KEY, REDASH_URL } from '../constants';\n\n// deal with useless duplicate errors on sentry because of different error texts\nconst sanitizeError = (err) => {\n    if (err) {\n        if (err.includes('file if you SDK path is correct.')) {\n            return err.toLowerCase().split('. check your ')[0];\n        }\n        if (err.includes('AppConfig error - ')) {\n            return err.split(' - ')[0];\n        }\n    }\n\n    return err;\n};\n\nclass Redash {\n    captureEvent(e) {\n        const defaultProps = {\n            fingerprint: machineIdSync(),\n            os: os.platform(),\n            rnvVersion: pkg.version,\n        };\n        return axios.post(REDASH_URL, { ...e, ...defaultProps }, {\n            headers: {\n                'x-api-key': REDASH_KEY\n            }\n        }).catch(() => true);\n    }\n}\n\nclass Analytics {\n    constructor() {\n        this.errorFixer = null;\n        this.knowItAll = null;\n    }\n\n    initialize() {\n        if (Config.isAnalyticsEnabled) {\n            // ERROR HANDLING\n            // eslint-disable-next-line global-require\n            this.errorFixer = require('@sentry/node');\n\n            this.errorFixer.init({\n                dsn: 'https://004caee3caa04c81a10f2ba31a945362@sentry.io/1795473',\n                release: `rnv@${pkg.version}`,\n                integrations: [new RewriteFrames({\n                    root: '/',\n                    iteratee: (frame) => {\n                        if (frame.filename.includes(`rnv${path.sep}dist${path.sep}`) || frame.filename.includes(`rnv${path.sep}src${path.sep}`)) {\n                            if (frame.filename.includes(`rnv${path.sep}dist${path.sep}`)) {\n                                frame.filename = frame.filename.split(`rnv${path.sep}dist${path.sep}`)[1];\n                            } else {\n                                frame.filename = frame.filename.split(`rnv${path.sep}src${path.sep}`)[1];\n                            }\n                        } else if (frame.filename.includes(`${path.sep}node_modules${path.sep}`)) {\n                            frame.filename = `node_modules/${frame.filename.split(`${path.sep}node_modules${path.sep}`)[1]}`;\n                        }\n                        return frame;\n                    }\n                })]\n            });\n\n            // EVENT HANDLING\n            this.knowItAll = new Redash();\n        }\n    }\n\n    captureException(e, context = {}) {\n        if (Config.isAnalyticsEnabled && this.errorFixer) {\n            this.errorFixer.withScope((scope) => {\n                const { extra = {}, tags = {} } = context;\n                scope.setTags({ ...tags, os: os.platform() });\n                scope.setExtras({ ...extra, fingerprint: machineIdSync() });\n                if (e instanceof Error) {\n                    this.errorFixer.captureException(e);\n                } else {\n                    this.errorFixer.captureException(new Error(sanitizeError(e)));\n                }\n            });\n        }\n    }\n\n    async captureEvent(e) {\n        if (Config.isAnalyticsEnabled && this.knowItAll) {\n            return this.knowItAll.captureEvent(e);\n        }\n        return true;\n    }\n\n    teardown() {\n        return new Promise((resolve) => {\n            if (Config.isAnalyticsEnabled && this.errorFixer) {\n                const client = this.errorFixer.getCurrentHub().getClient();\n                if (client) {\n                    return client.close(2000).then(resolve);\n                }\n                return resolve();\n            }\n            return resolve();\n        });\n    }\n}\n\nexport default new Analytics();\n"],"file":"analytics.js"}