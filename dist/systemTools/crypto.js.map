{"version":3,"sources":["../../src/systemTools/crypto.js"],"names":["getEnvVar","c","p1","paths","workspace","dir","split","pop","replace","p2","files","project","package","name","envVar","toUpperCase","rnvCryptoUpdateProfile","rnvCryptoEncrypt","Promise","resolve","reject","source","destRaw","config","crypto","encrypt","dest","tsWorkspacePath","path","join","destTemp","timestamp","Date","getTime","key","program","process","env","chalk","white","tar","gzip","file","cwd","then","_getOpenSllPath","privateParams","fs","writeFileSync","catch","e","projectConfig","rnvCryptoDecrypt","sourceRaw","decrypt","ts","destFolder","wsPath","ci","reset","options","type","choices","message","option","existsSync","x","platform","defaultOpenssl","isSystemMac","rnv","rnvCryptoInstallProfiles","ppFolder","home","list","mobileprovisionArr","filter","v","endsWith","forEach","console","log","rnvCryptoInstallCerts","maxErrorLength","kChain","keychain","kChainPath","cerPromises","cerArr","all","map","rnvCryptoUpdateProfiles","IOS","TVOS","appId","runtime","_updateProfiles","grey","acList","fullList","currentAppId","reduce","previousPromise","_updateProfile","checkCrypto","tsProjectPath","tsWorkspace","tsProject","parseInt","readFileSync","toString"],"mappings":"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","sourcesContent":["import path from 'path';\nimport tar from 'tar';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { logWarning, logError, logTask, logDebug, logSuccess } from './logger';\nimport { isSystemMac } from '../utils';\nimport { listAppConfigsFoldersSync, generateBuildConfig, setAppConfig } from '../configTools/configParser';\nimport { IOS, TVOS } from '../constants';\nimport { getRealPath, removeFilesSync, getFileListSync, copyFileSync, mkdirSync, readObjectSync } from './fileutils';\nimport { executeAsync } from './exec';\nimport { updateProfile } from '../platformTools/apple/fastlane';\nimport { inquirerPrompt } from './prompt';\nimport { cleanFolder } from '../../dist/systemTools/fileutils';\n\nconst getEnvVar = (c) => {\n    const p1 = c.paths.workspace.dir.split('/').pop().replace('.', '');\n    const p2 = c.files.project.package.name.replace('@', '').replace('/', '_').replace(/-/g, '_');\n    const envVar = `CRYPTO_${p1}_${p2}`.toUpperCase();\n    logDebug('encrypt looking for env var:', envVar);\n    return envVar;\n};\n\nexport const rnvCryptoUpdateProfile = async (c) => {\n    await updateProfile(c);\n};\n\nexport const rnvCryptoEncrypt = c => new Promise((resolve, reject) => {\n    logTask('rnvCryptoEncrypt');\n\n    const source = `./${c.files.project.package.name}`;\n    const destRaw = c.files.project.config?.crypto?.encrypt?.dest;\n    const tsWorkspacePath = path.join(c.paths.workspace.dir, c.files.project.package.name, 'timestamp');\n\n    if (destRaw) {\n        const dest = `${getRealPath(c, destRaw, 'encrypt.dest')}`;\n        const destTemp = `${path.join(c.paths.workspace.dir, c.files.project.package.name.replace('/', '-'))}.tgz`;\n        const timestamp = (new Date()).getTime();\n        const envVar = getEnvVar(c);\n        const key = c.program.key || c.process.env[envVar];\n        if (!key) {\n            reject(`encrypt: You must pass ${chalk.white('--key')} or have env var ${chalk.white(envVar)} defined`);\n            return;\n        }\n        tar.c(\n            {\n                gzip: true,\n                file: destTemp,\n                cwd: c.paths.workspace.dir\n            },\n            [source]\n        )\n            .then(() => executeAsync(c, `${_getOpenSllPath(c)} enc -aes-256-cbc -md md5 -salt -in ${destTemp} -out ${dest} -k ${key}`, { privateParams: [key] }))\n            .then(() => {\n                removeFilesSync([destTemp]);\n                fs.writeFileSync(`${dest}.timestamp`, timestamp);\n                fs.writeFileSync(`${tsWorkspacePath}`, timestamp);\n                logSuccess(`Files succesfully encrypted into ${dest}`);\n                resolve();\n            }).catch((e) => {\n                reject(e);\n            });\n    } else {\n        logWarning(`You don't have {{ crypto.encrypt.dest }} specificed in ${chalk.white(c.paths.projectConfig)}`);\n        resolve();\n    }\n});\n\nexport const rnvCryptoDecrypt = async (c) => {\n    logTask('rnvCryptoDecrypt');\n\n    const sourceRaw = c.files.project.config?.crypto?.decrypt?.source;\n\n    if (sourceRaw) {\n        const source = `${getRealPath(c, sourceRaw, 'decrypt.source')}`;\n        const ts = `${source}.timestamp`;\n        const destFolder = path.join(c.paths.workspace.dir, c.files.project.package.name);\n        const destTemp = `${path.join(c.paths.workspace.dir, c.files.project.package.name.replace('/', '-'))}.tgz`;\n        const envVar = getEnvVar(c);\n\n\n        const wsPath = path.join(c.paths.workspace.dir, c.files.project.package.name);\n        if (c.program.ci !== true && c.program.reset !== true) {\n            const options = [\n                'Yes - override (recommended)',\n                'Yes - merge',\n                'Skip'\n            ];\n            const { option } = await inquirerPrompt({\n                name: 'option',\n                type: 'list',\n                choices: options,\n                message: `How to decrypt to ${chalk.white(destFolder)} ?`\n            });\n            if (option === options[0]) {\n                await cleanFolder(wsPath);\n            } else if (option === options[2]) {\n                return true;\n            }\n        } else {\n            await cleanFolder(wsPath);\n        }\n\n\n        const key = c.program.key || c.process.env[envVar];\n        if (!key) {\n            return Promise.reject(`encrypt: You must pass ${chalk.white('--key')} or have env var ${chalk.white(envVar)} defined`);\n        }\n        if (!fs.existsSync(source)) {\n            return Promise.reject(`Can't decrypt. ${chalk.white(source)} is missing!`);\n        }\n\n        await executeAsync(c, `${_getOpenSllPath(c)} enc -aes-256-cbc -md md5 -d -in ${source} -out ${destTemp} -k ${key}`, { privateParams: [key] });\n\n        await tar.x({\n            file: destTemp,\n            cwd: c.paths.workspace.dir\n        });\n\n        removeFilesSync([destTemp]);\n        if (fs.existsSync(ts)) {\n            copyFileSync(ts, path.join(c.paths.workspace.dir, c.files.project.package.name, 'timestamp'));\n        }\n        logSuccess(`Files succesfully extracted into ${destFolder}`);\n    } else {\n        logWarning(`You don't have {{ crypto.encrypt.dest }} specificed in ${chalk.white(c.paths.projectConfig)}`);\n        return true;\n    }\n};\n\nconst _getOpenSllPath = (c) => {\n    const { process: { platform } } = c;\n    let defaultOpenssl = 'openssl';\n    // if (platform === 'linux') defaultOpenssl = path.join(c.paths.rnv.dir, 'bin/openssl-linux');\n    if (isSystemMac) defaultOpenssl = path.join(c.paths.rnv.dir, 'bin/openssl-osx');\n    // if (fs.existsSync(defaultOpenssl)) {\n    //     return defaultOpenssl;\n    // }\n    // logWarning(`${defaultOpenssl} is missing. will use default one`);\n\n    return defaultOpenssl;\n};\n\nexport const rnvCryptoInstallProfiles = c => new Promise((resolve, reject) => {\n    logTask('rnvCryptoInstallProfiles');\n    if (c.platform !== 'ios') {\n        logError(`rnvCryptoInstallProfiles: platform ${c.platform} not supported`);\n        resolve();\n        return;\n    }\n\n    const ppFolder = path.join(c.paths.home.dir, 'Library/MobileDevice/Provisioning Profiles');\n\n    if (!fs.existsSync(ppFolder)) {\n        logWarning(`folder ${ppFolder} does not exist!`);\n        mkdirSync(ppFolder);\n    }\n\n    const list = getFileListSync(c.paths.workspace.project.dir);\n    const mobileprovisionArr = list.filter(v => v.endsWith('.mobileprovision'));\n\n    try {\n        mobileprovisionArr.forEach((v) => {\n            console.log(`rnvCryptoInstallProfiles: Installing: ${v}`);\n            copyFileSync(v, ppFolder);\n        });\n    } catch (e) {\n        logError(e);\n    }\n\n    resolve();\n});\n\nexport const rnvCryptoInstallCerts = c => new Promise((resolve, reject) => {\n    logTask('rnvCryptoInstallCerts');\n    const { maxErrorLength } = c.program;\n\n    if (c.platform !== 'ios') {\n        logError(`_installTempCerts: platform ${c.platform} not supported`);\n        resolve();\n        return;\n    }\n    const kChain = c.program.keychain || 'ios-build.keychain';\n    const kChainPath = path.join(c.paths.home.dir, 'Library/Keychains', kChain);\n    const list = getFileListSync(c.paths.workspace.project.dir);\n    const cerPromises = [];\n    const cerArr = list.filter(v => v.endsWith('.cer'));\n\n    Promise.all(cerArr.map(v => executeAsync(c, `security import ${v} -k ${kChain} -A`)))\n        .then(() => resolve())\n        .catch((e) => {\n            logWarning(e);\n            resolve();\n        });\n});\n\n\nexport const rnvCryptoUpdateProfiles = async (c) => {\n    logTask('rnvCryptoUpdateProfiles');\n    switch (c.platform) {\n        case IOS:\n        case TVOS:\n            const { appId } = c.runtime;\n            await _updateProfiles(c);\n            await setAppConfig(c, appId);\n        default:\n            return true;\n    }\n    return Promise.reject(`updateProfiles: Platform ${c.platform} not supported`);\n};\n\nconst _updateProfiles = (c) => {\n    logTask('_updateProfiles', chalk.grey);\n    const acList = listAppConfigsFoldersSync(c, true);\n    const fullList = [];\n    const currentAppId = c.runtime.appId;\n\n    return acList.reduce((previousPromise, v) => previousPromise.then(() => _updateProfile(c, v)), Promise.resolve());\n};\n\nconst _updateProfile = (c, v) => new Promise((resolve, reject) => {\n    logTask(`_updateProfile:${v}`, chalk.grey);\n    updateProfile(c, v)\n        .then(() => resolve())\n        .catch(e => reject(e));\n});\n\nexport const checkCrypto = async (c) => {\n    logTask('checkCrypto');\n\n    if (c.program.ci) return;\n\n    const sourceRaw = c.files.project.config?.crypto?.decrypt?.source;\n    const source = `./${c.files.project.package.name}`;\n    const destRaw = c.files.project.config?.crypto?.encrypt?.dest;\n\n    if (destRaw) {\n        if (sourceRaw && destRaw) {\n            const source = `${getRealPath(c, sourceRaw, 'decrypt.source')}`;\n            const tsProjectPath = `${source}.timestamp`;\n            const wsPath = path.join(c.paths.workspace.dir, c.files.project.package.name);\n            const tsWorkspacePath = path.join(wsPath, 'timestamp');\n            if (!fs.existsSync(source)) {\n                logWarning('This project uses encrypted files but you don\\'t have them installed');\n            } else {\n                let tsWorkspace = 0;\n                let tsProject = 0;\n                if (fs.existsSync(tsWorkspacePath)) {\n                    tsWorkspace = parseInt(fs.readFileSync(tsWorkspacePath).toString());\n                }\n\n                if (fs.existsSync(tsProjectPath)) {\n                    tsProject = parseInt(fs.readFileSync(tsProjectPath).toString());\n                }\n\n                if (tsProject > tsWorkspace) {\n                    logWarning(`Your ${tsWorkspacePath} is out of date. you should run decrypt`);\n                    await rnvCryptoDecrypt(c);\n                    return;\n                }\n\n                if (tsProject < tsWorkspace) {\n                    logWarning(`Your ${tsWorkspacePath} is newer than your project one.`);\n                }\n            }\n        }\n    }\n};\n"],"file":"crypto.js"}