{"version":3,"sources":["../../src/systemTools/sdkManager.js"],"names":["checkAndConfigureAndroidSdks","c","platform","sdk","files","workspace","config","sdks","ANDROID_SDK","cli","CLI_ANDROID_EMULATOR","path","join","isSystemWin","CLI_ANDROID_ADB","CLI_ANDROID_AVDMANAGER","CLI_ANDROID_SDKMANAGER","checkAndConfigureTizenSdks","TIZEN_SDK","CLI_TIZEN_EMULATOR","CLI_TIZEN","CLI_SDB_TIZEN","checkAndConfigureWebosSdks","WEBOS_SDK","CLI_WEBOS_ARES","CLI_WEBOS_ARES_PACKAGE","CLI_WEBOS_ARES_INSTALL","CLI_WEBOS_ARES_LAUNCH","CLI_WEBOS_ARES_SETUP_DEVICE","CLI_WEBOS_ARES_DEVICE_INFO","CLI_WEBOS_ARES_NOVACOM","checkAndConfigureSdks","ANDROID","ANDROID_TV","ANDROID_WEAR","TIZEN","TIZEN_MOBILE","TIZEN_WATCH","WEBOS","_getCurrentSdkPath","SDK_PLATFORMS","_isSdkInstalled","sdkPath","fs","existsSync","checkSdk","reject","err","chalk","white","paths","Error"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport {\n    CLI_ANDROID_EMULATOR,\n    CLI_ANDROID_AVDMANAGER,\n    CLI_ANDROID_SDKMANAGER,\n    CLI_ANDROID_ADB,\n    CLI_TIZEN_EMULATOR,\n    CLI_TIZEN,\n    CLI_SDB_TIZEN,\n    CLI_WEBOS_ARES,\n    CLI_WEBOS_ARES_PACKAGE,\n    CLI_WEBOS_ARES_INSTALL,\n    CLI_WEBOS_ARES_LAUNCH,\n    CLI_WEBOS_ARES_NOVACOM,\n    CLI_WEBOS_ARES_SETUP_DEVICE,\n    CLI_WEBOS_ARES_DEVICE_INFO,\n    ANDROID,\n    TIZEN,\n    WEBOS,\n    ANDROID_TV,\n    ANDROID_WEAR,\n    TIZEN_MOBILE,\n    TIZEN_WATCH,\n    SDK_PLATFORMS\n} from '../constants';\nimport { isSystemWin } from '../utils';\nimport {\n    getRealPath\n} from './fileutils';\nimport {\n    logTask\n} from './logger';\n\n// const _logSdkWarning = (c) => {\n//     logWarning(`Your ${c.paths.workspace.config} is missing SDK configuration object`);\n// };\n\nexport const checkAndConfigureAndroidSdks = async (c) => {\n    logTask(`checkAndConfigureAndroidSdks:${c.platform}`);\n    const sdk = c.files.workspace.config?.sdks?.ANDROID_SDK;\n    if (sdk) {\n        c.cli[CLI_ANDROID_EMULATOR] = getRealPath(c, path.join(sdk, `emulator/emulator${isSystemWin ? '.exe' : ''}`));\n        c.cli[CLI_ANDROID_ADB] = getRealPath(c, path.join(sdk, `platform-tools/adb${isSystemWin ? '.exe' : ''}`));\n        c.cli[CLI_ANDROID_AVDMANAGER] = getRealPath(c, path.join(sdk, `tools/bin/avdmanager${isSystemWin ? '.bat' : ''}`));\n        c.cli[CLI_ANDROID_SDKMANAGER] = getRealPath(c, path.join(sdk, `tools/bin/sdkmanager${isSystemWin ? '.bat' : ''}`));\n    } else {\n    // TODO: FIX\n    }\n};\n\nexport const checkAndConfigureTizenSdks = async (c) => {\n    logTask(`checkAndConfigureTizenSdks:${c.platform}`);\n    const sdk = c.files.workspace.config?.sdks?.TIZEN_SDK;\n    if (sdk) {\n        c.cli[CLI_TIZEN_EMULATOR] = getRealPath(c, path.join(sdk, `tools/emulator/bin/em-cli${isSystemWin ? '.bat' : ''}`));\n        c.cli[CLI_TIZEN] = getRealPath(c, path.join(sdk, `tools/ide/bin/tizen${isSystemWin ? '.bat' : ''}`));\n        c.cli[CLI_SDB_TIZEN] = getRealPath(c, path.join(sdk, `tools/sdb${isSystemWin ? '.exe' : ''}`));\n    } else {\n    // TODO: FIX\n    }\n};\n\nexport const checkAndConfigureWebosSdks = async (c) => {\n    logTask(`checkAndConfigureWebosSdks:${c.platform}`);\n    const sdk = c.files.workspace.config?.sdks?.WEBOS_SDK;\n    if (sdk) {\n        c.cli[CLI_WEBOS_ARES] = getRealPath(c, path.join(sdk, `CLI/bin/ares${isSystemWin ? '.cmd' : ''}`));\n        c.cli[CLI_WEBOS_ARES_PACKAGE] = getRealPath(c, path.join(sdk, `CLI/bin/ares-package${isSystemWin ? '.cmd' : ''}`));\n        c.cli[CLI_WEBOS_ARES_INSTALL] = getRealPath(c, path.join(sdk, `CLI/bin/ares-install${isSystemWin ? '.cmd' : ''}`));\n        c.cli[CLI_WEBOS_ARES_LAUNCH] = getRealPath(c, path.join(sdk, `CLI/bin/ares-launch${isSystemWin ? '.cmd' : ''}`));\n        c.cli[CLI_WEBOS_ARES_SETUP_DEVICE] = getRealPath(c, path.join(sdk, `CLI/bin/ares-setup-device${isSystemWin ? '.cmd' : ''}`));\n        c.cli[CLI_WEBOS_ARES_DEVICE_INFO] = getRealPath(c, path.join(sdk, `CLI/bin/ares-device-info${isSystemWin ? '.cmd' : ''}`));\n        c.cli[CLI_WEBOS_ARES_NOVACOM] = getRealPath(c, path.join(sdk, `CLI/bin/ares-novacom${isSystemWin ? '.cmd' : ''}`));\n    } else {\n    // TODO: FIX\n    }\n};\n\nexport const checkAndConfigureSdks = async (c) => {\n    logTask(`checkAndConfigureSdks:${c.platform}`);\n\n    switch (c.platform) {\n        case ANDROID:\n        case ANDROID_TV:\n        case ANDROID_WEAR:\n            return checkAndConfigureAndroidSdks(c);\n        case TIZEN:\n        case TIZEN_MOBILE:\n        case TIZEN_WATCH:\n            return checkAndConfigureTizenSdks(c);\n        case WEBOS:\n            return checkAndConfigureWebosSdks(c);\n        default:\n            return true;\n    }\n};\n\nconst _getCurrentSdkPath = c => c.files.workspace?.config?.sdks?.[SDK_PLATFORMS[c.platform]];\n\nconst _isSdkInstalled = (c) => {\n    logTask(`_isSdkInstalled: ${c.platform}`);\n\n    const sdkPath = _getCurrentSdkPath(c, c.platform);\n\n    return fs.existsSync(getRealPath(c, sdkPath));\n};\n\nexport const checkSdk = (c, reject) => {\n    if (!_isSdkInstalled(c)) {\n        const err = `${c.platform} requires SDK to be installed. check your ${chalk.white(c.paths.workspace.config)} file if you SDK path is correct. current value is ${chalk.white(_getCurrentSdkPath(c))}`;\n        if (reject) {\n            reject(err);\n        } else {\n            throw new Error(err);\n        }\n        return false;\n    }\n    return true;\n};\n\n// usr/local/android-sdk\n// ~/Library/Android/sdk\n// ~\\AppData\\Local\\Android\\android-sdk\n// ~\\AppData\\Local\\Android\\sdk\n// C:\\Program Files (x86)\\Android\\android-sdk\n"],"file":"sdkManager.js"}