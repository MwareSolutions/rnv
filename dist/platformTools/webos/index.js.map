{"version":3,"sources":["../../../src/platformTools/webos/index.js"],"names":["launchWebOSimulator","c","ePath","path","join","files","workspace","config","sdks","WEBOS_SDK","isSystemWin","fs","existsSync","Promise","reject","detached","stdio","openCommand","startHostedServerIfRequired","Config","isWebHostEnabled","parseDevices","devicesResponse","linesArray","split","slice","map","line","trim","filter","all","word","name","device","connection","profile","deviceInfo","CLI_WEBOS_ARES_DEVICE_INFO","silent","timeout","isDevice","includes","runtime","localhost","active","installAndLaunchApp","target","appPath","tId","CLI_WEBOS_ARES_INSTALL","hosted","program","platform","isHosted","toReturn","CLI_WEBOS_ARES_LAUNCH","buildDeviceChoices","devices","key","value","listWebOSTargets","deviceArray","i","chalk","bold","waitForEmulatorToBeReady","emulator","d","Error","res","runWebOS","tDir","tOut","tSim","configFilePath","grey","cnfg","JSON","parse","readFileSync","id","version","port","isPortActive","skipActiveServerCheck","CLI_WEBOS_ARES_PACKAGE","activeDevices","actualDevices","length","inquirer","prompt","type","message","default","response","setupDevice","CLI_WEBOS_ARES_SETUP_DEVICE","interactive","newDeviceResponse","dev","actualDev","newDevice","CLI_WEBOS_ARES_NOVACOM","tv","choices","chosenDevice","buildWebOSProject","resolve","then","white","catch","configureWebOSProject","configureProject","appFolder","configFile","pattern","override","toLowerCase","semver","coerce"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\nimport inquirer from 'inquirer';\nimport { executeAsync, execCLI, openCommand } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppTitle,\n    writeCleanFile,\n    getAppId,\n    getAppTemplateFolder,\n    getConfigProp,\n    waitForEmulator,\n    waitForWebpack,\n    checkPortInUse,\n    confirmActiveBundler\n} from '../../common';\nimport { isPlatformActive } from '..';\nimport { logToSummary, logTask, logInfo, logSuccess } from '../../systemTools/logger';\nimport { copyBuildsFolder, copyAssetsFolder } from '../../projectTools/projectParser';\nimport {\n    CLI_WEBOS_ARES_PACKAGE,\n    CLI_WEBOS_ARES_INSTALL,\n    CLI_WEBOS_ARES_DEVICE_INFO,\n    CLI_WEBOS_ARES_LAUNCH,\n    CLI_WEBOS_ARES_NOVACOM,\n    CLI_WEBOS_ARES_SETUP_DEVICE\n} from '../../constants';\nimport { getRealPath } from '../../systemTools/fileutils';\nimport { buildWeb, configureCoreWebProject } from '../web';\nimport { rnvStart } from '../runner';\nimport Config from '../../config';\nimport { isSystemWin } from '../../utils';\n\nconst launchWebOSimulator = (c) => {\n    logTask('launchWebOSimulator');\n\n    const ePath = path.join(getRealPath(c, c.files.workspace.config.sdks.WEBOS_SDK), `Emulator/v4.0.0/LG_webOS_TV_Emulator${isSystemWin ? '.exe' : '_RCU.app'}`);\n\n    if (!fs.existsSync(ePath)) {\n        return Promise.reject(`Can't find emulator at path: ${ePath}`);\n    }\n    if (isSystemWin) return executeAsync(c, ePath, { detached: true, stdio: 'ignore' });\n    return executeAsync(c, `${openCommand} ${ePath}`, { detached: true });\n};\n\nconst startHostedServerIfRequired = (c) => {\n    if (Config.isWebHostEnabled) {\n        return rnvStart(c);\n    }\n};\n\nconst parseDevices = (c, devicesResponse) => {\n    const linesArray = devicesResponse.split('\\n').slice(2).map(line => line.trim()).filter(line => line !== '');\n    return Promise.all(linesArray.map(async (line) => {\n        const [name, device, connection, profile] = line.split(' ').map(word => word.trim()).filter(word => word !== '');\n        let deviceInfo = '';\n        try {\n            deviceInfo = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, `-d ${name}`, { silent: true, timeout: 10000 });\n        } catch (e) {\n            deviceInfo = e;\n        }\n\n        return {\n            name,\n            device,\n            connection,\n            profile,\n            isDevice: !device.includes(c.runtime.localhost),\n            active: !deviceInfo.includes('ERR!')\n        };\n    }));\n};\n\nconst installAndLaunchApp = async (c, target, appPath, tId) => {\n    try {\n        await execCLI(c, CLI_WEBOS_ARES_INSTALL, `--device ${target} ${appPath}`);\n    } catch (e) {\n        // installing it again if it fails. For some reason webosCLI says that it can't connect to\n        // the device from time to time. Running it again works.\n        await execCLI(c, CLI_WEBOS_ARES_INSTALL, `--device ${target} ${appPath}`);\n    }\n    const { hosted } = c.program;\n    const { platform } = c;\n    const isHosted = hosted || !getConfigProp(c, platform, 'bundleAssets');\n    let toReturn = true;\n    if (isHosted) {\n        toReturn = startHostedServerIfRequired(c);\n        await waitForWebpack(c);\n    }\n    await execCLI(c, CLI_WEBOS_ARES_LAUNCH, `--device ${target} ${tId}`);\n    return toReturn;\n};\n\nconst buildDeviceChoices = devices => devices.map(device => ({\n    key: device.name, name: `${device.name} - ${device.device}`, value: device.name\n}));\n\nconst listWebOSTargets = async (c) => {\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n\n    const deviceArray = devices.map((device, i) => ` [${i + 1}]> ${chalk.bold(device.name)} | ${device.device}`);\n\n    logToSummary(`WebOS Targets:\\n${deviceArray.join('\\n')}`);\n\n    return true;\n};\n\nconst waitForEmulatorToBeReady = async (c) => {\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n    const emulator = devices.filter(d => !d.isDevice)[0];\n    if (!emulator) throw new Error('No WebOS emulator configured');\n\n    return waitForEmulator(c, CLI_WEBOS_ARES_DEVICE_INFO, `-d ${emulator.name}`, res => res.includes('modelName'));\n};\n\nconst runWebOS = async (c, platform, target) => {\n    logTask(`runWebOS:${platform}:${target}`);\n\n    const { device, hosted } = c.program;\n\n    const isHosted = hosted || !getConfigProp(c, platform, 'bundleAssets');\n\n    const tDir = path.join(getAppFolder(c, platform), 'public');\n    const tOut = path.join(getAppFolder(c, platform), 'output');\n    const tSim = c.program.target || 'emulator';\n    const configFilePath = path.join(getAppFolder(c, platform), 'public/appinfo.json');\n\n    logTask(`runWebOS:${platform}:${target}:${isHosted}`, chalk.grey);\n\n    const cnfg = JSON.parse(fs.readFileSync(configFilePath, 'utf-8'));\n    const tId = cnfg.id;\n    const appPath = path.join(tOut, `${tId}_${cnfg.version}_all.ipk`);\n\n    if (isHosted) {\n        const isPortActive = await checkPortInUse(c, platform, c.runtime.port);\n        if (isPortActive) {\n            await confirmActiveBundler(c);\n            c.runtime.skipActiveServerCheck = true;\n        }\n    }\n\n    // Start the fun\n    !isHosted && await buildWeb(c, platform);\n    await execCLI(c, CLI_WEBOS_ARES_PACKAGE, `-o ${tOut} ${tDir} -n`);\n\n    // List all devices\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n    const activeDevices = devices.filter(d => d.active);\n\n    if (device) {\n        // Running on a device\n        const actualDevices = devices.filter(d => d.isDevice);\n\n        if (!actualDevices.length) {\n            // No device configured. Asking to configure\n            const response = await inquirer.prompt([{\n                type: 'confirm',\n                name: 'setupDevice',\n                message: 'Looks like you want to deploy on a device but have none configured. Do you want to configure one?',\n                default: false\n            }]);\n\n            if (response.setupDevice) {\n                // Yes, I would like that\n                logInfo('Please follow the instructions from http://webostv.developer.lge.com/develop/app-test/#installDevModeApp on how to setup the TV and the connection with the PC. Then follow the onscreen prompts\\n');\n                await execCLI(c, CLI_WEBOS_ARES_SETUP_DEVICE, '', { interactive: true });\n\n                const newDeviceResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n                const dev = await parseDevices(c, newDeviceResponse);\n                const actualDev = dev.filter(d => d.isDevice);\n\n                if (actualDev.length > 0) {\n                    const newDevice = actualDev[0];\n                    // Oh boy, oh boy, I did it! I have a TV connected!\n                    logInfo('Please enter the `Passphrase` from the TV\\'s Developer Mode app');\n                    await execCLI(c, CLI_WEBOS_ARES_NOVACOM, `--device ${newDevice.name} --getkey`, { stdio: 'inherit' });\n                    return installAndLaunchApp(c, newDevice.name, appPath, tId);\n                }\n                // Yes, I said I would but I didn't\n                // @todo handle user not setting up the device\n            }\n        } else if (actualDevices.length === 1) {\n            const tv = actualDevices[0];\n            return installAndLaunchApp(c, tv.name, appPath, tId);\n        }\n    } else if (!c.program.target) {\n        // No target specified\n        if (activeDevices.length === 1) {\n            // One device present\n            return installAndLaunchApp(c, devices[0].name, appPath, tId);\n        }\n        if (activeDevices.length > 1) {\n            // More than one, choosing\n            const choices = buildDeviceChoices(devices);\n            const response = await inquirer.prompt([{\n                name: 'chosenDevice',\n                type: 'list',\n                message: 'What device would you like to start the app?',\n                choices\n            }]);\n            if (response.chosenDevice) {\n                return installAndLaunchApp(c, response.chosenDevice, appPath, tId);\n            }\n        } else {\n            await launchWebOSimulator(c);\n            await waitForEmulatorToBeReady(c);\n            return installAndLaunchApp(c, tSim, appPath, tId);\n        }\n    } else {\n        // Target specified, using that\n        return installAndLaunchApp(c, c.program.target, appPath, tId);\n    }\n};\n\n\nconst buildWebOSProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`buildWebOSProject:${platform}`);\n\n    const tDir = path.join(getAppFolder(c, platform), 'public');\n    const tOut = path.join(getAppFolder(c, platform), 'output');\n\n    buildWeb(c, platform)\n        .then(() => execCLI(c, CLI_WEBOS_ARES_PACKAGE, `-o ${tOut} ${tDir} -n`))\n        .then(() => {\n            logSuccess(`Your IPK package is located in ${chalk.white(tOut)} .`);\n            return resolve();\n        })\n        .catch(reject);\n});\n\nconst configureWebOSProject = async (c, platform) => {\n    logTask('configureWebOSProject');\n\n    if (!isPlatformActive(c, platform)) return;\n\n    await copyAssetsFolder(c, platform);\n    await configureCoreWebProject(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\n\nconst configureProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`configureProject:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    const configFile = 'public/appinfo.json';\n    writeCleanFile(path.join(getAppTemplateFolder(c, platform), configFile), path.join(appFolder, configFile), [\n        { pattern: '{{APPLICATION_ID}}', override: getAppId(c, platform).toLowerCase() },\n        { pattern: '{{APP_TITLE}}', override: getAppTitle(c, platform) },\n        { pattern: '{{APP_VERSION}}', override: semver.coerce(getAppVersion(c, platform)) },\n    ]);\n\n    resolve();\n});\n\nexport { launchWebOSimulator, configureWebOSProject, runWebOS, buildWebOSProject, listWebOSTargets };\n"],"file":"index.js"}