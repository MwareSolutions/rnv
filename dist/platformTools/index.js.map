{"version":3,"file":"index.js","names":["rnvPlatformList","c","Promise","resolve","reject","opts","_genPlatOptions","logToSummary","asString","rnvPlatformConfigure","logTask","platform","isPlatformSupported","cleanPlatformBuild","cleanPlaformAssets","_runCopyPlatforms","updateProjectPlatforms","platforms","config","paths","project","currentConfig","files","defaults","supportedPlatforms","writeFileSync","rnvPlatformSetup","currentPlatforms","inquirer","prompt","name","type","pageSize","message","validate","val","length","default","choices","SUPPORTED_PLATFORMS","inputSupportedPlatforms","_generatePlatformChoices","buildConfig","map","isConnected","platformTemplatesDirs","includes","rnv","platformTemplates","dir","chalk","green","yellow","value","rnvPlatformEject","choice","disabled","ejectedPlatforms","ptfn","rptf","prf","copyShared","forEach","PLATFORMS","requiresSharedConfig","copyFolderContentsRecursiveSync","path","join","logSuccess","white","generateOptions","i","obj","mapping","defaultVal","isEjected","bold","rnvPlatformConnect","connectedPlatforms","Object","keys","deletePlatformFolder","pathsToRemove","push","removeDirs","copyPlatformTasks","k","_isPlatformSupportedSync","ptPath","pPath","builds","runtime","appId","logWarning","appConfig","all","then","values","cleanTasks","cleanFolder","createPlatformBuild","platformsAsObj","inquirerPrompt","keysAsArray","logMessage","configuredPlatforms","Array","isArray","confirm","newPlatforms","configureEntryPoints","Error","checkAndConfigureSdks","red","isPlatformActive","logError","console","log"],"sources":["../../src/platformTools/index.js"],"sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport chalk from 'chalk';\nimport path from 'path';\nimport inquirer from 'inquirer';\n\nimport { logToSummary, logTask, logSuccess } from '../systemTools/logger';\nimport { generateOptions, inquirerPrompt } from '../systemTools/prompt';\nimport { cleanFolder, copyFolderContentsRecursiveSync, writeFileSync, removeDirs } from '../systemTools/fileutils';\nimport { cleanPlaformAssets } from '../projectTools/projectParser';\nimport { PLATFORMS, SUPPORTED_PLATFORMS } from '../constants';\nimport { checkAndConfigureSdks } from './sdkManager';\nimport { configureEntryPoints } from '../templateTools';\n\nexport const rnvPlatformList = c => new Promise((resolve, reject) => {\n    const opts = _genPlatOptions(c);\n    logToSummary(`Platforms:\\n\\n${opts.asString}`);\n    resolve();\n});\n\nexport const rnvPlatformConfigure = async (c) => {\n    // c.platform = c.program.platform || 'all';\n    logTask(`rnvPlatformConfigure:${c.platform}`);\n\n    await isPlatformSupported(c);\n    await cleanPlatformBuild(c, c.platform);\n    await cleanPlaformAssets(c, c.platform);\n    await _runCopyPlatforms(c, c.platform);\n};\n\nconst updateProjectPlatforms = (c, platforms) => {\n    const { project: { config } } = c.paths;\n    const currentConfig = c.files.project.config;\n    currentConfig.defaults = currentConfig.defaults || {};\n    currentConfig.defaults.supportedPlatforms = platforms;\n    writeFileSync(config, currentConfig);\n};\n\nexport const rnvPlatformSetup = async (c) => {\n    const currentPlatforms = c.files.project.config.defaults?.supportedPlatforms || [];\n\n    const {\n        inputSupportedPlatforms\n    } = await inquirer.prompt({\n        name: 'inputSupportedPlatforms',\n        type: 'checkbox',\n        pageSize: 20,\n        message: 'What platforms would you like to use?',\n        validate: val => !!val.length || 'Please select at least a platform',\n        default: currentPlatforms,\n        choices: SUPPORTED_PLATFORMS\n    });\n\n    updateProjectPlatforms(c, inputSupportedPlatforms);\n};\n\nconst _generatePlatformChoices = c => c.buildConfig.defaults.supportedPlatforms.map((platform) => {\n    const isConnected = c.paths.project.platformTemplatesDirs[platform].includes(c.paths.rnv.platformTemplates.dir);\n    return { name: `${platform} - ${isConnected ? chalk.green('(connected)') : chalk.yellow('(ejected)')}`, value: platform, isConnected };\n});\n\nexport const rnvPlatformEject = async (c) => {\n    logTask('rnvPlatformEject');\n\n    const { ejectedPlatforms } = await inquirer.prompt({\n        name: 'ejectedPlatforms',\n        message: 'This will copy platformTemplates folders from ReNative managed directly to your project Select platforms you would like to connect',\n        type: 'checkbox',\n        choices: _generatePlatformChoices(c).map(choice => ({ ...choice, disabled: !choice.isConnected }))\n    });\n\n    if (ejectedPlatforms.length) {\n        const ptfn = 'platformTemplates';\n        const rptf = c.paths.rnv.platformTemplates.dir;\n        const prf = c.paths.project.dir;\n\n        let copyShared = false;\n\n        ejectedPlatforms.forEach((platform) => {\n            if (PLATFORMS[platform].requiresSharedConfig) {\n                copyShared = true;\n            }\n\n            copyFolderContentsRecursiveSync(path.join(rptf, platform), path.join(prf, ptfn, platform));\n\n            if (copyShared) {\n                copyFolderContentsRecursiveSync(path.join(rptf, '_shared'), path.join(prf, ptfn, '_shared'));\n            }\n\n            c.files.project.config.platformTemplatesDirs = c.files.project.config.platformTemplatesDirs || {};\n            c.files.project.config.platformTemplatesDirs[platform] = `./${ptfn}`;\n\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n    }\n\n    logSuccess(\n        `${chalk.white(ejectedPlatforms.join(','))} platform templates are located in ${chalk.white(\n            c.files.project.config.platformTemplatesDirs[ejectedPlatforms[0]]\n        )} now. You can edit them directly!`\n    );\n};\n\nconst _genPlatOptions = (c) => {\n    const opts = generateOptions(c.buildConfig.defaults.supportedPlatforms, true, null, (i, obj, mapping, defaultVal) => {\n        const isEjected = c.paths.project.platformTemplatesDirs[obj].includes(c.paths.rnv.platformTemplates.dir) ? chalk.green('(connected)') : chalk.yellow('(ejected)');\n        return ` [${chalk.white(i + 1)}]> ${chalk.bold(defaultVal)} - ${isEjected} \\n`;\n    });\n    return opts;\n};\n\nexport const rnvPlatformConnect = async (c) => {\n    logTask('rnvPlatformConnect');\n\n    const { connectedPlatforms } = await inquirer.prompt({\n        name: 'connectedPlatforms',\n        message: 'This will point platformTemplates folders from your local project to ReNative managed one. Select platforms you would like to connect',\n        type: 'checkbox',\n        choices: _generatePlatformChoices(c).map(choice => ({ ...choice, disabled: choice.isConnected }))\n    });\n\n\n    if (connectedPlatforms.length) {\n        connectedPlatforms.forEach((platform) => {\n            if (c.files.project.config.platformTemplatesDirs?.[platform]) {\n                delete c.files.project.config.platformTemplatesDirs[platform];\n            }\n\n            if (!Object.keys(c.files.project.config.platformTemplatesDirs).length) {\n                delete c.files.project.config.platformTemplatesDirs; // also cleanup the empty object\n            }\n\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n    }\n\n    const { deletePlatformFolder } = await inquirer.prompt({\n        name: 'deletePlatformFolder',\n        type: 'confirm',\n        message: 'Would you also like to delete the previously used platform folder?'\n    });\n\n    if (deletePlatformFolder) {\n        const pathsToRemove = [];\n        connectedPlatforms.forEach((platform) => {\n            pathsToRemove.push(path.join(c.paths.project.platformTemplatesDirs[platform], platform));\n        });\n\n        // TODO: Remove shared folders as well\n\n        await removeDirs(pathsToRemove);\n    }\n\n    logSuccess(\n        `${chalk.white(connectedPlatforms.join(','))} now using ReNative platformTemplates located in ${chalk.white(c.paths.rnv.platformTemplates.dir)} now!`\n    );\n};\n\nconst _runCopyPlatforms = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`_runCopyPlatforms:${platform}`);\n    const copyPlatformTasks = [];\n    if (platform === 'all') {\n        for (const k in c.buildConfig.platforms) {\n            if (_isPlatformSupportedSync(k)) {\n                const ptPath = path.join(c.paths.project.platformTemplatesDirs[k], `${k}`);\n                const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${k}`);\n                copyPlatformTasks.push(copyFolderContentsRecursiveSync(ptPath, pPath));\n            }\n        }\n    } else if (_isPlatformSupportedSync(platform)) {\n        const ptPath = path.join(c.paths.project.platformTemplatesDirs[platform], `${platform}`);\n        const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n        copyPlatformTasks.push(copyFolderContentsRecursiveSync(ptPath, pPath));\n    } else {\n        logWarning(`Your platform ${chalk.white(platform)} config is not present. Check ${chalk.white(c.paths.appConfig.config)}`);\n    }\n\n    Promise.all(copyPlatformTasks).then((values) => {\n        resolve();\n    });\n});\n\nexport const cleanPlatformBuild = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`cleanPlatformBuild:${platform}`);\n\n    const cleanTasks = [];\n\n    if (platform === 'all') {\n        for (const k in c.buildConfig.platforms) {\n            if (_isPlatformSupportedSync(k)) {\n                const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${k}`);\n                cleanTasks.push(cleanFolder(pPath));\n            }\n        }\n    } else if (_isPlatformSupportedSync(platform)) {\n        const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n        cleanTasks.push(cleanFolder(pPath));\n    }\n\n    Promise.all(cleanTasks).then((values) => {\n        resolve();\n    });\n});\n\nexport const createPlatformBuild = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`createPlatformBuild:${platform}`);\n\n    if (!_isPlatformSupportedSync(platform, null, reject)) return;\n\n    const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n    const ptPath = path.join(c.paths.project.platformTemplatesDirs[platform], `${platform}`);\n    copyFolderContentsRecursiveSync(ptPath, pPath, false, [path.join(ptPath, '_privateConfig')]);\n\n    resolve();\n});\n\nexport const isPlatformSupported = async (c) => {\n    logTask(`isPlatformSupported:${c.platform}`);\n    let platformsAsObj = c.buildConfig ? c.buildConfig.platforms : c.supportedPlatforms;\n    if (!platformsAsObj) platformsAsObj = SUPPORTED_PLATFORMS;\n    const opts = generateOptions(platformsAsObj);\n\n    if (!c.platform || c.platform === true || !SUPPORTED_PLATFORMS.includes(c.platform)) {\n        const { platform } = await inquirerPrompt({\n            name: 'platform',\n            type: 'list',\n            message: 'Pick one of available platforms',\n            choices: opts.keysAsArray,\n            logMessage: 'You need to specify platform'\n        });\n\n        c.platform = platform;\n    }\n\n    const configuredPlatforms = c.files.project.config?.defaults?.supportedPlatforms;\n    if (Array.isArray(configuredPlatforms) && !configuredPlatforms.includes(c.platform)) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `Looks like platform ${c.platform} is not supported by your project. Would you like to enable it?`\n        });\n\n        if (confirm) {\n            const newPlatforms = [...configuredPlatforms, c.platform];\n            updateProjectPlatforms(c, newPlatforms);\n            c.buildConfig.defaults.supportedPlatforms = newPlatforms;\n            await configureEntryPoints(c);\n        } else {\n            throw new Error('User canceled');\n        }\n    }\n\n    // Check global SDKs\n    await checkAndConfigureSdks(c);\n    return c.platform;\n};\n\nconst _isPlatformSupportedSync = (platform, resolve, reject) => {\n    if (!platform) {\n        if (reject) {\n            reject(\n                chalk.red(\n                    `You didn't specify platform. make sure you add \"${chalk.white.bold(\n                        '-p <PLATFORM>',\n                    )}\" option to your command!`,\n                ),\n            );\n        }\n        return false;\n    }\n    if (!SUPPORTED_PLATFORMS.includes(platform)) {\n        if (reject) reject(chalk.red(`Platform ${platform} is not supported. Use one of the following: ${chalk.white(SUPPORTED_PLATFORMS.join(', '))} .`));\n        return false;\n    }\n    if (resolve) resolve();\n    return true;\n};\n\nexport const isPlatformActive = (c, platform, resolve) => {\n    if (!c.buildConfig || !c.buildConfig.platforms) {\n        logError(`Looks like your appConfigFile is not configured properly! check ${chalk.white(c.paths.appConfig.config)} location.`);\n        if (resolve) resolve();\n        return false;\n    }\n    if (!c.buildConfig.platforms[platform]) {\n        console.log(`Platform ${platform} not configured for ${c.runtime.appId}. skipping.`);\n        if (resolve) resolve();\n        return false;\n    }\n    return true;\n};\n"],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAAwD;;AAEjD,GAAMA,gBAAe,CAAG,QAAlBA,gBAAe,CAAGC,CAAC,QAAI,IAAIC,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK;AACjE,GAAMC,KAAI,CAAGC,eAAe,CAACL,CAAC,CAAC;AAC/B,GAAAM,oBAAY,mBAAkBF,IAAI,CAACG,QAAQ,CAAG;AAC9CL,OAAO,EAAE;AACb,CAAC,CAAC,GAAC;;AAEI,GAAMM,qBAAoB,CAAG,QAAvBA,qBAAoB,CAAUR,CAAC;;AAExC,GAAAS,eAAO,0BAAyBT,CAAC,CAACU,QAAQ,CAAG,CAAC;;AAExCC,mBAAmB,CAACX,CAAC,CAAC;AACtBY,kBAAkB,CAACZ,CAAC,CAAEA,CAAC,CAACU,QAAQ,CAAC;AACjC,GAAAG,iCAAkB,EAACb,CAAC,CAAEA,CAAC,CAACU,QAAQ,CAAC;AACjCI,iBAAiB,CAACd,CAAC,CAAEA,CAAC,CAACU,QAAQ,CAAC,sEACzC,CAAC;;;AAEF,GAAMK,uBAAsB,CAAG,QAAzBA,uBAAsB,CAAIf,CAAC,CAAEgB,SAAS,CAAK;AAC7C,GAAmBC,OAAM,CAAOjB,CAAC,CAACkB,KAAK,CAA/BC,OAAO,CAAIF,MAAM;AACzB,GAAMG,cAAa,CAAGpB,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM;AAC5CG,aAAa,CAACE,QAAQ,CAAGF,aAAa,CAACE,QAAQ,EAAI,CAAC,CAAC;AACrDF,aAAa,CAACE,QAAQ,CAACC,kBAAkB,CAAGP,SAAS;AACrD,GAAAQ,wBAAa,EAACP,MAAM,CAAEG,aAAa,CAAC;AACxC,CAAC;;AAEM,GAAMK,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAUzB,CAAC;AAC9B0B,gBAAgB,CAAG,wBAAA1B,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAACK,QAAQ,eAA/B,sBAAiCC,kBAAkB,GAAI,EAAE;;;;AAIxEI,iBAAQ,CAACC,MAAM,CAAC;AACtBC,IAAI,CAAE,yBAAyB;AAC/BC,IAAI,CAAE,UAAU;AAChBC,QAAQ,CAAE,EAAE;AACZC,OAAO,CAAE,uCAAuC;AAChDC,QAAQ,CAAE,kBAAAC,GAAG,QAAI,CAAC,CAACA,GAAG,CAACC,MAAM,EAAI,mCAAmC;AACpEC,OAAO,CAAEV,gBAAgB;AACzBW,OAAO,CAAEC;AACb,CAAC,CAAC,8CATEC,uBAAuB,uBAAvBA,uBAAuB;;AAW3BxB,sBAAsB,CAACf,CAAC,CAAEuC,uBAAuB,CAAC,CAAC,qEACtD,CAAC;;;AAEF,GAAMC,yBAAwB,CAAG,QAA3BA,yBAAwB,CAAGxC,CAAC,QAAIA,EAAC,CAACyC,WAAW,CAACnB,QAAQ,CAACC,kBAAkB,CAACmB,GAAG,CAAC,SAAChC,QAAQ,CAAK;AAC9F,GAAMiC,YAAW,CAAG3C,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACyB,qBAAqB,CAAClC,QAAQ,CAAC,CAACmC,QAAQ,CAAC7C,CAAC,CAACkB,KAAK,CAAC4B,GAAG,CAACC,iBAAiB,CAACC,GAAG,CAAC;AAC/G,MAAO,CAAEnB,IAAI,CAAKnB,QAAQ,QAAMiC,WAAW,CAAGM,cAAK,CAACC,KAAK,CAAC,aAAa,CAAC,CAAGD,cAAK,CAACE,MAAM,CAAC,WAAW,CAAC,CAAE,CAAEC,KAAK,CAAE1C,QAAQ,CAAEiC,WAAW,CAAXA,WAAY,CAAC;AAC1I,CAAC,CAAC;;AAEK,GAAMU,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAUrD,CAAC;AACpC,GAAAS,eAAO,EAAC,kBAAkB,CAAC,CAAC;;AAEOkB,iBAAQ,CAACC,MAAM,CAAC;AAC/CC,IAAI,CAAE,kBAAkB;AACxBG,OAAO,CAAE,oIAAoI;AAC7IF,IAAI,CAAE,UAAU;AAChBO,OAAO,CAAEG,wBAAwB,CAACxC,CAAC,CAAC,CAAC0C,GAAG,CAAC,SAAAY,MAAM,wCAAUA,MAAM,MAAEC,QAAQ,CAAE,CAACD,MAAM,CAACX,WAAW,IAAG;AACrG,CAAC,CAAC,+CALMa,gBAAgB,wBAAhBA,gBAAgB;;AAOxB,GAAIA,gBAAgB,CAACrB,MAAM,CAAE;AACnBsB,IAAI,CAAG,mBAAmB;AAC1BC,IAAI,CAAG1D,CAAC,CAACkB,KAAK,CAAC4B,GAAG,CAACC,iBAAiB,CAACC,GAAG;AACxCW,GAAG,CAAG3D,CAAC,CAACkB,KAAK,CAACC,OAAO,CAAC6B,GAAG;;AAE3BY,UAAU,CAAG,KAAK;;AAEtBJ,gBAAgB,CAACK,OAAO,CAAC,SAACnD,QAAQ,CAAK;AACnC,GAAIoD,oBAAS,CAACpD,QAAQ,CAAC,CAACqD,oBAAoB,CAAE;AAC1CH,UAAU,CAAG,IAAI;AACrB;;AAEA,GAAAI,0CAA+B,EAACC,aAAI,CAACC,IAAI,CAACR,IAAI,CAAEhD,QAAQ,CAAC,CAAEuD,aAAI,CAACC,IAAI,CAACP,GAAG,CAAEF,IAAI,CAAE/C,QAAQ,CAAC,CAAC;;AAE1F,GAAIkD,UAAU,CAAE;AACZ,GAAAI,0CAA+B,EAACC,aAAI,CAACC,IAAI,CAACR,IAAI,CAAE,SAAS,CAAC,CAAEO,aAAI,CAACC,IAAI,CAACP,GAAG,CAAEF,IAAI,CAAE,SAAS,CAAC,CAAC;AAChG;;AAEAzD,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,CAAG5C,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,EAAI,CAAC,CAAC;AACjG5C,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,CAAClC,QAAQ,CAAC,MAAQ+C,IAAM;;AAEpE,GAAAjC,wBAAa,EAACxB,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACF,MAAM,CAAEjB,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC;AACjE,CAAC,CAAC;AACN;;AAEA,GAAAkD,kBAAU;AACHlB,cAAK,CAACmB,KAAK,CAACZ,gBAAgB,CAACU,IAAI,CAAC,GAAG,CAAC,CAAC,uCAAsCjB,cAAK,CAACmB,KAAK;AACvFpE,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,CAACY,gBAAgB,CAAC,CAAC,CAAC,CAAC,CACpE,qCACJ,CAAC,qEACL,CAAC;;;;;AAEF,GAAMnD,gBAAe,CAAG,QAAlBA,gBAAe,CAAIL,CAAC,CAAK;AAC3B,GAAMI,KAAI,CAAG,GAAAiE,uBAAe,EAACrE,CAAC,CAACyC,WAAW,CAACnB,QAAQ,CAACC,kBAAkB,CAAE,IAAI,CAAE,IAAI,CAAE,SAAC+C,CAAC,CAAEC,GAAG,CAAEC,OAAO,CAAEC,UAAU,CAAK;AACjH,GAAMC,UAAS,CAAG1E,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACyB,qBAAqB,CAAC2B,GAAG,CAAC,CAAC1B,QAAQ,CAAC7C,CAAC,CAACkB,KAAK,CAAC4B,GAAG,CAACC,iBAAiB,CAACC,GAAG,CAAC,CAAGC,cAAK,CAACC,KAAK,CAAC,aAAa,CAAC,CAAGD,cAAK,CAACE,MAAM,CAAC,WAAW,CAAC;AACjK,WAAYF,cAAK,CAACmB,KAAK,CAACE,CAAC,CAAG,CAAC,CAAC,OAAMrB,cAAK,CAAC0B,IAAI,CAACF,UAAU,CAAC,OAAMC,SAAS;AAC7E,CAAC,CAAC;AACF,MAAOtE,KAAI;AACf,CAAC;;AAEM,GAAMwE,mBAAkB,CAAG,QAArBA,mBAAkB,CAAU5E,CAAC;AACtC,GAAAS,eAAO,EAAC,oBAAoB,CAAC,CAAC;;AAEOkB,iBAAQ,CAACC,MAAM,CAAC;AACjDC,IAAI,CAAE,oBAAoB;AAC1BG,OAAO,CAAE,uIAAuI;AAChJF,IAAI,CAAE,UAAU;AAChBO,OAAO,CAAEG,wBAAwB,CAACxC,CAAC,CAAC,CAAC0C,GAAG,CAAC,SAAAY,MAAM,wCAAUA,MAAM,MAAEC,QAAQ,CAAED,MAAM,CAACX,WAAW,IAAG;AACpG,CAAC,CAAC,+CALMkC,kBAAkB,wBAAlBA,kBAAkB;;;AAQ1B,GAAIA,kBAAkB,CAAC1C,MAAM,CAAE;AAC3B0C,kBAAkB,CAAChB,OAAO,CAAC,SAACnD,QAAQ,CAAK;AACrC,2BAAIV,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,SAA5C,uBAA+ClC,QAAQ,CAAC,CAAE;AAC1D,MAAOV,EAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,CAAClC,QAAQ,CAAC;AACjE;;AAEA,GAAI,CAACoE,MAAM,CAACC,IAAI,CAAC/E,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB,CAAC,CAACT,MAAM,CAAE;AACnE,MAAOnC,EAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC2B,qBAAqB;AACvD;;AAEA,GAAApB,wBAAa,EAACxB,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACF,MAAM,CAAEjB,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,CAAC;AACjE,CAAC,CAAC;AACN,CAAC;;AAEsCU,iBAAQ,CAACC,MAAM,CAAC;AACnDC,IAAI,CAAE,sBAAsB;AAC5BC,IAAI,CAAE,SAAS;AACfE,OAAO,CAAE;AACb,CAAC,CAAC,+CAJMgD,oBAAoB,wBAApBA,oBAAoB;;AAMxBA,oBAAoB;AACdC,aAAa,CAAG,EAAE;AACxBJ,kBAAkB,CAAChB,OAAO,CAAC,SAACnD,QAAQ,CAAK;AACrCuE,aAAa,CAACC,IAAI,CAACjB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACyB,qBAAqB,CAAClC,QAAQ,CAAC,CAAEA,QAAQ,CAAC,CAAC;AAC5F,CAAC,CAAC,CAAC;;;;AAIG,GAAAyE,qBAAU,EAACF,aAAa,CAAC;;;AAGnC,GAAAd,kBAAU;AACHlB,cAAK,CAACmB,KAAK,CAACS,kBAAkB,CAACX,IAAI,CAAC,GAAG,CAAC,CAAC,qDAAoDjB,cAAK,CAACmB,KAAK,CAACpE,CAAC,CAACkB,KAAK,CAAC4B,GAAG,CAACC,iBAAiB,CAACC,GAAG,CAAC,SACjJ,CAAC,sEACL,CAAC;;;;AAEF,GAAMlC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAId,CAAC,CAAEU,QAAQ,QAAK,IAAIT,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK;AACxE,GAAAM,eAAO,uBAAsBC,QAAQ,CAAG;AACxC,GAAM0E,kBAAiB,CAAG,EAAE;AAC5B,GAAI1E,QAAQ,GAAK,KAAK,CAAE;AACpB,IAAK,GAAM2E,EAAC,GAAIrF,EAAC,CAACyC,WAAW,CAACzB,SAAS,CAAE;AACrC,GAAIsE,wBAAwB,CAACD,CAAC,CAAC,CAAE;AAC7B,GAAME,OAAM,CAAGtB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACyB,qBAAqB,CAACyC,CAAC,CAAC,IAAKA,CAAC,CAAG;AAC1E,GAAMG,MAAK,CAAGvB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACsE,MAAM,CAACzC,GAAG,CAAKhD,CAAC,CAAC0F,OAAO,CAACC,KAAK,KAAIN,CAAC,CAAG;AAC9ED,iBAAiB,CAACF,IAAI,CAAC,GAAAlB,0CAA+B,EAACuB,MAAM,CAAEC,KAAK,CAAC,CAAC;AAC1E;AACJ;AACJ,CAAC,IAAM,IAAIF,wBAAwB,CAAC5E,QAAQ,CAAC,CAAE;AAC3C,GAAM6E,QAAM,CAAGtB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACyB,qBAAqB,CAAClC,QAAQ,CAAC,IAAKA,QAAQ,CAAG;AACxF,GAAM8E,OAAK,CAAGvB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACsE,MAAM,CAACzC,GAAG,CAAKhD,CAAC,CAAC0F,OAAO,CAACC,KAAK,KAAIjF,QAAQ,CAAG;AACrF0E,iBAAiB,CAACF,IAAI,CAAC,GAAAlB,0CAA+B,EAACuB,OAAM,CAAEC,MAAK,CAAC,CAAC;AAC1E,CAAC,IAAM;AACHI,UAAU,kBAAkB3C,cAAK,CAACmB,KAAK,CAAC1D,QAAQ,CAAC,kCAAiCuC,cAAK,CAACmB,KAAK,CAACpE,CAAC,CAACkB,KAAK,CAAC2E,SAAS,CAAC5E,MAAM,CAAC,CAAG;AAC9H;;AAEAhB,OAAO,CAAC6F,GAAG,CAACV,iBAAiB,CAAC,CAACW,IAAI,CAAC,SAACC,MAAM,CAAK;AAC5C9F,OAAO,EAAE;AACb,CAAC,CAAC;AACN,CAAC,CAAC;;AAEK,GAAMU,mBAAkB,CAAG,QAArBA,mBAAkB,CAAIZ,CAAC,CAAEU,QAAQ,QAAK,IAAIT,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK;AAChF,GAAAM,eAAO,wBAAuBC,QAAQ,CAAG;;AAEzC,GAAMuF,WAAU,CAAG,EAAE;;AAErB,GAAIvF,QAAQ,GAAK,KAAK,CAAE;AACpB,IAAK,GAAM2E,EAAC,GAAIrF,EAAC,CAACyC,WAAW,CAACzB,SAAS,CAAE;AACrC,GAAIsE,wBAAwB,CAACD,CAAC,CAAC,CAAE;AAC7B,GAAMG,MAAK,CAAGvB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACsE,MAAM,CAACzC,GAAG,CAAKhD,CAAC,CAAC0F,OAAO,CAACC,KAAK,KAAIN,CAAC,CAAG;AAC9EY,UAAU,CAACf,IAAI,CAAC,GAAAgB,sBAAW,EAACV,KAAK,CAAC,CAAC;AACvC;AACJ;AACJ,CAAC,IAAM,IAAIF,wBAAwB,CAAC5E,QAAQ,CAAC,CAAE;AAC3C,GAAM8E,QAAK,CAAGvB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACsE,MAAM,CAACzC,GAAG,CAAKhD,CAAC,CAAC0F,OAAO,CAACC,KAAK,KAAIjF,QAAQ,CAAG;AACrFuF,UAAU,CAACf,IAAI,CAAC,GAAAgB,sBAAW,EAACV,OAAK,CAAC,CAAC;AACvC;;AAEAvF,OAAO,CAAC6F,GAAG,CAACG,UAAU,CAAC,CAACF,IAAI,CAAC,SAACC,MAAM,CAAK;AACrC9F,OAAO,EAAE;AACb,CAAC,CAAC;AACN,CAAC,CAAC,GAAC;;AAEI,GAAMiG,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAInG,CAAC,CAAEU,QAAQ,QAAK,IAAIT,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK;AACjF,GAAAM,eAAO,yBAAwBC,QAAQ,CAAG;;AAE1C,GAAI,CAAC4E,wBAAwB,CAAC5E,QAAQ,CAAE,IAAI,CAAEP,MAAM,CAAC,CAAE;;AAEvD,GAAMqF,MAAK,CAAGvB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACsE,MAAM,CAACzC,GAAG,CAAKhD,CAAC,CAAC0F,OAAO,CAACC,KAAK,KAAIjF,QAAQ,CAAG;AACrF,GAAM6E,OAAM,CAAGtB,aAAI,CAACC,IAAI,CAAClE,CAAC,CAACkB,KAAK,CAACC,OAAO,CAACyB,qBAAqB,CAAClC,QAAQ,CAAC,IAAKA,QAAQ,CAAG;AACxF,GAAAsD,0CAA+B,EAACuB,MAAM,CAAEC,KAAK,CAAE,KAAK,CAAE,CAACvB,aAAI,CAACC,IAAI,CAACqB,MAAM,CAAE,gBAAgB,CAAC,CAAC,CAAC;;AAE5FrF,OAAO,EAAE;AACb,CAAC,CAAC,GAAC;;AAEI,GAAMS,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAUX,CAAC;AACvC,GAAAS,eAAO,yBAAwBT,CAAC,CAACU,QAAQ,CAAG;AACxC0F,cAAc,CAAGpG,CAAC,CAACyC,WAAW,CAAGzC,CAAC,CAACyC,WAAW,CAACzB,SAAS,CAAGhB,CAAC,CAACuB,kBAAkB;AACnF,GAAI,CAAC6E,cAAc,CAAEA,cAAc,CAAG9D,8BAAmB;AACnDlC,IAAI,CAAG,GAAAiE,uBAAe,EAAC+B,cAAc,CAAC;;AAExC,CAACpG,CAAC,CAACU,QAAQ,EAAIV,CAAC,CAACU,QAAQ,GAAK,IAAI,EAAI,CAAC4B,8BAAmB,CAACO,QAAQ,CAAC7C,CAAC,CAACU,QAAQ,CAAC;AACpD,GAAA2F,sBAAc,EAAC;AACtCxE,IAAI,CAAE,UAAU;AAChBC,IAAI,CAAE,MAAM;AACZE,OAAO,CAAE,iCAAiC;AAC1CK,OAAO,CAAEjC,IAAI,CAACkG,WAAW;AACzBC,UAAU,CAAE;AAChB,CAAC,CAAC,8CANM7F,QAAQ,uBAARA,QAAQ;;AAQhBV,CAAC,CAACU,QAAQ,CAAGA,QAAQ,CAAC;;;AAGpB8F,mBAAmB,yBAAGxG,CAAC,CAACqB,KAAK,CAACF,OAAO,CAACF,MAAM,uCAAtB,uBAAwBK,QAAQ,eAAhC,uBAAkCC,kBAAkB;AAC5EkF,KAAK,CAACC,OAAO,CAACF,mBAAmB,CAAC,EAAI,CAACA,mBAAmB,CAAC3D,QAAQ,CAAC7C,CAAC,CAACU,QAAQ,CAAC;AACrD,GAAA2F,sBAAc,EAAC;AACrCvE,IAAI,CAAE,SAAS;AACfE,OAAO,wBAAyBhC,CAAC,CAACU,QAAQ;AAC9C,CAAC,CAAC,gDAHMiG,OAAO,wBAAPA,OAAO;;AAKXA,OAAO;AACDC,YAAY,2CAAOJ,mBAAmB,GAAExG,CAAC,CAACU,QAAQ;AACxDK,sBAAsB,CAACf,CAAC,CAAE4G,YAAY,CAAC;AACvC5G,CAAC,CAACyC,WAAW,CAACnB,QAAQ,CAACC,kBAAkB,CAAGqF,YAAY,CAAC;AACnD,GAAAC,mCAAoB,EAAC7G,CAAC,CAAC;;AAEvB,GAAI8G,MAAK,CAAC,eAAe,CAAC;;;;;AAKlC,GAAAC,iCAAqB,EAAC/G,CAAC,CAAC;AACvBA,CAAC,CAACU,QAAQ,wEACpB,CAAC;;;AAEF,GAAM4E,yBAAwB,CAAG,QAA3BA,yBAAwB,CAAI5E,QAAQ,CAAER,OAAO,CAAEC,MAAM,CAAK;AAC5D,GAAI,CAACO,QAAQ,CAAE;AACX,GAAIP,MAAM,CAAE;AACRA,MAAM;AACF8C,cAAK,CAAC+D,GAAG;AAC8C/D,cAAK,CAACmB,KAAK,CAACO,IAAI;AAC/D,eAAe,CAClB,8BACJ,CACJ;;;;AACL;AACA,MAAO,MAAK;AAChB;AACA,GAAI,CAACrC,8BAAmB,CAACO,QAAQ,CAACnC,QAAQ,CAAC,CAAE;AACzC,GAAIP,MAAM,CAAEA,MAAM,CAAC8C,cAAK,CAAC+D,GAAG,aAAatG,QAAQ,iDAAgDuC,cAAK,CAACmB,KAAK,CAAC9B,8BAAmB,CAAC4B,IAAI,CAAC,IAAI,CAAC,CAAC,MAAK,CAAC;AAClJ,MAAO,MAAK;AAChB;AACA,GAAIhE,OAAO,CAAEA,OAAO,EAAE;AACtB,MAAO,KAAI;AACf,CAAC;;AAEM,GAAM+G,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIjH,CAAC,CAAEU,QAAQ,CAAER,OAAO,CAAK;AACtD,GAAI,CAACF,CAAC,CAACyC,WAAW,EAAI,CAACzC,CAAC,CAACyC,WAAW,CAACzB,SAAS,CAAE;AAC5CkG,QAAQ,oEAAoEjE,cAAK,CAACmB,KAAK,CAACpE,CAAC,CAACkB,KAAK,CAAC2E,SAAS,CAAC5E,MAAM,CAAC,cAAa;AAC9H,GAAIf,OAAO,CAAEA,OAAO,EAAE;AACtB,MAAO,MAAK;AAChB;AACA,GAAI,CAACF,CAAC,CAACyC,WAAW,CAACzB,SAAS,CAACN,QAAQ,CAAC,CAAE;AACpCyG,OAAO,CAACC,GAAG,aAAa1G,QAAQ,wBAAuBV,CAAC,CAAC0F,OAAO,CAACC,KAAK,eAAc;AACpF,GAAIzF,OAAO,CAAEA,OAAO,EAAE;AACtB,MAAO,MAAK;AAChB;AACA,MAAO,KAAI;AACf,CAAC,CAAC"}