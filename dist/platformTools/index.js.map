{"version":3,"sources":["../../src/platformTools/index.js"],"names":["rnvPlatformList","c","Promise","resolve","reject","opts","_genPlatOptions","asString","rnvPlatformConfigure","platform","isPlatformSupported","cleanPlatformBuild","_runCopyPlatforms","updateProjectPlatforms","platforms","config","paths","project","currentConfig","files","defaults","supportedPlatforms","rnvPlatformSetup","currentPlatforms","inquirer","prompt","name","type","pageSize","message","validate","val","length","default","choices","SUPPORTED_PLATFORMS","inputSupportedPlatforms","_generatePlatformChoices","buildConfig","map","isConnected","platformTemplatesDirs","includes","rnv","platformTemplates","dir","chalk","green","yellow","value","rnvPlatformEject","choice","disabled","ejectedPlatforms","ptfn","rptf","prf","copyShared","forEach","PLATFORMS","requiresSharedConfig","path","join","white","i","obj","mapping","defaultVal","isEjected","bold","rnvPlatformConnect","connectedPlatforms","Object","keys","deletePlatformFolder","pathsToRemove","push","copyPlatformTasks","k","_isPlatformSupportedSync","ptPath","pPath","builds","runtime","appId","logWarning","appConfig","all","then","values","cleanTasks","createPlatformBuild","platformsAsObj","keysAsArray","logMessage","configuredPlatforms","Array","isArray","confirm","newPlatforms","Error","red","isPlatformActive","logError","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport chalk from 'chalk';\nimport path from 'path';\nimport inquirer from 'inquirer';\n\nimport { logToSummary, logTask, logSuccess } from '../systemTools/logger';\nimport { generateOptions, inquirerPrompt } from '../systemTools/prompt';\nimport { cleanFolder, copyFolderContentsRecursiveSync, writeFileSync, removeDirs } from '../systemTools/fileutils';\nimport { cleanPlaformAssets } from '../projectTools/projectParser';\nimport { PLATFORMS, SUPPORTED_PLATFORMS } from '../constants';\nimport { checkAndConfigureSdks } from './sdkManager';\nimport { configureEntryPoints } from '../templateTools';\n\nexport const rnvPlatformList = c => new Promise((resolve, reject) => {\n    const opts = _genPlatOptions(c);\n    logToSummary(`Platforms:\\n\\n${opts.asString}`);\n    resolve();\n});\n\nexport const rnvPlatformConfigure = async (c) => {\n    // c.platform = c.program.platform || 'all';\n    logTask(`rnvPlatformConfigure:${c.platform}`);\n\n    await isPlatformSupported(c);\n    await cleanPlatformBuild(c, c.platform);\n    await cleanPlaformAssets(c, c.platform);\n    await _runCopyPlatforms(c, c.platform);\n};\n\nconst updateProjectPlatforms = (c, platforms) => {\n    const { project: { config } } = c.paths;\n    const currentConfig = c.files.project.config;\n    currentConfig.defaults = currentConfig.defaults || {};\n    currentConfig.defaults.supportedPlatforms = platforms;\n    writeFileSync(config, currentConfig);\n};\n\nexport const rnvPlatformSetup = async (c) => {\n    const currentPlatforms = c.files.project.config.defaults?.supportedPlatforms || [];\n\n    const {\n        inputSupportedPlatforms\n    } = await inquirer.prompt({\n        name: 'inputSupportedPlatforms',\n        type: 'checkbox',\n        pageSize: 20,\n        message: 'What platforms would you like to use?',\n        validate: val => !!val.length || 'Please select at least a platform',\n        default: currentPlatforms,\n        choices: SUPPORTED_PLATFORMS\n    });\n\n    updateProjectPlatforms(c, inputSupportedPlatforms);\n};\n\nconst _generatePlatformChoices = c => c.buildConfig.defaults.supportedPlatforms.map((platform) => {\n    const isConnected = c.paths.project.platformTemplatesDirs[platform].includes(c.paths.rnv.platformTemplates.dir);\n    return { name: `${platform} - ${isConnected ? chalk.green('(connected)') : chalk.yellow('(ejected)')}`, value: platform, isConnected };\n});\n\nexport const rnvPlatformEject = async (c) => {\n    logTask('rnvPlatformEject');\n\n    const { ejectedPlatforms } = await inquirer.prompt({\n        name: 'ejectedPlatforms',\n        message: 'This will copy platformTemplates folders from ReNative managed directly to your project Select platforms you would like to connect',\n        type: 'checkbox',\n        choices: _generatePlatformChoices(c).map(choice => ({ ...choice, disabled: !choice.isConnected }))\n    });\n\n    if (ejectedPlatforms.length) {\n        const ptfn = 'platformTemplates';\n        const rptf = c.paths.rnv.platformTemplates.dir;\n        const prf = c.paths.project.dir;\n\n        let copyShared = false;\n\n        ejectedPlatforms.forEach((platform) => {\n            if (PLATFORMS[platform].requiresSharedConfig) {\n                copyShared = true;\n            }\n\n            copyFolderContentsRecursiveSync(path.join(rptf, platform), path.join(prf, ptfn, platform));\n\n            if (copyShared) {\n                copyFolderContentsRecursiveSync(path.join(rptf, '_shared'), path.join(prf, ptfn, '_shared'));\n            }\n\n            c.files.project.config.platformTemplatesDirs = c.files.project.config.platformTemplatesDirs || {};\n            c.files.project.config.platformTemplatesDirs[platform] = `./${ptfn}`;\n\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n    }\n\n    logSuccess(\n        `${chalk.white(ejectedPlatforms.join(','))} platform templates are located in ${chalk.white(\n            c.files.project.config.platformTemplatesDirs[ejectedPlatforms[0]]\n        )} now. You can edit them directly!`\n    );\n};\n\nconst _genPlatOptions = (c) => {\n    const opts = generateOptions(c.buildConfig.defaults.supportedPlatforms, true, null, (i, obj, mapping, defaultVal) => {\n        const isEjected = c.paths.project.platformTemplatesDirs[obj].includes(c.paths.rnv.platformTemplates.dir) ? chalk.green('(connected)') : chalk.yellow('(ejected)');\n        return ` [${chalk.white(i + 1)}]> ${chalk.bold(defaultVal)} - ${isEjected} \\n`;\n    });\n    return opts;\n};\n\nexport const rnvPlatformConnect = async (c) => {\n    logTask('rnvPlatformConnect');\n\n    const { connectedPlatforms } = await inquirer.prompt({\n        name: 'connectedPlatforms',\n        message: 'This will point platformTemplates folders from your local project to ReNative managed one. Select platforms you would like to connect',\n        type: 'checkbox',\n        choices: _generatePlatformChoices(c).map(choice => ({ ...choice, disabled: choice.isConnected }))\n    });\n\n\n    if (connectedPlatforms.length) {\n        connectedPlatforms.forEach((platform) => {\n            if (c.files.project.config.platformTemplatesDirs?.[platform]) {\n                delete c.files.project.config.platformTemplatesDirs[platform];\n            }\n\n            if (!Object.keys(c.files.project.config.platformTemplatesDirs).length) {\n                delete c.files.project.config.platformTemplatesDirs; // also cleanup the empty object\n            }\n\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n    }\n\n    const { deletePlatformFolder } = await inquirer.prompt({\n        name: 'deletePlatformFolder',\n        type: 'confirm',\n        message: 'Would you also like to delete the previously used platform folder?'\n    });\n\n    if (deletePlatformFolder) {\n        const pathsToRemove = [];\n        connectedPlatforms.forEach((platform) => {\n            pathsToRemove.push(path.join(c.paths.project.platformTemplatesDirs[platform], platform));\n        });\n\n        // TODO: Remove shared folders as well\n\n        await removeDirs(pathsToRemove);\n    }\n\n    logSuccess(\n        `${chalk.white(connectedPlatforms.join(','))} now using ReNative platformTemplates located in ${chalk.white(c.paths.rnv.platformTemplates.dir)} now!`\n    );\n};\n\nconst _runCopyPlatforms = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`_runCopyPlatforms:${platform}`);\n    const copyPlatformTasks = [];\n    if (platform === 'all') {\n        for (const k in c.buildConfig.platforms) {\n            if (_isPlatformSupportedSync(k)) {\n                const ptPath = path.join(c.paths.project.platformTemplatesDirs[k], `${k}`);\n                const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${k}`);\n                copyPlatformTasks.push(copyFolderContentsRecursiveSync(ptPath, pPath));\n            }\n        }\n    } else if (_isPlatformSupportedSync(platform)) {\n        const ptPath = path.join(c.paths.project.platformTemplatesDirs[platform], `${platform}`);\n        const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n        copyPlatformTasks.push(copyFolderContentsRecursiveSync(ptPath, pPath));\n    } else {\n        logWarning(`Your platform ${chalk.white(platform)} config is not present. Check ${chalk.white(c.paths.appConfig.config)}`);\n    }\n\n    Promise.all(copyPlatformTasks).then((values) => {\n        resolve();\n    });\n});\n\nexport const cleanPlatformBuild = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`cleanPlatformBuild:${platform}`);\n\n    const cleanTasks = [];\n\n    if (platform === 'all') {\n        for (const k in c.buildConfig.platforms) {\n            if (_isPlatformSupportedSync(k)) {\n                const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${k}`);\n                cleanTasks.push(cleanFolder(pPath));\n            }\n        }\n    } else if (_isPlatformSupportedSync(platform)) {\n        const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n        cleanTasks.push(cleanFolder(pPath));\n    }\n\n    Promise.all(cleanTasks).then((values) => {\n        resolve();\n    });\n});\n\nexport const createPlatformBuild = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`createPlatformBuild:${platform}`);\n\n    if (!_isPlatformSupportedSync(platform, null, reject)) return;\n\n    const pPath = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${platform}`);\n    const ptPath = path.join(c.paths.project.platformTemplatesDirs[platform], `${platform}`);\n    copyFolderContentsRecursiveSync(ptPath, pPath, false, [path.join(ptPath, '_privateConfig')]);\n\n    resolve();\n});\n\nexport const isPlatformSupported = async (c) => {\n    logTask(`isPlatformSupported:${c.platform}`);\n    let platformsAsObj = c.buildConfig ? c.buildConfig.platforms : c.supportedPlatforms;\n    if (!platformsAsObj) platformsAsObj = SUPPORTED_PLATFORMS;\n    const opts = generateOptions(platformsAsObj);\n\n    if (!c.platform || c.platform === true || !SUPPORTED_PLATFORMS.includes(c.platform)) {\n        const { platform } = await inquirerPrompt({\n            name: 'platform',\n            type: 'list',\n            message: 'Pick one of available platforms',\n            choices: opts.keysAsArray,\n            logMessage: 'You need to specify platform'\n        });\n\n        c.platform = platform;\n    }\n\n    const configuredPlatforms = c.files.project.config?.defaults?.supportedPlatforms;\n    if (Array.isArray(configuredPlatforms) && !configuredPlatforms.includes(c.platform)) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `Looks like platform ${c.platform} is not supported by your project. Would you like to enable it?`\n        });\n\n        if (confirm) {\n            const newPlatforms = [...configuredPlatforms, c.platform];\n            updateProjectPlatforms(c, newPlatforms);\n            c.buildConfig.defaults.supportedPlatforms = newPlatforms;\n            await configureEntryPoints(c);\n        } else {\n            throw new Error('User canceled');\n        }\n    }\n\n    // Check global SDKs\n    await checkAndConfigureSdks(c);\n    return c.platform;\n};\n\nconst _isPlatformSupportedSync = (platform, resolve, reject) => {\n    if (!platform) {\n        if (reject) {\n            reject(\n                chalk.red(\n                    `You didn't specify platform. make sure you add \"${chalk.white.bold(\n                        '-p <PLATFORM>',\n                    )}\" option to your command!`,\n                ),\n            );\n        }\n        return false;\n    }\n    if (!SUPPORTED_PLATFORMS.includes(platform)) {\n        if (reject) reject(chalk.red(`Platform ${platform} is not supported. Use one of the following: ${chalk.white(SUPPORTED_PLATFORMS.join(', '))} .`));\n        return false;\n    }\n    if (resolve) resolve();\n    return true;\n};\n\nexport const isPlatformActive = (c, platform, resolve) => {\n    if (!c.buildConfig || !c.buildConfig.platforms) {\n        logError(`Looks like your appConfigFile is not configured properly! check ${chalk.white(c.paths.appConfig.config)} location.`);\n        if (resolve) resolve();\n        return false;\n    }\n    if (!c.buildConfig.platforms[platform]) {\n        console.log(`Platform ${platform} not configured for ${c.runtime.appId}. skipping.`);\n        if (resolve) resolve();\n        return false;\n    }\n    return true;\n};\n"],"file":"index.js"}