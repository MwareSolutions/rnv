{"version":3,"sources":["../../../src/platformTools/apple/fastlane.js"],"names":["registerDevice","c","platform","teamID","udid","runtime","targetUDID","deviceName","target","args","join","shell","stdio","silent","updateProfile","appConfigId","chalk","grey","IOS","TVOS","Promise","reject","scheme","program","appId","id","pMethod","method","runScheme","provisioning","certsPath","path","paths","workspace","appConfig","dir","process","env","APPLE_DEVELOPER_USERNAME","concat","push"],"mappings":"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","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport {\n    getConfigProp,\n    getAppId\n} from '../../common';\nimport {\n    logTask,\n    logWarning,\n    logSuccess\n} from '../../systemTools/logger';\nimport { executeAsync } from '../../systemTools/exec';\nimport { IOS, TVOS } from '../../constants';\nimport { setAppConfig } from '../../configTools/configParser';\n\nexport const registerDevice = async (c) => {\n    logTask(`registerDevice:${c.platform}`);\n\n\n    const teamID = getConfigProp(c, c.platform, 'teamID');\n    const udid = c.runtime.targetUDID;\n    const deviceName = c.runtime.target;\n\n    const args = [\n        'run',\n        'register_device',\n        `team_id:\"${teamID}\"`,\n        `udid:\"${udid}\"`,\n        `name:\"${deviceName}\"`\n    ];\n\n    try {\n        await executeAsync(c, `fastlane ${args.join(' ')}`, { shell: true, stdio: 'inherit', silent: true });\n        logSuccess(`Succesfully registered device ${deviceName}:${udid}:${teamID}`);\n        return true;\n    } catch (e) {\n        logWarning(e);\n        return true;\n    }\n};\n\nexport const updateProfile = async (c, appConfigId) => {\n    logTask(`updateProfile:${appConfigId}`, chalk.grey);\n\n    // TODO: run trough all schemes\n    // const schemes = c.buildConfig.platforms?.[c.platform]?.buildSchemes\n    // const currScheme = c.program.scheme\n    // for(k in schemes) {\n    //   c.program.scheme = k\n    // }\n\n    if (appConfigId) await setAppConfig(c, appConfigId);\n\n    if (c.platform !== IOS && c.platform !== TVOS) {\n        return Promise.reject(`updateProfile:platform ${c.platform} not supported`);\n    }\n    const { scheme } = c.program;\n\n\n    const { platform } = c;\n\n    const { appId } = c.runtime;\n\n    const id = getAppId(c, platform);\n    const teamID = getConfigProp(c, platform, 'teamID');\n    const pMethod = getConfigProp(c, platform, 'exportOptions')?.method;\n    const runScheme = getConfigProp(c, platform, 'runScheme');\n    let provisioning;\n    if (pMethod === 'ad-hoc') provisioning = 'adhoc';\n    if (pMethod === 'development' || runScheme === 'Debug') provisioning = 'development';\n\n    const certsPath = path.join(c.paths.workspace.appConfig.dir, 'certs');\n\n    let args = [\n        'sigh',\n        '--app_identifier',\n        id,\n        '--team_id',\n        teamID,\n        '--output_path',\n        certsPath,\n        '--force',\n        '--platform',\n        platform\n    ];\n    if (process.env.APPLE_DEVELOPER_USERNAME) {\n        args = args.concat([\n            '--username',\n            process.env.APPLE_DEVELOPER_USERNAME\n        ]);\n    }\n    if (provisioning) {\n        args.push(`--${provisioning}`);\n    }\n\n    try {\n        await executeAsync(c, `fastlane ${args.join(' ')}`, { shell: true, stdio: 'inherit', silent: true });\n        logSuccess(`Succesfully updated provisioning profile for ${appId}:${scheme}:${id}`);\n        return true;\n    } catch (e) {\n        logWarning(e);\n        return true;\n    }\n};\n"],"file":"fastlane.js"}