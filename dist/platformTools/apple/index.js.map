{"version":3,"file":"index.js","names":["checkIfPodsIsRequired","c","appFolder","getAppFolder","platform","podChecksumPath","path","join","fs","existsSync","podChecksum","readFileSync","toString","podContentChecksum","generateChecksum","logDebug","logInfo","updatePodsChecksum","logTask","existingContent","writeFileSync","runPod","Promise","reject","program","updatePods","podsRequired","commandExistsSync","Error","executeAsync","cwd","env","process","s","isGenericError","includes","logWarning","then","catch","er","copyAppleAssets","appFolderName","resolve","isPlatformActive","mkdirSync","runXcodeProject","runtime","target","appPath","device","scheme","getConfigProp","runScheme","bundleIsDev","bundleAssets","chalk","yellow","white","paths","appConfig","config","grey","getAppleDevices","devicesArr","length","logSuccess","name","udid","p","targetUDID","run","selectedDevice","JSON","stringify","packageBundleForXcode","_checkLockAndExec","find","d","devices","map","v","icon","green","version","isDevice","red","value","inquirer","prompt","message","type","choices","sim","replace","allowProvisioningUpdates","cmd","isDeviceLocked","isDeviceNotRegistered","logError","confirm","registerDevice","isDevelopmentTeamMissing","loc","appId","_setDevelopmentTeam","isAutomaticSigningDisabled","_handleProvisioningIssues","isProvisioningMissing","e","msg","provisioningStyle","isProvAutomatic","proAutoText","fixCommand","workspacePath","confirmAuto","_setAutomaticSigning","files","platforms","buildSchemes","teamID","plat","composeXcodeArgsFromCLI","string","spacesReplaced","keysAndValues","split","unescapedValues","archiveXcodeProject","getAppFolderName","sdk","IOS","TVOS","MACOS","sdkArr","exportPath","ignoreLogs","exportPathArchive","ps","xcodebuildArchiveArgs","push","buildConfig","args","rawCommand","exportXcodeProject","xcodebuildExportArgs","isDev","maxErrorLength","entryFile","info","projectFolder","runAppleLog","filter","child","child_process","execFile","stdio","customFds","stdout","on","data","toLowerCase","console","log","configureXcodeProject","ip","port","bundlerIp","getIP","pluginConfigiOS","podfileInject","exportOptions","embeddedFonts","embeddedFontSources","pluginAppDelegateImports","pluginAppDelegateMethods","appDelegateMethods","application","didFinishLaunchingWithOptions","applicationDidBecomeActive","open","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","podfileSources","parseFonts","font","dir","key","includedFonts","common","fontSource","fontFolder","fontDest","copyFileSync","tId","copyAssetsFolder","parseAppDelegate","parseExportOptionsPlist","parseXcscheme","parsePodFile","parseEntitlementsPlist","parseInfoPlist","copyBuildsFolder","parseXcodeProject"],"sources":["../../../src/platformTools/apple/index.js"],"sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular dep\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport inquirer from 'inquirer';\n\nimport { executeAsync, commandExistsSync } from '../../systemTools/exec';\nimport { getAppleDevices } from './deviceManager';\nimport { registerDevice } from './fastlane';\nimport {\n    getAppFolder,\n    getConfigProp,\n    getIP,\n    generateChecksum\n} from '../../common';\nimport { isPlatformActive } from '..';\nimport { copyAssetsFolder, copyBuildsFolder, parseFonts } from '../../projectTools/projectParser';\nimport { copyFileSync, mkdirSync, writeFileSync } from '../../systemTools/fileutils';\nimport { IOS, TVOS, MACOS } from '../../constants';\nimport {\n    parseExportOptionsPlist,\n    parseInfoPlist, parseEntitlementsPlist\n} from './plistParser';\nimport { parseXcscheme } from './xcschemeParser';\nimport { parsePodFile } from './podfileParser';\nimport { parseXcodeProject } from './xcodeParser';\nimport { parseAppDelegate } from './swiftParser';\nimport { logInfo, logTask,\n    logError,\n    logWarning, logDebug, logSuccess } from '../../systemTools/logger';\n\nconst checkIfPodsIsRequired = async (c) => {\n    const appFolder = getAppFolder(c, c.platform);\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    if (!fs.existsSync(podChecksumPath)) return true;\n    const podChecksum = fs.readFileSync(podChecksumPath).toString();\n    const podContentChecksum = generateChecksum(fs.readFileSync(path.join(appFolder, 'Podfile')).toString());\n\n    if (podChecksum !== podContentChecksum) {\n        logDebug('runPod:isMandatory');\n        return true;\n    }\n    logInfo('Pods do not seem like they need to be updated. If you want to update them manually run the same command with \"-u\" parameter');\n    return false;\n};\n\nconst updatePodsChecksum = (c) => {\n    logTask('updatePodsChecksum');\n    const appFolder = getAppFolder(c, c.platform);\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    const podContentChecksum = generateChecksum(fs.readFileSync(path.join(appFolder, 'Podfile')).toString());\n    if (fs.existsSync(podChecksumPath)) {\n        const existingContent = fs.readFileSync(podChecksumPath).toString();\n        if (existingContent !== podContentChecksum) {\n            logDebug(`updatePodsChecksum:${podContentChecksum}`);\n            return fs.writeFileSync(podChecksumPath, podContentChecksum);\n        }\n        return true;\n    }\n    logDebug(`updatePodsChecksum:${podContentChecksum}`);\n    return fs.writeFileSync(podChecksumPath, podContentChecksum);\n};\n\nconst runPod = async (c, platform) => {\n    logTask(`runPod:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    if (!fs.existsSync(appFolder)) {\n        return Promise.reject(`Location ${appFolder} does not exists!`);\n    }\n    const podsRequired = c.program.updatePods || await checkIfPodsIsRequired(c);\n\n    if (podsRequired) {\n        if (!commandExistsSync('pod')) throw new Error('Cocoapods not installed. Please run `sudo gem install cocoapods`');\n\n        try {\n            await executeAsync(c, 'pod install', {\n                cwd: appFolder,\n                env: process.env,\n            });\n        } catch (e) {\n            const s = e?.toString ? e.toString() : '';\n            const isGenericError = s.includes('No provisionProfileSpecifier configured') || s.includes('TypeError:') || s.includes('ReferenceError:') || s.includes('find gem cocoapods');\n            if (isGenericError) return new Error(`pod install failed with:\\n ${s}`);\n            logWarning(`Looks like pod install is not enough! Let's try pod update! Error:\\n ${s}`);\n            return executeAsync(c, 'pod update', { cwd: appFolder, env: process.env })\n                .then(() => updatePodsChecksum(c))\n                .catch(er => Promise.reject(er));\n        }\n\n        updatePodsChecksum(c);\n        return true;\n    }\n};\n\nconst copyAppleAssets = (c, platform, appFolderName) => new Promise((resolve) => {\n    logTask('copyAppleAssets');\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const appFolder = getAppFolder(c, platform);\n\n    // ASSETS\n    fs.writeFileSync(path.join(appFolder, 'main.jsbundle'), '{}');\n    mkdirSync(path.join(appFolder, 'assets'));\n    mkdirSync(path.join(appFolder, `${appFolderName}/images`));\n\n    resolve();\n});\n\nexport const runXcodeProject = async (c) => {\n    logTask(`runXcodeProject:${c.platform}:${c.runtime.target}`);\n\n    const appPath = getAppFolder(c, c.platform);\n    const { device } = c.program;\n    const scheme = getConfigProp(c, c.platform, 'scheme');\n    const runScheme = getConfigProp(c, c.platform, 'runScheme');\n    const bundleIsDev = getConfigProp(c, c.platform, 'bundleIsDev') === true;\n    const bundleAssets = getConfigProp(c, c.platform, 'bundleAssets') === true;\n    let p;\n\n    if (!scheme) {\n        return Promise.reject(\n            `You missing scheme in platforms.${chalk.yellow(c.platform)} in your ${chalk.white(\n                c.paths.appConfig.config,\n            )}! Check example config for more info:  ${chalk.grey(\n                'https://github.com/pavjacko/renative/blob/master/appConfigs/helloWorld/renative.json',\n            )} `,\n        );\n    }\n\n    let devicesArr;\n    if (device === true) devicesArr = await getAppleDevices(c, c.platform, false, true);\n    else if (c.runtime.target === true) devicesArr = await getAppleDevices(c, c.platform, true, false);\n\n    if (device === true) {\n        if (devicesArr.length === 1) {\n            logSuccess(`Found one device connected! device name: ${chalk.white(devicesArr[0].name)} udid: ${chalk.white(devicesArr[0].udid)}`);\n            if (devicesArr[0].udid) {\n                p = `--device --udid ${devicesArr[0].udid}`;\n                c.runtime.targetUDID = devicesArr[0].udid;\n            } else {\n                p = `--device ${devicesArr[0].name}`;\n            }\n        } else if (devicesArr.length > 1) {\n            const run = (selectedDevice) => {\n                logDebug(`Selected device: ${JSON.stringify(selectedDevice, null, 3)}`);\n                c.runtime.targetUDID = selectedDevice.udid;\n                if (selectedDevice.udid) {\n                    p = `--device --udid ${selectedDevice.udid}`;\n                } else {\n                    p = `--device ${selectedDevice.name}`;\n                }\n\n                logDebug(`RN params: ${p}`);\n\n                if (bundleAssets) {\n                    logDebug('Assets will be bundled');\n                    return packageBundleForXcode(c, c.platform, bundleIsDev).then(() => _checkLockAndExec(c, appPath, scheme, runScheme, p));\n                }\n                return _checkLockAndExec(c, appPath, scheme, runScheme, p);\n            };\n\n            if (c.runtime.target !== true) {\n                const selectedDevice = devicesArr.find(d => d.name === c.runtime.target);\n                if (selectedDevice) {\n                    return run(selectedDevice);\n                }\n                logWarning(`Could not find device ${c.runtime.target}`);\n            }\n\n            const devices = devicesArr.map(v => ({ name: `${v.name} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${v.isDevice ? chalk.red(' (device)') : ''}`, value: v }));\n\n            const { sim } = await inquirer.prompt({\n                name: 'sim',\n                message: 'Select the device you want to launch on',\n                type: 'list',\n                choices: devices\n            });\n\n            if (sim) {\n                return run(sim);\n            }\n        } else {\n            return Promise.reject(`No ${c.platform} devices connected!`);\n        }\n    } else if (device) {\n        p = `--device ${device}`;\n    } else if (c.runtime.target === true) {\n        const devices = devicesArr.map(v => ({ name: `${v.name} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${v.isDevice ? chalk.red(' (device)') : ''}`, value: v }));\n\n        const { sim } = await inquirer.prompt({\n            name: 'sim',\n            message: 'Select the device you want to launch on',\n            type: 'list',\n            choices: devices\n        });\n        c.runtime.target = sim.name;\n        p = `--simulator ${c.runtime.target.replace(/(\\s+)/g, '\\\\$1')}`;\n    } else {\n        p = `--simulator ${c.runtime.target.replace(/(\\s+)/g, '\\\\$1')}`;\n    }\n\n    if (p) {\n        const allowProvisioningUpdates = getConfigProp(c, c.platform, 'allowProvisioningUpdates', true);\n        // if (allowProvisioningUpdates) p.push('--allowProvisioningUpdates');\n\n        if (bundleAssets) {\n            return packageBundleForXcode(c, c.platform, bundleIsDev).then(() => _checkLockAndExec(c, appPath, scheme, runScheme, p));\n        }\n        return _checkLockAndExec(c, appPath, scheme, runScheme, p);\n    }\n    return Promise.reject('Missing options for react-native command!');\n};\n\nconst _checkLockAndExec = async (c, appPath, scheme, runScheme, p) => {\n    logTask(`_checkLockAndExec:${scheme}:${runScheme}`);\n    const cmd = `react-native run-ios --project-path ${appPath} --scheme ${scheme} --configuration ${runScheme} ${p}`;\n    try {\n        await executeAsync(c, cmd);\n        return true;\n    } catch (e) {\n        const isDeviceLocked = e.includes('ERROR:DEVICE_LOCKED');\n        if (isDeviceLocked) {\n            await inquirer.prompt({ message: 'Unlock your device and press ENTER', type: 'confirm', name: 'confirm' });\n            return executeAsync(c, cmd);\n        }\n        const isDeviceNotRegistered = e.includes(\"doesn't include the currently selected device\");\n        if (isDeviceNotRegistered) {\n            logError(e);\n            logWarning(`${c.platform} DEVICE: ${chalk.white(c.runtime.target)} with UDID: ${chalk.white(c.runtime.targetUDID)} is not included in your provisionong profile in TEAM: ${chalk.white(getConfigProp(c, c.platform, 'teamID'))}`);\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                message: 'Do you want to register it?',\n                type: 'confirm'\n            });\n            if (confirm) {\n                await registerDevice(c);\n                return Promise.reject('Updated. Re-run your last command');\n                // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n                // await configureXcodeProject(c, c.platform);\n                // return runXcodeProject(c);\n            }\n        }\n        const isDevelopmentTeamMissing = e.includes('requires a development team. Select a development team');\n        if (isDevelopmentTeamMissing) {\n            const loc = `./appConfigs/${c.runtime.appId}/renative.json:{ \"platforms\": { \"${c.platform}\": { \"teamID\": \".....\"`;\n            logError(e);\n            logWarning(`You need specify the development team if you want to run app on ${c.platform} device. this can be set manually in ${chalk.white(loc)}\nYou can find correct teamID in the URL of your apple developer account: ${chalk.white('https://developer.apple.com/account/#/overview/YOUR-TEAM-ID')}`);\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                message: `Type in your Apple Team ID to be used (will be saved to ${c.paths.appConfig?.config})`,\n                type: 'input'\n            });\n            if (confirm) {\n                await _setDevelopmentTeam(c, confirm);\n                return Promise.reject('Updated. Re-run your last command');\n                // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n                // await configureXcodeProject(c, c.platform);\n                // return runXcodeProject(c);\n            }\n        }\n        const isAutomaticSigningDisabled = e.includes('Automatic signing is disabled and unable to generate a profile');\n        if (isAutomaticSigningDisabled) {\n            return _handleProvisioningIssues(c, e, 'Your iOS App Development provisioning profiles don\\'t match. under manual signing mode');\n        }\n        const isProvisioningMissing = e.includes('requires a provisioning profile');\n        if (isProvisioningMissing) {\n            return _handleProvisioningIssues(c, e, 'Your iOS App requires a provisioning profile');\n        }\n        return Promise.reject(e);\n    }\n};\n\nconst _handleProvisioningIssues = async (c, e, msg) => {\n    const provisioningStyle = getConfigProp(c, c.platform, 'provisioningStyle');\n    // Sometimes xcodebuild reports Automatic signing is disabled but it could be keychain not accepted by user\n    const isProvAutomatic = provisioningStyle === 'Automatic';\n    const proAutoText = isProvAutomatic ? '' : `${chalk.white('[4]>')} Switch to automatic signing for appId: ${c.runtime.appId} , platform: ${c.platform}, scheme: ${c.runtime.scheme}`;\n    const fixCommand = `rnv crypto updateProfile -p ${c.platform} -s ${c.runtime.scheme}`;\n    const workspacePath = chalk.white(`${getAppFolder(c, c.platform)}/RNVApp.xcworkspace`);\n    logError(e);\n    logWarning(`${msg}. To fix try:\n${chalk.white('[1]>')} Configure your certificates, provisioning profiles correctly manually\n${chalk.white('[2]>')} Try to generate matching profiles with ${chalk.white(fixCommand)} (you need correct priviledges in apple developer portal)\n${chalk.white('[3]>')} Open generated project in Xcode: ${workspacePath} and debug from there (Sometimes this helps for the first-time builds)\n${proAutoText}`);\n    if (isProvAutomatic) return false;\n    const { confirmAuto } = await inquirer.prompt({\n        name: 'confirmAuto',\n        message: 'Switch to automatic signing?',\n        type: 'confirm'\n    });\n    if (confirmAuto) {\n        await _setAutomaticSigning(c);\n        return Promise.reject('Updated. Re-run your last command');\n        // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n        // await configureXcodeProject(c, c.platform);\n        // return runXcodeProject(c);\n    }\n};\n\nconst _setAutomaticSigning = async (c) => {\n    logTask(`_setAutomaticSigning:${c.platform}`);\n\n    const scheme = c.files.appConfig?.config?.platforms?.[c.platform]?.buildSchemes?.[c.runtime.scheme];\n    if (scheme) {\n        scheme.provisioningStyle = 'Automatic';\n        writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n        logSuccess(`Succesfully updated ${c.paths.appConfig.config}`);\n    } else {\n        return Promise.reject(`Failed to update ${c.paths.appConfig?.config}.\"platforms\": { \"${c.platform}\": { buildSchemes: { \"${c.runtime.scheme}\" ... Object is null. Try update file manually`);\n    }\n};\n\nconst _setDevelopmentTeam = async (c, teamID) => {\n    logTask(`_setDevelopmentTeam:${teamID}`);\n\n    const plat = c.files.appConfig?.config?.platforms?.[c.platform];\n    if (plat) {\n        plat.teamID = teamID;\n        writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n        logSuccess(`Succesfully updated ${c.paths.appConfig.config}`);\n    } else {\n        return Promise.reject(`Failed to update ${c.paths.appConfig?.config}.\"platforms\": { \"${c.platform}\" ... Object is null. Try update file manually`);\n    }\n};\n\nconst composeXcodeArgsFromCLI = (string) => {\n    const spacesReplaced = string.replace(/\\s(?=(?:[^'\"`]*(['\"`])[^'\"`]*\\1)*[^'\"`]*$)/g, '&&&'); // replaces spaces outside quotes with &&& for easy split\n    const keysAndValues = spacesReplaced.split('&&&');\n    const unescapedValues = keysAndValues.map(s => s.replace(/\\'/g, '').replace(/\"/g, '').replace(/\\\\/g, '')); // removes all quotes or backslashes\n\n    return unescapedValues;\n};\n\nconst archiveXcodeProject = (c, platform) => {\n    logTask(`archiveXcodeProject:${platform}`);\n\n\n    const appFolderName = getAppFolderName(c, platform);\n    const runScheme = getConfigProp(c, platform, 'runScheme', 'Debug');\n    let sdk = getConfigProp(c, platform, 'sdk');\n    if (!sdk) {\n        if (platform === IOS) sdk = 'iphoneos';\n        if (platform === TVOS) sdk = 'appletvos';\n        if (platform === MACOS) sdk = 'macosx';\n    }\n    const sdkArr = [sdk];\n\n    const appPath = getAppFolder(c, platform);\n    const exportPath = path.join(appPath, 'release');\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const allowProvisioningUpdates = getConfigProp(c, platform, 'allowProvisioningUpdates', true);\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n    const bundleIsDev = getConfigProp(c, platform, 'bundleIsDev') === true;\n    const exportPathArchive = `${exportPath}/${scheme}.xcarchive`;\n    let ps = '';\n    if (c.program.xcodebuildArchiveArgs) {\n        ps = c.program.xcodebuildArchiveArgs;\n    }\n    const p = [];\n\n    if (!ps.includes('-workspace')) {\n        p.push('-workspace');\n        p.push(`${appPath}/${appFolderName}.xcworkspace`);\n    }\n    if (!ps.includes('-scheme')) {\n        p.push('-scheme');\n        p.push(scheme);\n    }\n    if (!ps.includes('-sdk')) {\n        p.push('-sdk');\n        p.push(...sdkArr);\n    }\n    if (!ps.includes('-configuration')) {\n        p.push('-configuration');\n        p.push(runScheme);\n    }\n    p.push('archive');\n    if (!ps.includes('-archivePath')) {\n        p.push('-archivePath');\n        p.push(exportPathArchive);\n    }\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) p.push('-allowProvisioningUpdates');\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n    // if (sdk === 'iphonesimulator') p.push('ONLY_ACTIVE_ARCH=NO', \"-destination='name=iPhone 7,OS=10.2'\");\n\n\n    logTask('archiveXcodeProject: STARTING xcodebuild ARCHIVE...');\n\n    if (c.buildConfig.platforms[platform].runScheme === 'Release') {\n        return packageBundleForXcode(c, platform, bundleIsDev)\n            .then(() => executeAsync(c, `xcodebuild ${ps} ${p.join(' ')}`))\n            .then(() => {\n                logSuccess(`Your Archive is located in ${chalk.white(exportPath)} .`);\n            });\n    }\n\n    const args = ps !== '' ? [...composeXcodeArgsFromCLI(ps), ...p] : p;\n\n    logDebug('xcodebuild args', args);\n\n    return executeAsync('xcodebuild', { rawCommand: { args } })\n        .then(() => {\n            logSuccess(`Your Archive is located in ${chalk.white(exportPath)} .`);\n        });\n};\n\nconst exportXcodeProject = (c, platform) => {\n    logTask(`exportXcodeProject:${platform}`);\n\n    const appPath = getAppFolder(c, platform);\n    const exportPath = path.join(appPath, 'release');\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const allowProvisioningUpdates = getConfigProp(c, platform, 'allowProvisioningUpdates', true);\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n\n    let ps = '';\n    if (c.program.xcodebuildExportArgs) {\n        ps = c.program.xcodebuildExportArgs;\n    }\n    const p = ['-exportArchive'];\n\n    if (!ps.includes('-archivePath')) {\n        p.push(`-archivePath ${exportPath}/${scheme}.xcarchive`);\n    }\n    if (!ps.includes('-exportOptionsPlist')) {\n        p.push(`-exportOptionsPlist ${appPath}/exportOptions.plist`);\n    }\n    if (!ps.includes('-exportPath')) {\n        p.push(`-exportPath ${exportPath}`);\n    }\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) p.push('-allowProvisioningUpdates');\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n\n    logDebug('running', p);\n\n    logTask('exportXcodeProject: STARTING xcodebuild EXPORT...');\n\n    return executeAsync(c, `xcodebuild ${p.join(' ')}`)\n        .then(() => {\n            logSuccess(`Your IPA is located in ${chalk.white(exportPath)} .`);\n        });\n};\n\nconst packageBundleForXcode = (c, platform, isDev = false) => {\n    logTask(`packageBundleForXcode:${platform}`);\n    const { maxErrorLength } = c.program;\n    const args = [\n        'bundle',\n        '--platform',\n        'ios',\n        '--dev',\n        isDev,\n        '--assets-dest',\n        `platformBuilds/${c.runtime.appId}_${platform}`,\n        '--entry-file',\n        `${c.buildConfig.platforms[platform].entryFile}.js`,\n        '--bundle-output',\n        `${getAppFolder(c, platform)}/main.jsbundle`,\n    ];\n\n    if (c.program.info) {\n        args.push('--verbose');\n    }\n\n    return executeAsync(c, `react-native ${args.join(' ')}`);\n};\n\nexport const getAppFolderName = (c, platform) => {\n    const projectFolder = getConfigProp(c, platform, 'projectFolder');\n    if (projectFolder) {\n        return projectFolder;\n    }\n    return platform === IOS ? 'RNVApp' : 'RNVAppTVOS';\n};\n\n\n// Resolve or reject will not be called so this will keep running\nconst runAppleLog = c => new Promise(() => {\n    logTask('runAppleLog');\n    const filter = c.program.filter || 'RNV';\n    const child = child_process.execFile(\n        'xcrun',\n        ['simctl', 'spawn', 'booted', 'log', 'stream', '--predicate', `eventMessage contains \\\"${filter}\\\"`],\n        { stdio: 'inherit', customFds: [0, 1, 2] },\n    );\n        // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString();\n        if (d.toLowerCase().includes('error')) {\n            console.log(chalk.red(d));\n        } else if (d.toLowerCase().includes('success')) {\n            console.log(chalk.green(d));\n        } else {\n            console.log(d);\n        }\n    });\n});\n\nconst configureXcodeProject = async (c, platform, ip, port) => {\n    logTask(`configureXcodeProject:${platform}`);\n    const { device } = c.program;\n    const bundlerIp = device ? getIP() : 'localhost';\n    const appFolder = getAppFolder(c, platform);\n    const appFolderName = getAppFolderName(c, platform);\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n    // INJECTORS\n    c.pluginConfigiOS = {\n        podfileInject: '',\n        exportOptions: '',\n        embeddedFonts: [],\n        embeddedFontSources: [],\n        pluginAppDelegateImports: '',\n        pluginAppDelegateMethods: '',\n        appDelegateMethods: {\n            application: {\n                didFinishLaunchingWithOptions: [],\n                applicationDidBecomeActive: [],\n                open: [],\n                supportedInterfaceOrientationsFor: [],\n                didReceiveRemoteNotification: [],\n                didFailToRegisterForRemoteNotificationsWithError: [],\n                didReceive: [],\n                didRegister: [],\n                didRegisterForRemoteNotificationsWithDeviceToken: []\n            },\n            userNotificationCenter: {\n                willPresent: []\n            }\n        },\n        podfileSources: [],\n    };\n\n    // FONTS\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const { includedFonts } = c.buildConfig.common;\n            if (includedFonts && (includedFonts.includes('*') || includedFonts.includes(key))) {\n                const fontSource = path.join(dir, font);\n                if (fs.existsSync(fontSource)) {\n                    const fontFolder = path.join(appFolder, 'fonts');\n                    mkdirSync(fontFolder);\n                    const fontDest = path.join(fontFolder, font);\n                    copyFileSync(fontSource, fontDest);\n                    c.pluginConfigiOS.embeddedFontSources.push(fontSource);\n                    c.pluginConfigiOS.embeddedFonts.push(font);\n                } else {\n                    logWarning(`Font ${chalk.white(fontSource)} doesn't exist! Skipping.`);\n                }\n            }\n        }\n    });\n\n\n    // CHECK TEAM ID IF DEVICE\n    const tId = getConfigProp(c, platform, 'teamID');\n    if (device && (!tId || tId === '')) {\n        logError(\n            `Looks like you're missing teamID in your ${chalk.white(\n                c.paths.appConfig.config,\n            )} => .platforms.${platform}.teamID . you will not be able to build ${platform} app for device!`,\n        );\n    }\n\n    await copyAssetsFolder(c, platform);\n    await copyAppleAssets(c, platform, appFolderName);\n    await parseAppDelegate(c, platform, appFolder, appFolderName, bundleAssets, bundlerIp, port);\n    await parseExportOptionsPlist(c, platform);\n    await parseXcscheme(c, platform);\n    await parsePodFile(c, platform);\n    await parseEntitlementsPlist(c, platform);\n    await parseInfoPlist(c, platform);\n    await copyBuildsFolder(c, platform);\n    await runPod(c, platform);\n    await parseXcodeProject(c, platform);\n    return true;\n};\n\nexport {\n    runPod,\n    copyAppleAssets,\n    configureXcodeProject,\n    exportXcodeProject,\n    archiveXcodeProject,\n    packageBundleForXcode,\n    runAppleLog,\n};\n"],"mappings":"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"}