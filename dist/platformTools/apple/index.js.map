{"version":3,"sources":["../../../src/platformTools/apple/index.js"],"names":["checkIfPodsIsRequired","c","appFolder","platform","podChecksumPath","path","join","fs","existsSync","podChecksum","readFileSync","toString","podContentChecksum","updatePodsChecksum","existingContent","writeFileSync","runPod","Promise","reject","program","updatePods","podsRequired","Error","cwd","env","process","s","isGenericError","includes","then","catch","er","copyAppleAssets","appFolderName","resolve","runXcodeProject","runtime","target","appPath","device","scheme","runScheme","bundleIsDev","bundleAssets","chalk","yellow","white","paths","appConfig","config","grey","devicesArr","length","name","udid","p","targetUDID","run","selectedDevice","JSON","stringify","packageBundleForXcode","_checkLockAndExec","find","d","devices","map","v","icon","green","version","isDevice","red","value","inquirer","prompt","message","type","choices","sim","replace","allowProvisioningUpdates","cmd","isDeviceLocked","isDeviceNotRegistered","confirm","isDevelopmentTeamMissing","loc","appId","_setDevelopmentTeam","isAutomaticSigningDisabled","_handleProvisioningIssues","isProvisioningMissing","e","msg","provisioningStyle","isProvAutomatic","proAutoText","fixCommand","workspacePath","confirmAuto","_setAutomaticSigning","files","platforms","buildSchemes","teamID","plat","composeXcodeArgsFromCLI","string","spacesReplaced","keysAndValues","split","unescapedValues","archiveXcodeProject","getAppFolderName","sdk","IOS","TVOS","MACOS","sdkArr","exportPath","ignoreLogs","exportPathArchive","ps","xcodebuildArchiveArgs","push","buildConfig","args","rawCommand","exportXcodeProject","xcodebuildExportArgs","isDev","maxErrorLength","entryFile","info","projectFolder","runAppleLog","filter","child","child_process","execFile","stdio","customFds","stdout","on","data","toLowerCase","console","log","configureXcodeProject","ip","port","bundlerIp","pluginConfigiOS","podfileInject","exportOptions","embeddedFonts","embeddedFontSources","pluginAppDelegateImports","pluginAppDelegateMethods","appDelegateMethods","application","didFinishLaunchingWithOptions","applicationDidBecomeActive","open","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","podfileSources","font","dir","key","includedFonts","common","fontSource","fontFolder","fontDest","tId"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular dep\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport inquirer from 'inquirer';\n\nimport { executeAsync, commandExistsSync } from '../../systemTools/exec';\nimport { getAppleDevices } from './deviceManager';\nimport { registerDevice } from './fastlane';\nimport {\n    getAppFolder,\n    getConfigProp,\n    getIP,\n    generateChecksum\n} from '../../common';\nimport { isPlatformActive } from '..';\nimport { copyAssetsFolder, copyBuildsFolder, parseFonts } from '../../projectTools/projectParser';\nimport { copyFileSync, mkdirSync, writeFileSync } from '../../systemTools/fileutils';\nimport { IOS, TVOS, MACOS } from '../../constants';\nimport {\n    parseExportOptionsPlist,\n    parseInfoPlist, parseEntitlementsPlist\n} from './plistParser';\nimport { parseXcscheme } from './xcschemeParser';\nimport { parsePodFile } from './podfileParser';\nimport { parseXcodeProject } from './xcodeParser';\nimport { parseAppDelegate } from './swiftParser';\nimport { logInfo, logTask,\n    logError,\n    logWarning, logDebug, logSuccess } from '../../systemTools/logger';\n\nconst checkIfPodsIsRequired = async (c) => {\n    const appFolder = getAppFolder(c, c.platform);\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    if (!fs.existsSync(podChecksumPath)) return true;\n    const podChecksum = fs.readFileSync(podChecksumPath).toString();\n    const podContentChecksum = generateChecksum(fs.readFileSync(path.join(appFolder, 'Podfile')).toString());\n\n    if (podChecksum !== podContentChecksum) {\n        logDebug('runPod:isMandatory');\n        return true;\n    }\n    logInfo('Pods do not seem like they need to be updated. If you want to update them manually run the same command with \"-u\" parameter');\n    return false;\n};\n\nconst updatePodsChecksum = (c) => {\n    logTask('updatePodsChecksum');\n    const appFolder = getAppFolder(c, c.platform);\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    const podContentChecksum = generateChecksum(fs.readFileSync(path.join(appFolder, 'Podfile')).toString());\n    if (fs.existsSync(podChecksumPath)) {\n        const existingContent = fs.readFileSync(podChecksumPath).toString();\n        if (existingContent !== podContentChecksum) {\n            logDebug(`updatePodsChecksum:${podContentChecksum}`);\n            return fs.writeFileSync(podChecksumPath, podContentChecksum);\n        }\n        return true;\n    }\n    logDebug(`updatePodsChecksum:${podContentChecksum}`);\n    return fs.writeFileSync(podChecksumPath, podContentChecksum);\n};\n\nconst runPod = async (c, platform) => {\n    logTask(`runPod:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    if (!fs.existsSync(appFolder)) {\n        return Promise.reject(`Location ${appFolder} does not exists!`);\n    }\n    const podsRequired = c.program.updatePods || await checkIfPodsIsRequired(c);\n\n    if (podsRequired) {\n        if (!commandExistsSync('pod')) throw new Error('Cocoapods not installed. Please run `sudo gem install cocoapods`');\n\n        try {\n            await executeAsync(c, 'pod install', {\n                cwd: appFolder,\n                env: process.env,\n            });\n        } catch (e) {\n            const s = e?.toString ? e.toString() : '';\n            const isGenericError = s.includes('No provisionProfileSpecifier configured') || s.includes('TypeError:') || s.includes('ReferenceError:') || s.includes('find gem cocoapods');\n            if (isGenericError) return new Error(`pod install failed with:\\n ${s}`);\n            logWarning(`Looks like pod install is not enough! Let's try pod update! Error:\\n ${s}`);\n            return executeAsync(c, 'pod update', { cwd: appFolder, env: process.env })\n                .then(() => updatePodsChecksum(c))\n                .catch(er => Promise.reject(er));\n        }\n\n        updatePodsChecksum(c);\n        return true;\n    }\n};\n\nconst copyAppleAssets = (c, platform, appFolderName) => new Promise((resolve) => {\n    logTask('copyAppleAssets');\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const appFolder = getAppFolder(c, platform);\n\n    // ASSETS\n    fs.writeFileSync(path.join(appFolder, 'main.jsbundle'), '{}');\n    mkdirSync(path.join(appFolder, 'assets'));\n    mkdirSync(path.join(appFolder, `${appFolderName}/images`));\n\n    resolve();\n});\n\nexport const runXcodeProject = async (c) => {\n    logTask(`runXcodeProject:${c.platform}:${c.runtime.target}`);\n\n    const appPath = getAppFolder(c, c.platform);\n    const { device } = c.program;\n    const scheme = getConfigProp(c, c.platform, 'scheme');\n    const runScheme = getConfigProp(c, c.platform, 'runScheme');\n    const bundleIsDev = getConfigProp(c, c.platform, 'bundleIsDev') === true;\n    const bundleAssets = getConfigProp(c, c.platform, 'bundleAssets') === true;\n    let p;\n\n    if (!scheme) {\n        return Promise.reject(\n            `You missing scheme in platforms.${chalk.yellow(c.platform)} in your ${chalk.white(\n                c.paths.appConfig.config,\n            )}! Check example config for more info:  ${chalk.grey(\n                'https://github.com/pavjacko/renative/blob/master/appConfigs/helloWorld/renative.json',\n            )} `,\n        );\n    }\n\n    let devicesArr;\n    if (device === true) devicesArr = await getAppleDevices(c, c.platform, false, true);\n    else if (c.runtime.target === true) devicesArr = await getAppleDevices(c, c.platform, true, false);\n\n    if (device === true) {\n        if (devicesArr.length === 1) {\n            logSuccess(`Found one device connected! device name: ${chalk.white(devicesArr[0].name)} udid: ${chalk.white(devicesArr[0].udid)}`);\n            if (devicesArr[0].udid) {\n                p = `--device --udid ${devicesArr[0].udid}`;\n                c.runtime.targetUDID = devicesArr[0].udid;\n            } else {\n                p = `--device ${devicesArr[0].name}`;\n            }\n        } else if (devicesArr.length > 1) {\n            const run = (selectedDevice) => {\n                logDebug(`Selected device: ${JSON.stringify(selectedDevice, null, 3)}`);\n                c.runtime.targetUDID = selectedDevice.udid;\n                if (selectedDevice.udid) {\n                    p = `--device --udid ${selectedDevice.udid}`;\n                } else {\n                    p = `--device ${selectedDevice.name}`;\n                }\n\n                logDebug(`RN params: ${p}`);\n\n                if (bundleAssets) {\n                    logDebug('Assets will be bundled');\n                    return packageBundleForXcode(c, c.platform, bundleIsDev).then(() => _checkLockAndExec(c, appPath, scheme, runScheme, p));\n                }\n                return _checkLockAndExec(c, appPath, scheme, runScheme, p);\n            };\n\n            if (c.runtime.target !== true) {\n                const selectedDevice = devicesArr.find(d => d.name === c.runtime.target);\n                if (selectedDevice) {\n                    return run(selectedDevice);\n                }\n                logWarning(`Could not find device ${c.runtime.target}`);\n            }\n\n            const devices = devicesArr.map(v => ({ name: `${v.name} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${v.isDevice ? chalk.red(' (device)') : ''}`, value: v }));\n\n            const { sim } = await inquirer.prompt({\n                name: 'sim',\n                message: 'Select the device you want to launch on',\n                type: 'list',\n                choices: devices\n            });\n\n            if (sim) {\n                return run(sim);\n            }\n        } else {\n            return Promise.reject(`No ${c.platform} devices connected!`);\n        }\n    } else if (device) {\n        p = `--device ${device}`;\n    } else if (c.runtime.target === true) {\n        const devices = devicesArr.map(v => ({ name: `${v.name} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${v.isDevice ? chalk.red(' (device)') : ''}`, value: v }));\n\n        const { sim } = await inquirer.prompt({\n            name: 'sim',\n            message: 'Select the device you want to launch on',\n            type: 'list',\n            choices: devices\n        });\n        c.runtime.target = sim.name;\n        p = `--simulator ${c.runtime.target.replace(/(\\s+)/g, '\\\\$1')}`;\n    } else {\n        p = `--simulator ${c.runtime.target.replace(/(\\s+)/g, '\\\\$1')}`;\n    }\n\n    if (p) {\n        const allowProvisioningUpdates = getConfigProp(c, c.platform, 'allowProvisioningUpdates', true);\n        // if (allowProvisioningUpdates) p.push('--allowProvisioningUpdates');\n\n        if (bundleAssets) {\n            return packageBundleForXcode(c, c.platform, bundleIsDev).then(() => _checkLockAndExec(c, appPath, scheme, runScheme, p));\n        }\n        return _checkLockAndExec(c, appPath, scheme, runScheme, p);\n    }\n    return Promise.reject('Missing options for react-native command!');\n};\n\nconst _checkLockAndExec = async (c, appPath, scheme, runScheme, p) => {\n    logTask(`_checkLockAndExec:${scheme}:${runScheme}`);\n    const cmd = `react-native run-ios --project-path ${appPath} --scheme ${scheme} --configuration ${runScheme} ${p}`;\n    try {\n        await executeAsync(c, cmd);\n        return true;\n    } catch (e) {\n        const isDeviceLocked = e.includes('ERROR:DEVICE_LOCKED');\n        if (isDeviceLocked) {\n            await inquirer.prompt({ message: 'Unlock your device and press ENTER', type: 'confirm', name: 'confirm' });\n            return executeAsync(c, cmd);\n        }\n        const isDeviceNotRegistered = e.includes(\"doesn't include the currently selected device\");\n        if (isDeviceNotRegistered) {\n            logError(e);\n            logWarning(`${c.platform} DEVICE: ${chalk.white(c.runtime.target)} with UDID: ${chalk.white(c.runtime.targetUDID)} is not included in your provisionong profile in TEAM: ${chalk.white(getConfigProp(c, c.platform, 'teamID'))}`);\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                message: 'Do you want to register it?',\n                type: 'confirm'\n            });\n            if (confirm) {\n                await registerDevice(c);\n                return Promise.reject('Updated. Re-run your last command');\n                // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n                // await configureXcodeProject(c, c.platform);\n                // return runXcodeProject(c);\n            }\n        }\n        const isDevelopmentTeamMissing = e.includes('requires a development team. Select a development team');\n        if (isDevelopmentTeamMissing) {\n            const loc = `./appConfigs/${c.runtime.appId}/renative.json:{ \"platforms\": { \"${c.platform}\": { \"teamID\": \".....\"`;\n            logError(e);\n            logWarning(`You need specify the development team if you want to run app on ${c.platform} device. this can be set manually in ${chalk.white(loc)}\nYou can find correct teamID in the URL of your apple developer account: ${chalk.white('https://developer.apple.com/account/#/overview/YOUR-TEAM-ID')}`);\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                message: `Type in your Apple Team ID to be used (will be saved to ${c.paths.appConfig?.config})`,\n                type: 'input'\n            });\n            if (confirm) {\n                await _setDevelopmentTeam(c, confirm);\n                return Promise.reject('Updated. Re-run your last command');\n                // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n                // await configureXcodeProject(c, c.platform);\n                // return runXcodeProject(c);\n            }\n        }\n        const isAutomaticSigningDisabled = e.includes('Automatic signing is disabled and unable to generate a profile');\n        if (isAutomaticSigningDisabled) {\n            return _handleProvisioningIssues(c, e, 'Your iOS App Development provisioning profiles don\\'t match. under manual signing mode');\n        }\n        const isProvisioningMissing = e.includes('requires a provisioning profile');\n        if (isProvisioningMissing) {\n            return _handleProvisioningIssues(c, e, 'Your iOS App requires a provisioning profile');\n        }\n        return Promise.reject(e);\n    }\n};\n\nconst _handleProvisioningIssues = async (c, e, msg) => {\n    const provisioningStyle = getConfigProp(c, c.platform, 'provisioningStyle');\n    // Sometimes xcodebuild reports Automatic signing is disabled but it could be keychain not accepted by user\n    const isProvAutomatic = provisioningStyle === 'Automatic';\n    const proAutoText = isProvAutomatic ? '' : `${chalk.white('[4]>')} Switch to automatic signing for appId: ${c.runtime.appId} , platform: ${c.platform}, scheme: ${c.runtime.scheme}`;\n    const fixCommand = `rnv crypto updateProfile -p ${c.platform} -s ${c.runtime.scheme}`;\n    const workspacePath = chalk.white(`${getAppFolder(c, c.platform)}/RNVApp.xcworkspace`);\n    logError(e);\n    logWarning(`${msg}. To fix try:\n${chalk.white('[1]>')} Configure your certificates, provisioning profiles correctly manually\n${chalk.white('[2]>')} Try to generate matching profiles with ${chalk.white(fixCommand)} (you need correct priviledges in apple developer portal)\n${chalk.white('[3]>')} Open generated project in Xcode: ${workspacePath} and debug from there (Sometimes this helps for the first-time builds)\n${proAutoText}`);\n    if (isProvAutomatic) return false;\n    const { confirmAuto } = await inquirer.prompt({\n        name: 'confirmAuto',\n        message: 'Switch to automatic signing?',\n        type: 'confirm'\n    });\n    if (confirmAuto) {\n        await _setAutomaticSigning(c);\n        return Promise.reject('Updated. Re-run your last command');\n        // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n        // await configureXcodeProject(c, c.platform);\n        // return runXcodeProject(c);\n    }\n};\n\nconst _setAutomaticSigning = async (c) => {\n    logTask(`_setAutomaticSigning:${c.platform}`);\n\n    const scheme = c.files.appConfig?.config?.platforms?.[c.platform]?.buildSchemes?.[c.runtime.scheme];\n    if (scheme) {\n        scheme.provisioningStyle = 'Automatic';\n        writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n        logSuccess(`Succesfully updated ${c.paths.appConfig.config}`);\n    } else {\n        return Promise.reject(`Failed to update ${c.paths.appConfig?.config}.\"platforms\": { \"${c.platform}\": { buildSchemes: { \"${c.runtime.scheme}\" ... Object is null. Try update file manually`);\n    }\n};\n\nconst _setDevelopmentTeam = async (c, teamID) => {\n    logTask(`_setDevelopmentTeam:${teamID}`);\n\n    const plat = c.files.appConfig?.config?.platforms?.[c.platform];\n    if (plat) {\n        plat.teamID = teamID;\n        writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n        logSuccess(`Succesfully updated ${c.paths.appConfig.config}`);\n    } else {\n        return Promise.reject(`Failed to update ${c.paths.appConfig?.config}.\"platforms\": { \"${c.platform}\" ... Object is null. Try update file manually`);\n    }\n};\n\nconst composeXcodeArgsFromCLI = (string) => {\n    const spacesReplaced = string.replace(/\\s(?=(?:[^'\"`]*(['\"`])[^'\"`]*\\1)*[^'\"`]*$)/g, '&&&'); // replaces spaces outside quotes with &&& for easy split\n    const keysAndValues = spacesReplaced.split('&&&');\n    const unescapedValues = keysAndValues.map(s => s.replace(/\\'/g, '').replace(/\"/g, '').replace(/\\\\/g, '')); // removes all quotes or backslashes\n\n    return unescapedValues;\n};\n\nconst archiveXcodeProject = (c, platform) => {\n    logTask(`archiveXcodeProject:${platform}`);\n\n\n    const appFolderName = getAppFolderName(c, platform);\n    const runScheme = getConfigProp(c, platform, 'runScheme', 'Debug');\n    let sdk = getConfigProp(c, platform, 'sdk');\n    if (!sdk) {\n        if (platform === IOS) sdk = 'iphoneos';\n        if (platform === TVOS) sdk = 'appletvos';\n        if (platform === MACOS) sdk = 'macosx';\n    }\n    const sdkArr = [sdk];\n\n    const appPath = getAppFolder(c, platform);\n    const exportPath = path.join(appPath, 'release');\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const allowProvisioningUpdates = getConfigProp(c, platform, 'allowProvisioningUpdates', true);\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n    const bundleIsDev = getConfigProp(c, platform, 'bundleIsDev') === true;\n    const exportPathArchive = `${exportPath}/${scheme}.xcarchive`;\n    let ps = '';\n    if (c.program.xcodebuildArchiveArgs) {\n        ps = c.program.xcodebuildArchiveArgs;\n    }\n    const p = [];\n\n    if (!ps.includes('-workspace')) {\n        p.push('-workspace');\n        p.push(`${appPath}/${appFolderName}.xcworkspace`);\n    }\n    if (!ps.includes('-scheme')) {\n        p.push('-scheme');\n        p.push(scheme);\n    }\n    if (!ps.includes('-sdk')) {\n        p.push('-sdk');\n        p.push(...sdkArr);\n    }\n    if (!ps.includes('-configuration')) {\n        p.push('-configuration');\n        p.push(runScheme);\n    }\n    p.push('archive');\n    if (!ps.includes('-archivePath')) {\n        p.push('-archivePath');\n        p.push(exportPathArchive);\n    }\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) p.push('-allowProvisioningUpdates');\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n    // if (sdk === 'iphonesimulator') p.push('ONLY_ACTIVE_ARCH=NO', \"-destination='name=iPhone 7,OS=10.2'\");\n\n\n    logTask('archiveXcodeProject: STARTING xcodebuild ARCHIVE...');\n\n    if (c.buildConfig.platforms[platform].runScheme === 'Release') {\n        return packageBundleForXcode(c, platform, bundleIsDev)\n            .then(() => executeAsync(c, `xcodebuild ${ps} ${p.join(' ')}`))\n            .then(() => {\n                logSuccess(`Your Archive is located in ${chalk.white(exportPath)} .`);\n            });\n    }\n\n    const args = ps !== '' ? [...composeXcodeArgsFromCLI(ps), ...p] : p;\n\n    logDebug('xcodebuild args', args);\n\n    return executeAsync('xcodebuild', { rawCommand: { args } })\n        .then(() => {\n            logSuccess(`Your Archive is located in ${chalk.white(exportPath)} .`);\n        });\n};\n\nconst exportXcodeProject = (c, platform) => {\n    logTask(`exportXcodeProject:${platform}`);\n\n    const appPath = getAppFolder(c, platform);\n    const exportPath = path.join(appPath, 'release');\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const allowProvisioningUpdates = getConfigProp(c, platform, 'allowProvisioningUpdates', true);\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n\n    let ps = '';\n    if (c.program.xcodebuildExportArgs) {\n        ps = c.program.xcodebuildExportArgs;\n    }\n    const p = ['-exportArchive'];\n\n    if (!ps.includes('-archivePath')) {\n        p.push(`-archivePath ${exportPath}/${scheme}.xcarchive`);\n    }\n    if (!ps.includes('-exportOptionsPlist')) {\n        p.push(`-exportOptionsPlist ${appPath}/exportOptions.plist`);\n    }\n    if (!ps.includes('-exportPath')) {\n        p.push(`-exportPath ${exportPath}`);\n    }\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) p.push('-allowProvisioningUpdates');\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n\n    logDebug('running', p);\n\n    logTask('exportXcodeProject: STARTING xcodebuild EXPORT...');\n\n    return executeAsync(c, `xcodebuild ${p.join(' ')}`)\n        .then(() => {\n            logSuccess(`Your IPA is located in ${chalk.white(exportPath)} .`);\n        });\n};\n\nconst packageBundleForXcode = (c, platform, isDev = false) => {\n    logTask(`packageBundleForXcode:${platform}`);\n    const { maxErrorLength } = c.program;\n    const args = [\n        'bundle',\n        '--platform',\n        'ios',\n        '--dev',\n        isDev,\n        '--assets-dest',\n        `platformBuilds/${c.runtime.appId}_${platform}`,\n        '--entry-file',\n        `${c.buildConfig.platforms[platform].entryFile}.js`,\n        '--bundle-output',\n        `${getAppFolder(c, platform)}/main.jsbundle`,\n    ];\n\n    if (c.program.info) {\n        args.push('--verbose');\n    }\n\n    return executeAsync(c, `react-native ${args.join(' ')}`);\n};\n\nexport const getAppFolderName = (c, platform) => {\n    const projectFolder = getConfigProp(c, platform, 'projectFolder');\n    if (projectFolder) {\n        return projectFolder;\n    }\n    return platform === IOS ? 'RNVApp' : 'RNVAppTVOS';\n};\n\n\n// Resolve or reject will not be called so this will keep running\nconst runAppleLog = c => new Promise(() => {\n    logTask('runAppleLog');\n    const filter = c.program.filter || 'RNV';\n    const child = child_process.execFile(\n        'xcrun',\n        ['simctl', 'spawn', 'booted', 'log', 'stream', '--predicate', `eventMessage contains \\\"${filter}\\\"`],\n        { stdio: 'inherit', customFds: [0, 1, 2] },\n    );\n        // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString();\n        if (d.toLowerCase().includes('error')) {\n            console.log(chalk.red(d));\n        } else if (d.toLowerCase().includes('success')) {\n            console.log(chalk.green(d));\n        } else {\n            console.log(d);\n        }\n    });\n});\n\nconst configureXcodeProject = async (c, platform, ip, port) => {\n    logTask(`configureXcodeProject:${platform}`);\n    const { device } = c.program;\n    const bundlerIp = device ? getIP() : 'localhost';\n    const appFolder = getAppFolder(c, platform);\n    const appFolderName = getAppFolderName(c, platform);\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n    // INJECTORS\n    c.pluginConfigiOS = {\n        podfileInject: '',\n        exportOptions: '',\n        embeddedFonts: [],\n        embeddedFontSources: [],\n        pluginAppDelegateImports: '',\n        pluginAppDelegateMethods: '',\n        appDelegateMethods: {\n            application: {\n                didFinishLaunchingWithOptions: [],\n                applicationDidBecomeActive: [],\n                open: [],\n                supportedInterfaceOrientationsFor: [],\n                didReceiveRemoteNotification: [],\n                didFailToRegisterForRemoteNotificationsWithError: [],\n                didReceive: [],\n                didRegister: [],\n                didRegisterForRemoteNotificationsWithDeviceToken: []\n            },\n            userNotificationCenter: {\n                willPresent: []\n            }\n        },\n        podfileSources: [],\n    };\n\n    // FONTS\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const { includedFonts } = c.buildConfig.common;\n            if (includedFonts && (includedFonts.includes('*') || includedFonts.includes(key))) {\n                const fontSource = path.join(dir, font);\n                if (fs.existsSync(fontSource)) {\n                    const fontFolder = path.join(appFolder, 'fonts');\n                    mkdirSync(fontFolder);\n                    const fontDest = path.join(fontFolder, font);\n                    copyFileSync(fontSource, fontDest);\n                    c.pluginConfigiOS.embeddedFontSources.push(fontSource);\n                    c.pluginConfigiOS.embeddedFonts.push(font);\n                } else {\n                    logWarning(`Font ${chalk.white(fontSource)} doesn't exist! Skipping.`);\n                }\n            }\n        }\n    });\n\n\n    // CHECK TEAM ID IF DEVICE\n    const tId = getConfigProp(c, platform, 'teamID');\n    if (device && (!tId || tId === '')) {\n        logError(\n            `Looks like you're missing teamID in your ${chalk.white(\n                c.paths.appConfig.config,\n            )} => .platforms.${platform}.teamID . you will not be able to build ${platform} app for device!`,\n        );\n    }\n\n    await copyAssetsFolder(c, platform);\n    await copyAppleAssets(c, platform, appFolderName);\n    await parseAppDelegate(c, platform, appFolder, appFolderName, bundleAssets, bundlerIp, port);\n    await parseExportOptionsPlist(c, platform);\n    await parseXcscheme(c, platform);\n    await parsePodFile(c, platform);\n    await parseEntitlementsPlist(c, platform);\n    await parseInfoPlist(c, platform);\n    await copyBuildsFolder(c, platform);\n    await runPod(c, platform);\n    await parseXcodeProject(c, platform);\n    return true;\n};\n\nexport {\n    runPod,\n    copyAppleAssets,\n    configureXcodeProject,\n    exportXcodeProject,\n    archiveXcodeProject,\n    packageBundleForXcode,\n    runAppleLog,\n};\n"],"file":"index.js"}