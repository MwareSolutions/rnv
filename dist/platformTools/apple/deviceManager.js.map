{"version":3,"file":"deviceManager.js","names":["getAppleDevices","c","platform","ignoreDevices","ignoreSimulators","logTask","skipTargetCheck","program","executeAsync","devicesAndSims","JSON","simctl","parse","availableSims","Object","keys","devices","forEach","runtime","console","log","device","isAvailable","push","version","split","pop","devicesArr","_parseIOSDevicesList","simulatorsArr","allDevices","filter","d","includes","IOS","icon","TVOS","rawDevices","decideIcon","name","isDevice","line","s1","match","s2","s3","substring","indexOf","s4","isSim","length","lastIndexOf","udid","replace","launchAppleSimulator","target","i","selectedDevice","_launchSimulator","logWarning","chalk","white","map","v","green","grey","red","value","inquirer","prompt","message","type","choices","sim","Promise","reject","child_process","spawnSync","e","listAppleDevices","devicesString","bold","logToSummary"],"sources":["../../../src/platformTools/apple/deviceManager.js"],"sourcesContent":["import inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport {\n    getAppFolder,\n} from '../../common';\nimport { logToSummary, logTask, logWarning } from '../../systemTools/logger';\nimport { IOS, TVOS } from '../../constants';\nimport { executeAsync } from '../../systemTools/exec';\n\nexport const getAppleDevices = async (c, platform, ignoreDevices, ignoreSimulators) => {\n    logTask(`getAppleDevices:${platform},ignoreDevices:${ignoreDevices},ignoreSimulators${ignoreSimulators}`);\n    const { program: { skipTargetCheck } } = c;\n    // const devices = child_process.execFileSync('xcrun', ['instruments', '-s'], {\n    //     encoding: 'utf8',\n    // });\n\n    const devicesAndSims = await executeAsync('xcrun instruments -s');\n    const simctl = JSON.parse(await executeAsync('xcrun simctl list --json'));\n    const availableSims = [];\n    Object.keys(simctl.devices).forEach((runtime) => {\n        console.log('runtime', runtime);\n        simctl.devices[runtime].forEach((device) => {\n            if (device.isAvailable) availableSims.push({ ...device, version: runtime.split('.').pop() });\n        });\n    });\n\n    const devicesArr = _parseIOSDevicesList(devicesAndSims, platform, ignoreDevices, ignoreSimulators);\n    const simulatorsArr = _parseIOSDevicesList(availableSims, platform, ignoreDevices, ignoreSimulators);\n    let allDevices = [...devicesArr, ...simulatorsArr];\n\n    if (!skipTargetCheck) {\n        // filter watches\n        allDevices = allDevices.filter(d => !d.version.includes('watchOS'));\n        // filter other platforms\n        allDevices = allDevices.filter((d) => {\n            if (platform === IOS && (d.icon?.includes('Phone') || d.icon?.includes('Tablet'))) return true;\n            if (platform === TVOS && d.icon?.includes('TV')) return true;\n            return false;\n        });\n    }\n    return allDevices;\n};\n\nconst _parseIOSDevicesList = (rawDevices, platform, ignoreDevices = false, ignoreSimulators = false) => {\n    const devices = [];\n    const decideIcon = (device) => {\n        const { name, isDevice } = device;\n        switch (platform) {\n            case IOS:\n                if (name.includes('iPhone') || name.includes('iPad') || name.includes('iPod')) {\n                    let icon = 'Phone ðŸ“±';\n                    if (name.includes('iPad')) icon = 'Tablet ðŸ’Š';\n                    return icon;\n                }\n                return null;\n            case TVOS:\n                if ((name.includes('TV')) && !name.includes('iPhone') && !name.includes('iPad')) {\n                    return 'TV ðŸ“º';\n                }\n                return null;\n            default:\n                if (isDevice) {\n                    return 'Apple Device';\n                }\n                return null;\n        }\n    };\n    if (typeof rawDevices === 'string' && !ignoreDevices) {\n        rawDevices.split('\\n').forEach((line) => {\n            const s1 = line.match(/\\[.*?\\]/);\n            const s2 = line.match(/\\(.*?\\)/g);\n            const s3 = line.substring(0, line.indexOf('(') - 1);\n            const s4 = line.substring(0, line.indexOf('[') - 1);\n            let isSim = false;\n            if (s2 && s1) {\n                if (s2[s2.length - 1] === '(Simulator)') {\n                    isSim = true;\n                    s2.pop();\n                }\n                const version = s2.pop();\n                let name = `${s4.substring(0, s4.lastIndexOf('(') - 1)}`;\n                name = name || 'undefined';\n                const udid = s1[0].replace(/\\[|\\]/g, '');\n                const isDevice = !isSim;\n                if (!isDevice) return; // only take care of devices.\n\n                if (!ignoreDevices) {\n                    const device = { udid, name, version, isDevice };\n                    devices.push({ ...device, icon: decideIcon(device) });\n                }\n            }\n        });\n    } else if (typeof rawDevices === 'object' && !ignoreSimulators) {\n        rawDevices.forEach((d) => {\n            const { name, udid, version } = d;\n            const device = {\n                name,\n                udid,\n                isDevice: false,\n                version\n            };\n            devices.push({ ...device, icon: decideIcon(device) });\n        });\n    }\n\n    return devices;\n};\n\nexport const launchAppleSimulator = async (c, platform, target) => {\n    logTask(`launchAppleSimulator:${platform}:${target}`);\n\n    const devicesArr = await getAppleDevices(c, platform, true);\n    let selectedDevice;\n    for (let i = 0; i < devicesArr.length; i++) {\n        if (devicesArr[i].name === target) {\n            selectedDevice = devicesArr[i];\n        }\n    }\n    if (selectedDevice) {\n        _launchSimulator(selectedDevice);\n        return selectedDevice.name;\n    }\n\n    logWarning(`Your specified simulator target ${chalk.white(target)} doesn't exists`);\n    const devices = devicesArr.map(v => ({ name: `${v.name} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${v.isDevice ? chalk.red(' (device)') : ''}`, value: v }));\n\n    const { sim } = await inquirer.prompt({\n        name: 'sim',\n        message: 'Select the simulator you want to launch',\n        type: 'list',\n        choices: devices\n    });\n\n    if (sim) {\n        _launchSimulator(sim);\n        return sim.name;\n    }\n    return Promise.reject('Action canceled!');\n};\n\nconst _launchSimulator = (selectedDevice) => {\n    try {\n        child_process.spawnSync('xcrun', ['instruments', '-w', selectedDevice.udid]);\n    } catch (e) {\n        // instruments always fail with 255 because it expects more arguments,\n        // but we want it to only launch the simulator\n    }\n};\n\nexport const listAppleDevices = async (c, platform) => {\n    logTask(`listAppleDevices:${platform}`);\n\n    const devicesArr = await getAppleDevices(c, platform);\n    let devicesString = '';\n    devicesArr.forEach((v, i) => {\n        devicesString += ` [${i + 1}]> ${chalk.bold(v.name)} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${\n            v.isDevice ? chalk.red(' (device)') : ''\n        }\\n`;\n    });\n\n    logToSummary(`${platform} Targets:\\n\\n${devicesString}`);\n};\n"],"mappings":"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"}