{"version":3,"sources":["../../../src/platformTools/apple/deviceManager.js"],"names":["getAppleDevices","c","platform","ignoreDevices","ignoreSimulators","skipTargetCheck","program","devicesAndSims","JSON","simctl","parse","availableSims","Object","keys","devices","forEach","runtime","console","log","device","isAvailable","push","version","split","pop","devicesArr","_parseIOSDevicesList","simulatorsArr","allDevices","filter","d","includes","IOS","icon","TVOS","rawDevices","decideIcon","name","isDevice","line","s1","match","s2","s3","substring","indexOf","s4","isSim","length","lastIndexOf","udid","replace","launchAppleSimulator","target","i","selectedDevice","_launchSimulator","chalk","white","map","v","green","grey","red","value","inquirer","prompt","message","type","choices","sim","Promise","reject","child_process","spawnSync","e","listAppleDevices","devicesString","bold"],"mappings":"kfAAA;AACA;AACA;AACA;;;AAGA;AACA;AACA,4C;;AAEO,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAOC,CAAP,CAAUC,QAAV,CAAoBC,aAApB,CAAmCC,gBAAnC;AAC3B,uCAA2BF,QAA3B,mBAAqDC,aAArD,qBAAsFC,gBAAtF;AACmBC,eAFQ,CAEcJ,CAFd,CAEnBK,OAFmB,CAERD,eAFQ;;;;;AAOE,uBAAa,sBAAb,CAPF,SAOrBE,cAPqB;AAQZC,IARY,mDAQK,uBAAa,0BAAb,CARL,mCAQrBC,MARqB,aAQPC,KARO;AASrBC,aATqB,CASL,EATK;AAU3BC,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACK,OAAnB,EAA4BC,OAA5B,CAAoC,SAACC,OAAD,CAAa;AAC7CC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBF,OAAvB;AACAP,MAAM,CAACK,OAAP,CAAeE,OAAf,EAAwBD,OAAxB,CAAgC,SAACI,MAAD,CAAY;AACxC,GAAIA,MAAM,CAACC,WAAX,CAAwBT,aAAa,CAACU,IAAd,kBAAwBF,MAAxB,EAAgCG,OAAO,CAAEN,OAAO,CAACO,KAAR,CAAc,GAAd,EAAmBC,GAAnB,EAAzC;AAC3B,CAFD;AAGH,CALD;;AAOMC,UAjBqB,CAiBRC,oBAAoB,CAACnB,cAAD,CAAiBL,QAAjB,CAA2BC,aAA3B,CAA0CC,gBAA1C,CAjBZ;AAkBrBuB,aAlBqB,CAkBLD,oBAAoB,CAACf,aAAD,CAAgBT,QAAhB,CAA0BC,aAA1B,CAAyCC,gBAAzC,CAlBf;AAmBvBwB,UAnBuB,2CAmBNH,UAnBM,kCAmBSE,aAnBT;;AAqB3B,GAAI,CAACtB,eAAL,CAAsB;;AAElBuB,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB,SAAAC,CAAC,QAAI,CAACA,CAAC,CAACR,OAAF,CAAUS,QAAV,CAAmB,SAAnB,CAAL,EAAnB,CAAb;;AAEAH,UAAU,CAAGA,UAAU,CAACC,MAAX,CAAkB,SAACC,CAAD,CAAO;AAClC,GAAI5B,QAAQ,GAAK8B,cAAb,GAAqB,UAAAF,CAAC,CAACG,IAAF,uBAAQF,QAAR,CAAiB,OAAjB,eAA6BD,CAAC,CAACG,IAA/B,eAA6B,SAAQF,QAAR,CAAiB,QAAjB,CAA7B,CAArB,CAAJ,CAAmF,MAAO,KAAP;AACnF,GAAI7B,QAAQ,GAAKgC,eAAb,aAAqBJ,CAAC,CAACG,IAAvB,eAAqB,SAAQF,QAAR,CAAiB,IAAjB,CAArB,CAAJ,CAAiD,MAAO,KAAP;AACjD,MAAO,MAAP;AACH,CAJY,CAAb;AAKH,CA9B0B;AA+BpBH,UA/BoB,iDAAxB,C;;;AAkCP,GAAMF,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACS,UAAD,CAAajC,QAAb,CAA2E,IAApDC,CAAAA,aAAoD,2DAApC,KAAoC,IAA7BC,CAAAA,gBAA6B,2DAAV,KAAU;AACpG,GAAMU,CAAAA,OAAO,CAAG,EAAhB;AACA,GAAMsB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACjB,MAAD,CAAY;AACnBkB,IADmB,CACAlB,MADA,CACnBkB,IADmB,CACbC,QADa,CACAnB,MADA,CACbmB,QADa;AAE3B,OAAQpC,QAAR;AACI,IAAK8B,eAAL;AACI,GAAIK,IAAI,CAACN,QAAL,CAAc,QAAd,GAA2BM,IAAI,CAACN,QAAL,CAAc,MAAd,CAA3B,EAAoDM,IAAI,CAACN,QAAL,CAAc,MAAd,CAAxD,CAA+E;AAC3E,GAAIE,CAAAA,IAAI,CAAG,UAAX;AACA,GAAII,IAAI,CAACN,QAAL,CAAc,MAAd,CAAJ,CAA2BE,IAAI,CAAG,WAAP;AAC3B,MAAOA,CAAAA,IAAP;AACH;AACD,MAAO,KAAP;AACJ,IAAKC,gBAAL;AACI,GAAKG,IAAI,CAACN,QAAL,CAAc,IAAd,CAAD,EAAyB,CAACM,IAAI,CAACN,QAAL,CAAc,QAAd,CAA1B,EAAqD,CAACM,IAAI,CAACN,QAAL,CAAc,MAAd,CAA1D,CAAiF;AAC7E,MAAO,OAAP;AACH;AACD,MAAO,KAAP;AACJ;AACI,GAAIO,QAAJ,CAAc;AACV,MAAO,cAAP;AACH;AACD,MAAO,KAAP,CAjBR;;AAmBH,CArBD;AAsBA,GAAI,MAAOH,CAAAA,UAAP,GAAsB,QAAtB,EAAkC,CAAChC,aAAvC,CAAsD;AAClDgC,UAAU,CAACZ,KAAX,CAAiB,IAAjB,EAAuBR,OAAvB,CAA+B,SAACwB,IAAD,CAAU;AACrC,GAAMC,CAAAA,EAAE,CAAGD,IAAI,CAACE,KAAL,CAAW,SAAX,CAAX;AACA,GAAMC,CAAAA,EAAE,CAAGH,IAAI,CAACE,KAAL,CAAW,UAAX,CAAX;AACA,GAAME,CAAAA,EAAE,CAAGJ,IAAI,CAACK,SAAL,CAAe,CAAf,CAAkBL,IAAI,CAACM,OAAL,CAAa,GAAb,EAAoB,CAAtC,CAAX;AACA,GAAMC,CAAAA,EAAE,CAAGP,IAAI,CAACK,SAAL,CAAe,CAAf,CAAkBL,IAAI,CAACM,OAAL,CAAa,GAAb,EAAoB,CAAtC,CAAX;AACA,GAAIE,CAAAA,KAAK,CAAG,KAAZ;AACA,GAAIL,EAAE,EAAIF,EAAV,CAAc;AACV,GAAIE,EAAE,CAACA,EAAE,CAACM,MAAH,CAAY,CAAb,CAAF,GAAsB,aAA1B,CAAyC;AACrCD,KAAK,CAAG,IAAR;AACAL,EAAE,CAAClB,GAAH;AACH;AACD,GAAMF,CAAAA,OAAO,CAAGoB,EAAE,CAAClB,GAAH,EAAhB;AACA,GAAIa,CAAAA,IAAI,IAAMS,EAAE,CAACF,SAAH,CAAa,CAAb,CAAgBE,EAAE,CAACG,WAAH,CAAe,GAAf,EAAsB,CAAtC,CAAd;AACAZ,IAAI,CAAGA,IAAI,EAAI,WAAf;AACA,GAAMa,CAAAA,IAAI,CAAGV,EAAE,CAAC,CAAD,CAAF,CAAMW,OAAN,CAAc,QAAd,CAAwB,EAAxB,CAAb;AACA,GAAMb,CAAAA,QAAQ,CAAG,CAACS,KAAlB;AACA,GAAI,CAACT,QAAL,CAAe;;AAEf,GAAI,CAACnC,aAAL,CAAoB;AAChB,GAAMgB,CAAAA,MAAM,CAAG,CAAE+B,IAAI,CAAJA,IAAF,CAAQb,IAAI,CAAJA,IAAR,CAAcf,OAAO,CAAPA,OAAd,CAAuBgB,QAAQ,CAARA,QAAvB,CAAf;AACAxB,OAAO,CAACO,IAAR,kBAAkBF,MAAlB,EAA0Bc,IAAI,CAAEG,UAAU,CAACjB,MAAD,CAA1C;AACH;AACJ;AACJ,CAvBD;AAwBH,CAzBD,IAyBO,IAAI,MAAOgB,CAAAA,UAAP,GAAsB,QAAtB,EAAkC,CAAC/B,gBAAvC,CAAyD;AAC5D+B,UAAU,CAACpB,OAAX,CAAmB,SAACe,CAAD,CAAO;AACdO,IADc,CACUP,CADV,CACdO,IADc,CACRa,IADQ,CACUpB,CADV,CACRoB,IADQ,CACF5B,OADE,CACUQ,CADV,CACFR,OADE;AAEtB,GAAMH,CAAAA,MAAM,CAAG;AACXkB,IAAI,CAAJA,IADW;AAEXa,IAAI,CAAJA,IAFW;AAGXZ,QAAQ,CAAE,KAHC;AAIXhB,OAAO,CAAPA,OAJW,CAAf;;AAMAR,OAAO,CAACO,IAAR,kBAAkBF,MAAlB,EAA0Bc,IAAI,CAAEG,UAAU,CAACjB,MAAD,CAA1C;AACH,CATD;AAUH;;AAED,MAAOL,CAAAA,OAAP;AACH,CA/DD;;AAiEO,GAAMsC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAOnD,CAAP,CAAUC,QAAV,CAAoBmD,MAApB;AAChC,4CAAgCnD,QAAhC,KAA4CmD,MAA5C,EADgC;;AAGPrD,eAAe,CAACC,CAAD,CAAIC,QAAJ,CAAc,IAAd,CAHR,SAG1BuB,UAH0B;;AAKhC,IAAS6B,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAG7B,UAAU,CAACuB,MAA/B,CAAuCM,CAAC,EAAxC,CAA4C;AACxC,GAAI7B,UAAU,CAAC6B,CAAD,CAAV,CAAcjB,IAAd,GAAuBgB,MAA3B,CAAmC;AAC/BE,cAAc,CAAG9B,UAAU,CAAC6B,CAAD,CAA3B;AACH;AACJ,CAT+B;AAU5BC,cAV4B;AAW5BC,gBAAgB,CAACD,cAAD,CAAhB,CAX4B;AAYrBA,cAAc,CAAClB,IAZM;;;AAehC,0DAA8CoB,eAAMC,KAAN,CAAYL,MAAZ,CAA9C;AACMvC,OAhB0B,CAgBhBW,UAAU,CAACkC,GAAX,CAAe,SAAAC,CAAC,QAAK,CAAEvB,IAAI,CAAKuB,CAAC,CAACvB,IAAP,OAAiBuB,CAAC,CAAC3B,IAAnB,UAAgCwB,eAAMI,KAAN,CAAYD,CAAC,CAACtC,OAAd,CAAhC,aAAkEmC,eAAMK,IAAN,CAAWF,CAAC,CAACV,IAAb,CAAlE,EAAuFU,CAAC,CAACtB,QAAF,CAAamB,eAAMM,GAAN,CAAU,WAAV,CAAb,CAAsC,EAA7H,CAAN,CAAyIC,KAAK,CAAEJ,CAAhJ,CAAL,EAAhB,CAhBgB;;AAkBVK,kBAASC,MAAT,CAAgB;AAClC7B,IAAI,CAAE,KAD4B;AAElC8B,OAAO,CAAE,yCAFyB;AAGlCC,IAAI,CAAE,MAH4B;AAIlCC,OAAO,CAAEvD,OAJyB,CAAhB,CAlBU,8BAkBxBwD,GAlBwB,MAkBxBA,GAlBwB;;;AAyB5BA,GAzB4B;AA0B5Bd,gBAAgB,CAACc,GAAD,CAAhB,CA1B4B;AA2BrBA,GAAG,CAACjC,IA3BiB;;AA6BzBkC,OAAO,CAACC,MAAR,CAAe,kBAAf,CA7ByB,kDAA7B,C;;;AAgCP,GAAMhB,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACD,cAAD,CAAoB;AACzC,GAAI;AACAkB,uBAAcC,SAAd,CAAwB,OAAxB,CAAiC,CAAC,aAAD,CAAgB,IAAhB,CAAsBnB,cAAc,CAACL,IAArC,CAAjC;AACH,CAAC,MAAOyB,CAAP,CAAU;;;AAGX;AACJ,CAPD;;AASO,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAO3E,CAAP,CAAUC,QAAV;AAC5B,wCAA4BA,QAA5B,EAD4B;;AAGHF,eAAe,CAACC,CAAD,CAAIC,QAAJ,CAHZ,SAGtBuB,UAHsB;AAIxBoD,aAJwB,CAIR,EAJQ;AAK5BpD,UAAU,CAACV,OAAX,CAAmB,SAAC6C,CAAD,CAAIN,CAAJ,CAAU;AACzBuB,aAAa,QAASvB,CAAC,CAAG,CAAb,QAAoBG,eAAMqB,IAAN,CAAWlB,CAAC,CAACvB,IAAb,CAApB,OAA4CuB,CAAC,CAAC3B,IAA9C,UAA2DwB,eAAMI,KAAN,CAAYD,CAAC,CAACtC,OAAd,CAA3D,aAA6FmC,eAAMK,IAAN,CAAWF,CAAC,CAACV,IAAb,CAA7F;AACTU,CAAC,CAACtB,QAAF,CAAamB,eAAMM,GAAN,CAAU,WAAV,CAAb,CAAsC,EAD7B,MAAb;;AAGH,CAJD;;AAMA,yBAAgB7D,QAAhB,iBAAwC2E,aAAxC,EAX4B,+CAAzB,C","sourcesContent":["import inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport {\n    getAppFolder,\n} from '../../common';\nimport { logToSummary, logTask, logWarning } from '../../systemTools/logger';\nimport { IOS, TVOS } from '../../constants';\nimport { executeAsync } from '../../systemTools/exec';\n\nexport const getAppleDevices = async (c, platform, ignoreDevices, ignoreSimulators) => {\n    logTask(`getAppleDevices:${platform},ignoreDevices:${ignoreDevices},ignoreSimulators${ignoreSimulators}`);\n    const { program: { skipTargetCheck } } = c;\n    // const devices = child_process.execFileSync('xcrun', ['instruments', '-s'], {\n    //     encoding: 'utf8',\n    // });\n\n    const devicesAndSims = await executeAsync('xcrun instruments -s');\n    const simctl = JSON.parse(await executeAsync('xcrun simctl list --json'));\n    const availableSims = [];\n    Object.keys(simctl.devices).forEach((runtime) => {\n        console.log('runtime', runtime);\n        simctl.devices[runtime].forEach((device) => {\n            if (device.isAvailable) availableSims.push({ ...device, version: runtime.split('.').pop() });\n        });\n    });\n\n    const devicesArr = _parseIOSDevicesList(devicesAndSims, platform, ignoreDevices, ignoreSimulators);\n    const simulatorsArr = _parseIOSDevicesList(availableSims, platform, ignoreDevices, ignoreSimulators);\n    let allDevices = [...devicesArr, ...simulatorsArr];\n\n    if (!skipTargetCheck) {\n        // filter watches\n        allDevices = allDevices.filter(d => !d.version.includes('watchOS'));\n        // filter other platforms\n        allDevices = allDevices.filter((d) => {\n            if (platform === IOS && (d.icon?.includes('Phone') || d.icon?.includes('Tablet'))) return true;\n            if (platform === TVOS && d.icon?.includes('TV')) return true;\n            return false;\n        });\n    }\n    return allDevices;\n};\n\nconst _parseIOSDevicesList = (rawDevices, platform, ignoreDevices = false, ignoreSimulators = false) => {\n    const devices = [];\n    const decideIcon = (device) => {\n        const { name, isDevice } = device;\n        switch (platform) {\n            case IOS:\n                if (name.includes('iPhone') || name.includes('iPad') || name.includes('iPod')) {\n                    let icon = 'Phone ðŸ“±';\n                    if (name.includes('iPad')) icon = 'Tablet ðŸ’Š';\n                    return icon;\n                }\n                return null;\n            case TVOS:\n                if ((name.includes('TV')) && !name.includes('iPhone') && !name.includes('iPad')) {\n                    return 'TV ðŸ“º';\n                }\n                return null;\n            default:\n                if (isDevice) {\n                    return 'Apple Device';\n                }\n                return null;\n        }\n    };\n    if (typeof rawDevices === 'string' && !ignoreDevices) {\n        rawDevices.split('\\n').forEach((line) => {\n            const s1 = line.match(/\\[.*?\\]/);\n            const s2 = line.match(/\\(.*?\\)/g);\n            const s3 = line.substring(0, line.indexOf('(') - 1);\n            const s4 = line.substring(0, line.indexOf('[') - 1);\n            let isSim = false;\n            if (s2 && s1) {\n                if (s2[s2.length - 1] === '(Simulator)') {\n                    isSim = true;\n                    s2.pop();\n                }\n                const version = s2.pop();\n                let name = `${s4.substring(0, s4.lastIndexOf('(') - 1)}`;\n                name = name || 'undefined';\n                const udid = s1[0].replace(/\\[|\\]/g, '');\n                const isDevice = !isSim;\n                if (!isDevice) return; // only take care of devices.\n\n                if (!ignoreDevices) {\n                    const device = { udid, name, version, isDevice };\n                    devices.push({ ...device, icon: decideIcon(device) });\n                }\n            }\n        });\n    } else if (typeof rawDevices === 'object' && !ignoreSimulators) {\n        rawDevices.forEach((d) => {\n            const { name, udid, version } = d;\n            const device = {\n                name,\n                udid,\n                isDevice: false,\n                version\n            };\n            devices.push({ ...device, icon: decideIcon(device) });\n        });\n    }\n\n    return devices;\n};\n\nexport const launchAppleSimulator = async (c, platform, target) => {\n    logTask(`launchAppleSimulator:${platform}:${target}`);\n\n    const devicesArr = await getAppleDevices(c, platform, true);\n    let selectedDevice;\n    for (let i = 0; i < devicesArr.length; i++) {\n        if (devicesArr[i].name === target) {\n            selectedDevice = devicesArr[i];\n        }\n    }\n    if (selectedDevice) {\n        _launchSimulator(selectedDevice);\n        return selectedDevice.name;\n    }\n\n    logWarning(`Your specified simulator target ${chalk.white(target)} doesn't exists`);\n    const devices = devicesArr.map(v => ({ name: `${v.name} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${v.isDevice ? chalk.red(' (device)') : ''}`, value: v }));\n\n    const { sim } = await inquirer.prompt({\n        name: 'sim',\n        message: 'Select the simulator you want to launch',\n        type: 'list',\n        choices: devices\n    });\n\n    if (sim) {\n        _launchSimulator(sim);\n        return sim.name;\n    }\n    return Promise.reject('Action canceled!');\n};\n\nconst _launchSimulator = (selectedDevice) => {\n    try {\n        child_process.spawnSync('xcrun', ['instruments', '-w', selectedDevice.udid]);\n    } catch (e) {\n        // instruments always fail with 255 because it expects more arguments,\n        // but we want it to only launch the simulator\n    }\n};\n\nexport const listAppleDevices = async (c, platform) => {\n    logTask(`listAppleDevices:${platform}`);\n\n    const devicesArr = await getAppleDevices(c, platform);\n    let devicesString = '';\n    devicesArr.forEach((v, i) => {\n        devicesString += ` [${i + 1}]> ${chalk.bold(v.name)} | ${v.icon} | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${\n            v.isDevice ? chalk.red(' (device)') : ''\n        }\\n`;\n    });\n\n    logToSummary(`${platform} Targets:\\n\\n${devicesString}`);\n};\n"],"file":"deviceManager.js"}