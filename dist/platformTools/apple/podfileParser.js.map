{"version":3,"file":"podfileParser.js","names":["parsePodFile","c","platform","Promise","resolve","logTask","appFolder","getAppFolder","pluginInject","pluginConfigiOS","podfileInject","parsePlugins","plugin","pluginPlat","key","podName","getFlavouredProp","_injectPod","podNames","forEach","v","reactSubSpecs","logWarning","podfile","injectLines","ignoreWarnings","getConfigProp","podWarnings","podfileSources","podfileObj","buildConfig","platforms","sources","length","deploymentTarget","writeCleanFile","path","join","getAppTemplateFolder","pattern","override","isNpm","podPath","git","commit","version"],"sources":["../../../src/platformTools/apple/podfileParser.js"],"sourcesContent":["import path from 'path';\nimport {\n    getAppFolder,\n    writeCleanFile,\n    getAppTemplateFolder,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask,\n    logWarning\n} from '../../systemTools/logger';\nimport { parsePlugins } from '../../pluginTools';\n\nexport const parsePodFile = (c, platform) => new Promise((resolve) => {\n    logTask(`parsePodFileSync:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    let pluginInject = '';\n\n    // PLUGINS\n    c.pluginConfigiOS.podfileInject = '';\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        const podName = getFlavouredProp(c, pluginPlat, 'podName');\n        if (podName) {\n            pluginInject += _injectPod(podName, pluginPlat, plugin, key);\n        }\n        const podNames = getFlavouredProp(c, pluginPlat, 'podNames');\n        if (podNames) {\n            podNames.forEach((v) => {\n                pluginInject += _injectPod(v, pluginPlat, plugin, key);\n            });\n        }\n\n        const reactSubSpecs = getFlavouredProp(c, pluginPlat, 'reactSubSpecs');\n        if (reactSubSpecs) {\n            logWarning('reactSubSpecs prop is deprecated. yoy can safely remove it');\n        }\n\n        const podfile = getFlavouredProp(c, pluginPlat, 'Podfile');\n        if (podfile) {\n            const { injectLines } = podfile;\n            // INJECT LINES\n            if (injectLines) {\n                injectLines.forEach((v) => {\n                    c.pluginConfigiOS.podfileInject += `${v}\\n`;\n                });\n            }\n        }\n    });\n\n    // WARNINGS\n    const ignoreWarnings = getConfigProp(c, platform, 'ignoreWarnings');\n    const podWarnings = ignoreWarnings ? 'inhibit_all_warnings!' : '';\n\n    // SOURCES\n    c.pluginConfigiOS.podfileSources = '';\n    const podfileObj = getFlavouredProp(c, c.buildConfig?.platforms?.[platform], 'Podfile');\n    const podfileSources = podfileObj?.sources;\n    if (podfileSources && podfileSources.length) {\n        podfileSources.forEach((v) => {\n            c.pluginConfigiOS.podfileSources += `source '${v}'\\n`;\n        });\n    }\n\n    // DEPLOYMENT TARGET\n    const deploymentTarget = getConfigProp(c, platform, 'deploymentTarget', '10.0');\n    c.pluginConfigiOS.deploymentTarget = deploymentTarget;\n\n    writeCleanFile(path.join(getAppTemplateFolder(c, platform), 'Podfile'), path.join(appFolder, 'Podfile'), [\n        { pattern: '{{PLUGIN_PATHS}}', override: pluginInject },\n        { pattern: '{{PLUGIN_WARNINGS}}', override: podWarnings },\n        { pattern: '{{PLUGIN_PODFILE_INJECT}}', override: c.pluginConfigiOS.podfileInject },\n        { pattern: '{{PLUGIN_PODFILE_SOURCES}}', override: c.pluginConfigiOS.podfileSources },\n        { pattern: '{{PLUGIN_DEPLOYMENT_TARGET}}', override: c.pluginConfigiOS.deploymentTarget }\n    ]);\n    resolve();\n});\n\nconst _injectPod = (podName, pluginPlat, plugin, key) => {\n    let pluginInject = '';\n    const isNpm = plugin['no-npm'] !== true;\n    if (isNpm) {\n        const podPath = pluginPlat.path ? `../../${pluginPlat.path}` : `../../node_modules/${key}`;\n        pluginInject += `  pod '${podName}', :path => '${podPath}'\\n`;\n    } else if (pluginPlat.git) {\n        const commit = pluginPlat.commit ? `, :commit => '${pluginPlat.commit}'` : '';\n        pluginInject += `  pod '${podName}', :git => '${pluginPlat.git}'${commit}\\n`;\n    } else if (pluginPlat.version) {\n        pluginInject += `  pod '${podName}', '${pluginPlat.version}'\\n`;\n    } else {\n        pluginInject += `  pod '${podName}'\\n`;\n    }\n    return pluginInject;\n};\n"],"mappings":"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"}