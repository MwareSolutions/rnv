{"version":3,"sources":["../../../src/platformTools/apple/podfileParser.js"],"names":["parsePodFile","c","platform","Promise","resolve","appFolder","pluginInject","pluginConfigiOS","podfileInject","plugin","pluginPlat","key","podName","_injectPod","podNames","forEach","v","reactSubSpecs","podfile","injectLines","ignoreWarnings","podWarnings","podfileSources","podfileObj","buildConfig","platforms","sources","length","deploymentTarget","path","join","pattern","override","isNpm","podPath","git","commit","version"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {\n    getAppFolder,\n    writeCleanFile,\n    getAppTemplateFolder,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask,\n    logWarning\n} from '../../systemTools/logger';\nimport { parsePlugins } from '../../pluginTools';\n\nexport const parsePodFile = (c, platform) => new Promise((resolve) => {\n    logTask(`parsePodFileSync:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    let pluginInject = '';\n\n    // PLUGINS\n    c.pluginConfigiOS.podfileInject = '';\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        const podName = getFlavouredProp(c, pluginPlat, 'podName');\n        if (podName) {\n            pluginInject += _injectPod(podName, pluginPlat, plugin, key);\n        }\n        const podNames = getFlavouredProp(c, pluginPlat, 'podNames');\n        if (podNames) {\n            podNames.forEach((v) => {\n                pluginInject += _injectPod(v, pluginPlat, plugin, key);\n            });\n        }\n\n        const reactSubSpecs = getFlavouredProp(c, pluginPlat, 'reactSubSpecs');\n        if (reactSubSpecs) {\n            logWarning('reactSubSpecs prop is deprecated. yoy can safely remove it');\n        }\n\n        const podfile = getFlavouredProp(c, pluginPlat, 'Podfile');\n        if (podfile) {\n            const { injectLines } = podfile;\n            // INJECT LINES\n            if (injectLines) {\n                injectLines.forEach((v) => {\n                    c.pluginConfigiOS.podfileInject += `${v}\\n`;\n                });\n            }\n        }\n    });\n\n    // WARNINGS\n    const ignoreWarnings = getConfigProp(c, platform, 'ignoreWarnings');\n    const podWarnings = ignoreWarnings ? 'inhibit_all_warnings!' : '';\n\n    // SOURCES\n    c.pluginConfigiOS.podfileSources = '';\n    const podfileObj = getFlavouredProp(c, c.buildConfig?.platforms?.[platform], 'Podfile');\n    const podfileSources = podfileObj?.sources;\n    if (podfileSources && podfileSources.length) {\n        podfileSources.forEach((v) => {\n            c.pluginConfigiOS.podfileSources += `source '${v}'\\n`;\n        });\n    }\n\n    // DEPLOYMENT TARGET\n    const deploymentTarget = getConfigProp(c, platform, 'deploymentTarget', '10.0');\n    c.pluginConfigiOS.deploymentTarget = deploymentTarget;\n\n    writeCleanFile(path.join(getAppTemplateFolder(c, platform), 'Podfile'), path.join(appFolder, 'Podfile'), [\n        { pattern: '{{PLUGIN_PATHS}}', override: pluginInject },\n        { pattern: '{{PLUGIN_WARNINGS}}', override: podWarnings },\n        { pattern: '{{PLUGIN_PODFILE_INJECT}}', override: c.pluginConfigiOS.podfileInject },\n        { pattern: '{{PLUGIN_PODFILE_SOURCES}}', override: c.pluginConfigiOS.podfileSources },\n        { pattern: '{{PLUGIN_DEPLOYMENT_TARGET}}', override: c.pluginConfigiOS.deploymentTarget }\n    ]);\n    resolve();\n});\n\nconst _injectPod = (podName, pluginPlat, plugin, key) => {\n    let pluginInject = '';\n    const isNpm = plugin['no-npm'] !== true;\n    if (isNpm) {\n        const podPath = pluginPlat.path ? `../../${pluginPlat.path}` : `../../node_modules/${key}`;\n        pluginInject += `  pod '${podName}', :path => '${podPath}'\\n`;\n    } else if (pluginPlat.git) {\n        const commit = pluginPlat.commit ? `, :commit => '${pluginPlat.commit}'` : '';\n        pluginInject += `  pod '${podName}', :git => '${pluginPlat.git}'${commit}\\n`;\n    } else if (pluginPlat.version) {\n        pluginInject += `  pod '${podName}', '${pluginPlat.version}'\\n`;\n    } else {\n        pluginInject += `  pod '${podName}'\\n`;\n    }\n    return pluginInject;\n};\n"],"file":"podfileParser.js"}