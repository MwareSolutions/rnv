{"version":3,"sources":["../../../src/platformTools/apple/swiftParser.js"],"names":["parseAppDelegate","c","platform","appFolder","appFolderName","isBundled","ip","port","Promise","resolve","reject","runtime","appDelegate","entryFile","backgroundColor","buildConfig","platforms","forceBundle","bundle","plugin","pluginPlat","key","injectPluginSwiftSync","package","clr","rgbDecimal","pluginBgColor","methods","application","didFinishLaunchingWithOptions","isRequired","func","begin","render","v","end","applicationDidBecomeActive","open","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","constructMethod","lines","method","output","length","forEach","key2","f","pluginConfigiOS","pluginAppDelegateMethods","appDelegateMethods","path","join","pattern","override","pluginAppDelegateImports","pkg","chalk","grey","appDelegateImports","Array","appDelegateImport","indexOf","plugArr","plugVal","includes","push"],"mappings":"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","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport {\n    getEntryFile,\n    writeCleanFile,\n    getAppTemplateFolder,\n    getConfigProp,\n    getGetJsBundleFile,\n    sanitizeColor,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask\n} from '../../systemTools/logger';\nimport { parsePlugins } from '../../pluginTools';\n\nexport const parseAppDelegate = (c, platform, appFolder, appFolderName, isBundled = false, ip = 'localhost', port) => new Promise((resolve, reject) => {\n    if (!port) port = c.runtime.port;\n    logTask(`parseAppDelegateSync:${platform}:${ip}:${port}`);\n    const appDelegate = 'AppDelegate.swift';\n\n    const entryFile = getEntryFile(c, platform);\n    const { backgroundColor } = c.buildConfig.platforms[platform];\n\n    const forceBundle = getGetJsBundleFile(c, platform);\n    let bundle;\n    if (forceBundle) {\n        bundle = forceBundle;\n    } else if (isBundled) {\n        bundle = `RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \"${entryFile}\", fallbackResource: nil)`;\n    } else {\n        bundle = `URL(string: \"http://${ip}:${port}/${entryFile}.bundle?platform=ios\")`;\n    }\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginSwiftSync(c, pluginPlat, key, pluginPlat.package);\n    });\n\n    // BG COLOR\n    // let pluginBgColor = 'vc.view.backgroundColor = UIColor.white';\n    // const UI_COLORS = ['black', 'blue', 'brown', 'clear', 'cyan', 'darkGray', 'gray', 'green', 'lightGray', 'magneta', 'orange', 'purple', 'red', 'white', 'yellow'];\n    // if (backgroundColor) {\n    //     if (UI_COLORS.includes(backgroundColor)) {\n    //         pluginBgColor = `vc.view.backgroundColor = UIColor.${backgroundColor}`;\n    //     } else {\n    //         logWarning(`Your choosen color in renative.json for platform ${chalk.white(platform)} is not supported by UIColor. use one of the predefined ones: ${chalk.white(UI_COLORS.join(','))}`);\n    //     }\n    // }\n\n    const clr = sanitizeColor(getConfigProp(c, platform, 'backgroundColor')).rgbDecimal;\n    const pluginBgColor = `vc.view.backgroundColor = UIColor(red: ${clr[0]}, green: ${clr[1]}, blue: ${clr[2]}, alpha: ${clr[3]})`;\n    const methods = {\n        application: {\n            didFinishLaunchingWithOptions: {\n                isRequired: true,\n                func: 'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {',\n                begin: `\n        self.window = UIWindow(frame: UIScreen.main.bounds)\n        let vc = UIViewController()\n        let v = RCTRootView(\n            bundleURL: bundleUrl!,\n            moduleName: moduleName,\n            initialProperties: nil,\n            launchOptions: launchOptions)\n        vc.view = v\n        ${pluginBgColor}\n        v.frame = vc.view.bounds\n        self.window?.rootViewController = vc\n        self.window?.makeKeyAndVisible()\n        UNUserNotificationCenter.current().delegate = self\n                `,\n                render: v => `${v}`,\n                end: 'return true',\n\n            },\n            applicationDidBecomeActive: {\n                func: 'func applicationDidBecomeActive(_ application: UIApplication) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n            },\n            open: {\n                func: 'func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {',\n                begin: 'var handled = false',\n                render: v => `if(!handled) { handled = ${v} }`,\n                end: 'return handled',\n\n            },\n            supportedInterfaceOrientationsFor: {\n                func: 'func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {',\n                begin: null,\n                render: v => `return ${v}`,\n                end: null,\n\n            },\n            didReceiveRemoteNotification: {\n                func: 'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didFailToRegisterForRemoteNotificationsWithError: {\n                func: 'func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didReceive: {\n                func: 'func application(_ application: UIApplication, didReceive notification: UILocalNotification) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didRegister: {\n                func: 'func application(_ application: UIApplication, didRegister notificationSettings: UIUserNotificationSettings) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didRegisterForRemoteNotificationsWithDeviceToken: {\n                func: 'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            }\n        },\n        userNotificationCenter: {\n            willPresent: {\n                func: 'func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            }\n        }\n    };\n\n    const constructMethod = (lines, method) => {\n        let output = '';\n        if (lines.length || method.isRequired) {\n            output += `\\n${method.func}\\n`;\n            if (method.begin) output += `   ${method.begin}\\n`;\n            lines.forEach((v) => {\n                output += `    ${method.render(v)}\\n`;\n            });\n            if (method.end) output += `   ${method.end}\\n`;\n            output += '}\\n';\n        }\n        return output;\n    };\n\n    for (const key in methods) {\n        const method = methods[key];\n        for (const key2 in method) {\n            const f = method[key2];\n            c.pluginConfigiOS.pluginAppDelegateMethods += constructMethod(c.pluginConfigiOS.appDelegateMethods[key][key2], f);\n        }\n    }\n\n    writeCleanFile(\n        path.join(getAppTemplateFolder(c, platform), appFolderName, appDelegate),\n        path.join(appFolder, appFolderName, appDelegate),\n        [\n            { pattern: '{{BUNDLE}}', override: bundle },\n            { pattern: '{{ENTRY_FILE}}', override: entryFile },\n            { pattern: '{{IP}}', override: ip },\n            { pattern: '{{PORT}}', override: port },\n            { pattern: '{{BACKGROUND_COLOR}}', override: pluginBgColor },\n            {\n                pattern: '{{APPDELEGATE_IMPORTS}}',\n                override: c.pluginConfigiOS.pluginAppDelegateImports,\n            },\n            {\n                pattern: '{{APPDELEGATE_METHODS}}',\n                override: c.pluginConfigiOS.pluginAppDelegateMethods,\n            },\n        ],\n    );\n    resolve();\n});\n\nexport const injectPluginSwiftSync = (c, plugin, key, pkg) => {\n    logTask(`injectPluginSwiftSync:${c.platform}:${key}`, chalk.grey);\n    const appDelegateImports = getFlavouredProp(c, plugin, 'appDelegateImports');\n    if (appDelegateImports instanceof Array) {\n        appDelegateImports.forEach((appDelegateImport) => {\n            // Avoid duplicate imports\n            logTask('appDelegateImports add', chalk.grey);\n            if (c.pluginConfigiOS.pluginAppDelegateImports.indexOf(appDelegateImport) === -1) {\n                logTask('appDelegateImports add ok', chalk.grey);\n                c.pluginConfigiOS.pluginAppDelegateImports += `import ${appDelegateImport}\\n`;\n            }\n        });\n    }\n    // if (plugin.appDelegateMethods instanceof Array) {\n    //     c.pluginConfigiOS.pluginAppDelegateMethods += `${plugin.appDelegateMethods.join('\\n    ')}`;\n    // }\n\n    const appDelegateMethods = getFlavouredProp(c, plugin, 'appDelegateMethods');\n    if (appDelegateMethods) {\n        for (const key in appDelegateMethods) {\n            for (const key2 in appDelegateMethods[key]) {\n                const plugArr = c.pluginConfigiOS.appDelegateMethods[key][key2];\n                const plugVal = appDelegateMethods[key][key2];\n                if (plugVal) {\n                    plugVal.forEach((v) => {\n                        if (!plugArr.includes(v)) {\n                            plugArr.push(v);\n                        }\n                    });\n                }\n            }\n        }\n    }\n};\n"],"file":"swiftParser.js"}