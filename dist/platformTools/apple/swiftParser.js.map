{"version":3,"file":"swiftParser.js","names":["parseAppDelegate","c","platform","appFolder","appFolderName","isBundled","ip","port","Promise","resolve","reject","runtime","logTask","appDelegate","entryFile","getEntryFile","backgroundColor","buildConfig","platforms","forceBundle","getGetJsBundleFile","bundle","parsePlugins","plugin","pluginPlat","key","injectPluginSwiftSync","package","clr","sanitizeColor","getConfigProp","rgbDecimal","pluginBgColor","methods","application","didFinishLaunchingWithOptions","isRequired","func","begin","render","v","end","applicationDidBecomeActive","open","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","constructMethod","lines","method","output","length","forEach","key2","f","pluginConfigiOS","pluginAppDelegateMethods","appDelegateMethods","writeCleanFile","path","join","getAppTemplateFolder","pattern","override","pluginAppDelegateImports","pkg","chalk","grey","appDelegateImports","getFlavouredProp","Array","appDelegateImport","indexOf","plugArr","plugVal","includes","push"],"sources":["../../../src/platformTools/apple/swiftParser.js"],"sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport {\n    getEntryFile,\n    writeCleanFile,\n    getAppTemplateFolder,\n    getConfigProp,\n    getGetJsBundleFile,\n    sanitizeColor,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask\n} from '../../systemTools/logger';\nimport { parsePlugins } from '../../pluginTools';\n\nexport const parseAppDelegate = (c, platform, appFolder, appFolderName, isBundled = false, ip = 'localhost', port) => new Promise((resolve, reject) => {\n    if (!port) port = c.runtime.port;\n    logTask(`parseAppDelegateSync:${platform}:${ip}:${port}`);\n    const appDelegate = 'AppDelegate.swift';\n\n    const entryFile = getEntryFile(c, platform);\n    const { backgroundColor } = c.buildConfig.platforms[platform];\n\n    const forceBundle = getGetJsBundleFile(c, platform);\n    let bundle;\n    if (forceBundle) {\n        bundle = forceBundle;\n    } else if (isBundled) {\n        bundle = `RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \"${entryFile}\", fallbackResource: nil)`;\n    } else {\n        bundle = `URL(string: \"http://${ip}:${port}/${entryFile}.bundle?platform=ios\")`;\n    }\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginSwiftSync(c, pluginPlat, key, pluginPlat.package);\n    });\n\n    // BG COLOR\n    // let pluginBgColor = 'vc.view.backgroundColor = UIColor.white';\n    // const UI_COLORS = ['black', 'blue', 'brown', 'clear', 'cyan', 'darkGray', 'gray', 'green', 'lightGray', 'magneta', 'orange', 'purple', 'red', 'white', 'yellow'];\n    // if (backgroundColor) {\n    //     if (UI_COLORS.includes(backgroundColor)) {\n    //         pluginBgColor = `vc.view.backgroundColor = UIColor.${backgroundColor}`;\n    //     } else {\n    //         logWarning(`Your choosen color in renative.json for platform ${chalk.white(platform)} is not supported by UIColor. use one of the predefined ones: ${chalk.white(UI_COLORS.join(','))}`);\n    //     }\n    // }\n\n    const clr = sanitizeColor(getConfigProp(c, platform, 'backgroundColor')).rgbDecimal;\n    const pluginBgColor = `vc.view.backgroundColor = UIColor(red: ${clr[0]}, green: ${clr[1]}, blue: ${clr[2]}, alpha: ${clr[3]})`;\n    const methods = {\n        application: {\n            didFinishLaunchingWithOptions: {\n                isRequired: true,\n                func: 'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {',\n                begin: `\n        self.window = UIWindow(frame: UIScreen.main.bounds)\n        let vc = UIViewController()\n        let v = RCTRootView(\n            bundleURL: bundleUrl!,\n            moduleName: moduleName,\n            initialProperties: nil,\n            launchOptions: launchOptions)\n        vc.view = v\n        ${pluginBgColor}\n        v.frame = vc.view.bounds\n        self.window?.rootViewController = vc\n        self.window?.makeKeyAndVisible()\n        UNUserNotificationCenter.current().delegate = self\n                `,\n                render: v => `${v}`,\n                end: 'return true',\n\n            },\n            applicationDidBecomeActive: {\n                func: 'func applicationDidBecomeActive(_ application: UIApplication) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n            },\n            open: {\n                func: 'func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {',\n                begin: 'var handled = false',\n                render: v => `if(!handled) { handled = ${v} }`,\n                end: 'return handled',\n\n            },\n            supportedInterfaceOrientationsFor: {\n                func: 'func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {',\n                begin: null,\n                render: v => `return ${v}`,\n                end: null,\n\n            },\n            didReceiveRemoteNotification: {\n                func: 'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didFailToRegisterForRemoteNotificationsWithError: {\n                func: 'func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didReceive: {\n                func: 'func application(_ application: UIApplication, didReceive notification: UILocalNotification) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didRegister: {\n                func: 'func application(_ application: UIApplication, didRegister notificationSettings: UIUserNotificationSettings) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            },\n            didRegisterForRemoteNotificationsWithDeviceToken: {\n                func: 'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null,\n\n            }\n        },\n        userNotificationCenter: {\n            willPresent: {\n                func: 'func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            }\n        }\n    };\n\n    const constructMethod = (lines, method) => {\n        let output = '';\n        if (lines.length || method.isRequired) {\n            output += `\\n${method.func}\\n`;\n            if (method.begin) output += `   ${method.begin}\\n`;\n            lines.forEach((v) => {\n                output += `    ${method.render(v)}\\n`;\n            });\n            if (method.end) output += `   ${method.end}\\n`;\n            output += '}\\n';\n        }\n        return output;\n    };\n\n    for (const key in methods) {\n        const method = methods[key];\n        for (const key2 in method) {\n            const f = method[key2];\n            c.pluginConfigiOS.pluginAppDelegateMethods += constructMethod(c.pluginConfigiOS.appDelegateMethods[key][key2], f);\n        }\n    }\n\n    writeCleanFile(\n        path.join(getAppTemplateFolder(c, platform), appFolderName, appDelegate),\n        path.join(appFolder, appFolderName, appDelegate),\n        [\n            { pattern: '{{BUNDLE}}', override: bundle },\n            { pattern: '{{ENTRY_FILE}}', override: entryFile },\n            { pattern: '{{IP}}', override: ip },\n            { pattern: '{{PORT}}', override: port },\n            { pattern: '{{BACKGROUND_COLOR}}', override: pluginBgColor },\n            {\n                pattern: '{{APPDELEGATE_IMPORTS}}',\n                override: c.pluginConfigiOS.pluginAppDelegateImports,\n            },\n            {\n                pattern: '{{APPDELEGATE_METHODS}}',\n                override: c.pluginConfigiOS.pluginAppDelegateMethods,\n            },\n        ],\n    );\n    resolve();\n});\n\nexport const injectPluginSwiftSync = (c, plugin, key, pkg) => {\n    logTask(`injectPluginSwiftSync:${c.platform}:${key}`, chalk.grey);\n    const appDelegateImports = getFlavouredProp(c, plugin, 'appDelegateImports');\n    if (appDelegateImports instanceof Array) {\n        appDelegateImports.forEach((appDelegateImport) => {\n            // Avoid duplicate imports\n            logTask('appDelegateImports add', chalk.grey);\n            if (c.pluginConfigiOS.pluginAppDelegateImports.indexOf(appDelegateImport) === -1) {\n                logTask('appDelegateImports add ok', chalk.grey);\n                c.pluginConfigiOS.pluginAppDelegateImports += `import ${appDelegateImport}\\n`;\n            }\n        });\n    }\n    // if (plugin.appDelegateMethods instanceof Array) {\n    //     c.pluginConfigiOS.pluginAppDelegateMethods += `${plugin.appDelegateMethods.join('\\n    ')}`;\n    // }\n\n    const appDelegateMethods = getFlavouredProp(c, plugin, 'appDelegateMethods');\n    if (appDelegateMethods) {\n        for (const key in appDelegateMethods) {\n            for (const key2 in appDelegateMethods[key]) {\n                const plugArr = c.pluginConfigiOS.appDelegateMethods[key][key2];\n                const plugVal = appDelegateMethods[key][key2];\n                if (plugVal) {\n                    plugVal.forEach((v) => {\n                        if (!plugArr.includes(v)) {\n                            plugArr.push(v);\n                        }\n                    });\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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"}