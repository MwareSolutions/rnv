{"version":3,"file":"xcodeParser.js","names":["parseXcodeProject","c","platform","logTask","runtime","xcodeProj","provisioningStyle","getConfigProp","deploymentTarget","provisionProfileSpecifier","codeSignIdentity","systemCapabilities","runScheme","teamID","id","appId","getAppId","parseProvisioningProfiles","result","eligable","forEach","v","bundleId","Entitlements","eligibleProfile","inquirerPrompt","type","name","message","warningMessage","autoFix","Name","files","appConfig","config","platforms","buildSchemes","program","scheme","writeFileSync","paths","logWarning","_parseXcodeProject","Promise","resolve","reject","xcode","require","project","nodeModulesDir","appFolder","getAppFolder","appFolderName","getAppFolderName","projectPath","path","join","parse","updateBuildProperty","addTargetAttribute","addBuildProperty","IOS","TVOS","sysCapObj","sk","val","enabled","pluginConfigiOS","embeddedFontSources","addResourceFile","parsePlugins","plugin","pluginPlat","key","xcodeprojObj","getFlavouredProp","resourceFiles","sourceFiles","addSourceFile","headerFiles","addHeaderFile","buildPhases","addBuildPhase","shellPath","shellScript","inputPaths","frameworks","k","fPath","opts","startsWith","replace","customFramework","embed","link","addFramework","buildSettings","addToBuildSettings","fs","writeSync"],"sources":["../../../src/platformTools/apple/xcodeParser.js"],"sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport {\n    getAppFolder,\n    getAppId,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask,\n    logWarning\n} from '../../systemTools/logger';\nimport { inquirerPrompt } from '../../systemTools/prompt';\nimport { IOS, TVOS } from '../../constants';\nimport { parsePlugins } from '../../pluginTools';\nimport { getAppFolderName } from './index';\nimport { parseProvisioningProfiles } from './provisionParser';\nimport { writeFileSync } from '../../systemTools/fileutils';\n\nexport const parseXcodeProject = async (c, platform) => {\n    logTask('parseXcodeProject');\n    // PROJECT\n    c.runtime.xcodeProj = {};\n    c.runtime.xcodeProj.provisioningStyle = getConfigProp(c, platform, 'provisioningStyle', 'Automatic');\n    c.runtime.xcodeProj.deploymentTarget = getConfigProp(c, platform, 'deploymentTarget', '10.0');\n    c.runtime.xcodeProj.provisionProfileSpecifier = getConfigProp(c, platform, 'provisionProfileSpecifier');\n    c.runtime.xcodeProj.codeSignIdentity = getConfigProp(c, platform, 'codeSignIdentity', 'iPhone Developer');\n    c.runtime.xcodeProj.systemCapabilities = getConfigProp(c, platform, 'systemCapabilities');\n    c.runtime.xcodeProj.runScheme = getConfigProp(c, platform, 'runScheme');\n    c.runtime.xcodeProj.teamID = getConfigProp(c, platform, 'teamID');\n    c.runtime.xcodeProj.id = getConfigProp(c, platform, 'id');\n    c.runtime.xcodeProj.appId = getAppId(c, platform);\n\n    if (c.runtime.xcodeProj.provisioningStyle !== 'Automatic' && !c.runtime.xcodeProj.provisionProfileSpecifier) {\n        const result = await parseProvisioningProfiles(c);\n\n        let eligibleProfile;\n\n        result.eligable.forEach((v) => {\n            const bundleId = v.Entitlements['application-identifier'];\n\n            if (bundleId === `${c.runtime.xcodeProj.teamID}.${c.runtime.xcodeProj.id}`) {\n                eligibleProfile = v;\n            }\n        });\n\n        if (eligibleProfile) {\n            const { autoFix } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'autoFix',\n                message: `Found following eligible provisioning profile on your system: ${eligibleProfile.Entitlements['application-identifier']}. Do you want ReNative to fix your app confing?`,\n                warningMessage: 'No provisionProfileSpecifier configured in appConfig despite setting provisioningStyle to manual'\n            });\n            if (autoFix) {\n                c.runtime.xcodeProj.provisionProfileSpecifier = eligibleProfile.Name;\n                c.files.appConfig.config.platforms[platform].buildSchemes[c.program.scheme].provisionProfileSpecifier = eligibleProfile.Name;\n                writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n            }\n        } else {\n            logWarning(`Your build config has provisioningStyle set to manual but no provisionProfileSpecifier configured in appConfig and no available provisioning profiles availiable for ${c.runtime.xcodeProj.id}`);\n        }\n    }\n\n    await _parseXcodeProject(c, platform);\n};\n\nconst _parseXcodeProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask('_parseXcodeProject');\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const xcode = require(`${c.paths.project.nodeModulesDir}/xcode`);\n    const appFolder = getAppFolder(c, platform);\n    const appFolderName = getAppFolderName(c, platform);\n    const projectPath = path.join(appFolder, `${appFolderName}.xcodeproj/project.pbxproj`);\n    const xcodeProj = xcode.project(projectPath);\n    xcodeProj.parse(() => {\n        const {\n            provisioningStyle, deploymentTarget,\n            provisionProfileSpecifier, codeSignIdentity, systemCapabilities, runScheme, teamID, appId\n        } = c.runtime.xcodeProj;\n\n        if (c.runtime.xcodeProj.teamID) {\n            xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM', teamID);\n        } else {\n            xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM', '\"\"');\n        }\n\n        xcodeProj.addTargetAttribute('ProvisioningStyle', provisioningStyle);\n        xcodeProj.addBuildProperty('CODE_SIGN_STYLE', provisioningStyle);\n        xcodeProj.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER', appId);\n\n        if (platform === IOS) {\n            xcodeProj.updateBuildProperty('IPHONEOS_DEPLOYMENT_TARGET', deploymentTarget);\n        } else if (platform === TVOS) {\n            xcodeProj.updateBuildProperty('TVOS_DEPLOYMENT_TARGET', deploymentTarget);\n        }\n\n        if (provisionProfileSpecifier) {\n            xcodeProj.updateBuildProperty('PROVISIONING_PROFILE_SPECIFIER', `\"${provisionProfileSpecifier}\"`);\n        }\n\n        xcodeProj.updateBuildProperty('CODE_SIGN_IDENTITY', `\"${codeSignIdentity}\"`);\n        xcodeProj.updateBuildProperty('\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"', `\"${codeSignIdentity}\"`);\n\n        // if (codeSignIdentity) {\n        //     const bc = xcodeProj.pbxXCBuildConfigurationSection();\n        //     const cs1 = 'CODE_SIGN_IDENTITY';\n        //     const cs2 = '\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"';\n        //     for (const configName in bc) {\n        //         const config = bc[configName];\n        //         if ((runScheme && config.name === runScheme) || (!runScheme)) {\n        //             if (config.buildSettings?.[cs1]) config.buildSettings[cs1] = `\"${codeSignIdentity}\"`;\n        //             if (config.buildSettings?.[cs2]) config.buildSettings[cs2] = `\"${codeSignIdentity}\"`;\n        //         }\n        //     }\n        // }\n\n        if (systemCapabilities) {\n            const sysCapObj = {};\n            for (const sk in systemCapabilities) {\n                const val = systemCapabilities[sk];\n                sysCapObj[sk] = { enabled: val === true ? 1 : 0 };\n            }\n            // const var1 = xcodeProj.getFirstProject().firstProject.attributes.TargetAttributes['200132EF1F6BF9CF00450340'];\n            xcodeProj.addTargetAttribute('SystemCapabilities', sysCapObj);\n        }\n        // FONTS\n        c.pluginConfigiOS.embeddedFontSources.forEach((v) => {\n            xcodeProj.addResourceFile(v);\n        });\n\n        // PLUGINS\n        parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n            const xcodeprojObj = getFlavouredProp(c, pluginPlat, 'xcodeproj');\n            if (xcodeprojObj) {\n                if (xcodeprojObj.resourceFiles) {\n                    xcodeprojObj.resourceFiles.forEach((v) => {\n                        xcodeProj.addResourceFile(path.join(appFolder, v));\n                    });\n                }\n                if (xcodeprojObj.sourceFiles) {\n                    xcodeprojObj.sourceFiles.forEach((v) => {\n                        // const group = xcodeProj.hash.project.objects.PBXGroup['200132F21F6BF9CF00450340'];\n                        xcodeProj.addSourceFile(v, null, '200132F21F6BF9CF00450340');\n                    });\n                }\n                if (xcodeprojObj.headerFiles) {\n                    xcodeprojObj.headerFiles.forEach((v) => {\n                        xcodeProj.addHeaderFile(v, null, '200132F21F6BF9CF00450340');\n                    });\n                }\n                if (xcodeprojObj.buildPhases) {\n                    xcodeprojObj.buildPhases.forEach((v) => {\n                        xcodeProj.addBuildPhase([], 'PBXShellScriptBuildPhase', 'ShellScript', null, {\n                            shellPath: v.shellPath || '/bin/sh',\n                            shellScript: v.shellScript,\n                            inputPaths: v.inputPaths || ['\"$(SRCROOT)/$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)\"']\n                        });\n                    });\n                }\n                if (xcodeprojObj.frameworks) {\n                    for (const k in xcodeprojObj.frameworks) {\n                        let fPath;\n                        let opts;\n                        if (k.startsWith('./')) {\n                            fPath = path.join(appFolder, k.replace('./', ''));\n                            opts = {\n                                customFramework: true,\n                                embed: true,\n                                link: true,\n                            };\n                        } else {\n                            fPath = path.join('System/Library/Frameworks', k);\n                            opts = {\n                                embed: true\n                            };\n                        }\n                        xcodeProj.addFramework(fPath, opts);\n                    }\n                }\n                if (xcodeprojObj.buildSettings) {\n                    for (const k in xcodeprojObj.buildSettings) {\n                        xcodeProj.addToBuildSettings(k, xcodeprojObj.buildSettings[k]);\n                    }\n                }\n            }\n        });\n        fs.writeFileSync(projectPath, xcodeProj.writeSync());\n        resolve();\n    });\n});\n"],"mappings":"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"}