{"version":3,"sources":["../../../src/platformTools/apple/xcodeParser.js"],"names":["parseXcodeProject","c","platform","runtime","xcodeProj","provisioningStyle","deploymentTarget","provisionProfileSpecifier","codeSignIdentity","systemCapabilities","runScheme","teamID","id","appId","result","eligable","forEach","v","bundleId","Entitlements","eligibleProfile","type","name","message","warningMessage","autoFix","Name","files","appConfig","config","platforms","buildSchemes","program","scheme","paths","_parseXcodeProject","Promise","resolve","reject","xcode","require","project","nodeModulesDir","appFolder","appFolderName","projectPath","path","join","parse","updateBuildProperty","addTargetAttribute","addBuildProperty","IOS","TVOS","sysCapObj","sk","val","enabled","pluginConfigiOS","embeddedFontSources","addResourceFile","plugin","pluginPlat","key","xcodeprojObj","resourceFiles","sourceFiles","addSourceFile","headerFiles","addHeaderFile","buildPhases","addBuildPhase","shellPath","shellScript","inputPaths","frameworks","k","fPath","opts","startsWith","replace","customFramework","embed","link","addFramework","buildSettings","addToBuildSettings","fs","writeFileSync","writeSync"],"mappings":"4PAAA;AACA;AACA;;;;;;AAMA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEO,GAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAOC,CAAP,CAAUC,QAAV;AAC7B,oBAAQ,mBAAR;;AAEAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAsB,EAAtB;AACAH,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBC,iBAApB,CAAwC,0BAAcJ,CAAd,CAAiBC,QAAjB,CAA2B,mBAA3B,CAAgD,WAAhD,CAAxC;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBE,gBAApB,CAAuC,0BAAcL,CAAd,CAAiBC,QAAjB,CAA2B,kBAA3B,CAA+C,MAA/C,CAAvC;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBG,yBAApB,CAAgD,0BAAcN,CAAd,CAAiBC,QAAjB,CAA2B,2BAA3B,CAAhD;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBI,gBAApB,CAAuC,0BAAcP,CAAd,CAAiBC,QAAjB,CAA2B,kBAA3B,CAA+C,kBAA/C,CAAvC;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBK,kBAApB,CAAyC,0BAAcR,CAAd,CAAiBC,QAAjB,CAA2B,oBAA3B,CAAzC;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBM,SAApB,CAAgC,0BAAcT,CAAd,CAAiBC,QAAjB,CAA2B,WAA3B,CAAhC;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBO,MAApB,CAA6B,0BAAcV,CAAd,CAAiBC,QAAjB,CAA2B,QAA3B,CAA7B;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBQ,EAApB,CAAyB,0BAAcX,CAAd,CAAiBC,QAAjB,CAA2B,IAA3B,CAAzB;AACAD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBS,KAApB,CAA4B,qBAASZ,CAAT,CAAYC,QAAZ,CAA5B,CAZ6B;;AAczBD,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBC,iBAApB,GAA0C,WAA1C,EAAyD,CAACJ,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBG,yBAdrD;AAeJ,+CAA0BN,CAA1B,CAfI,UAenBa,MAfmB;;;;AAmBzBA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,SAACC,CAAD,CAAO;AAC3B,GAAMC,CAAAA,QAAQ,CAAGD,CAAC,CAACE,YAAF,CAAe,wBAAf,CAAjB;;AAEA,GAAID,QAAQ,GAAQjB,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBO,MAA5B,KAAsCV,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBQ,EAAtE,CAA4E;AACxEQ,eAAe,CAAGH,CAAlB;AACH;AACJ,CAND,EAnByB;;AA2BrBG,eA3BqB;AA4BK,2BAAe;AACrCC,IAAI,CAAE,SAD+B;AAErCC,IAAI,CAAE,SAF+B;AAGrCC,OAAO,kEAAmEH,eAAe,CAACD,YAAhB,CAA6B,wBAA7B,CAAnE,kDAH8B;AAIrCK,cAAc,CAAE,kGAJqB,CAAf,CA5BL,6BA4BbC,OA5Ba,MA4BbA,OA5Ba;;AAkCrB,GAAIA,OAAJ,CAAa;AACTxB,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBG,yBAApB,CAAgDa,eAAe,CAACM,IAAhE;AACAzB,CAAC,CAAC0B,KAAF,CAAQC,SAAR,CAAkBC,MAAlB,CAAyBC,SAAzB,CAAmC5B,QAAnC,EAA6C6B,YAA7C,CAA0D9B,CAAC,CAAC+B,OAAF,CAAUC,MAApE,EAA4E1B,yBAA5E,CAAwGa,eAAe,CAACM,IAAxH;AACA,6BAAczB,CAAC,CAACiC,KAAF,CAAQN,SAAR,CAAkBC,MAAhC,CAAwC5B,CAAC,CAAC0B,KAAF,CAAQC,SAAR,CAAkBC,MAA1D;AACH,CAtCoB;;AAwCrB,+LAAmL5B,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBQ,EAAvM,EAxCqB;;;;AA4CvBuB,kBAAkB,CAAClC,CAAD,CAAIC,QAAJ,CA5CK,iDAA1B,C;;;AA+CP,GAAMiC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAClC,CAAD,CAAIC,QAAJ,QAAiB,IAAIkC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB;AACzE,oBAAQ,oBAAR;;AAEA,GAAMC,CAAAA,KAAK,CAAGC,OAAO,CAAIvC,CAAC,CAACiC,KAAF,CAAQO,OAAR,CAAgBC,cAApB,UAArB;AACA,GAAMC,CAAAA,SAAS,CAAG,yBAAa1C,CAAb,CAAgBC,QAAhB,CAAlB;AACA,GAAM0C,CAAAA,aAAa,CAAG,4BAAiB3C,CAAjB,CAAoBC,QAApB,CAAtB;AACA,GAAM2C,CAAAA,WAAW,CAAGC,cAAKC,IAAL,CAAUJ,SAAV,CAAwBC,aAAxB,8BAApB;AACA,GAAMxC,CAAAA,SAAS,CAAGmC,KAAK,CAACE,OAAN,CAAcI,WAAd,CAAlB;AACAzC,SAAS,CAAC4C,KAAV,CAAgB,UAAM;;;;AAId/C,CAAC,CAACE,OAAF,CAAUC,SAJI,CAEdC,iBAFc,sBAEdA,iBAFc,CAEKC,gBAFL,sBAEKA,gBAFL,CAGdC,yBAHc,sBAGdA,yBAHc,CAGaC,gBAHb,sBAGaA,gBAHb,CAG+BC,kBAH/B,sBAG+BA,kBAH/B,CAGmDC,SAHnD,sBAGmDA,SAHnD,CAG8DC,MAH9D,sBAG8DA,MAH9D,CAGsEE,KAHtE,sBAGsEA,KAHtE;;AAMlB,GAAIZ,CAAC,CAACE,OAAF,CAAUC,SAAV,CAAoBO,MAAxB,CAAgC;AAC5BP,SAAS,CAAC6C,mBAAV,CAA8B,kBAA9B,CAAkDtC,MAAlD;AACH,CAFD,IAEO;AACHP,SAAS,CAAC6C,mBAAV,CAA8B,kBAA9B,CAAkD,IAAlD;AACH;;AAED7C,SAAS,CAAC8C,kBAAV,CAA6B,mBAA7B,CAAkD7C,iBAAlD;AACAD,SAAS,CAAC+C,gBAAV,CAA2B,iBAA3B,CAA8C9C,iBAA9C;AACAD,SAAS,CAAC6C,mBAAV,CAA8B,2BAA9B,CAA2DpC,KAA3D;;AAEA,GAAIX,QAAQ,GAAKkD,cAAjB,CAAsB;AAClBhD,SAAS,CAAC6C,mBAAV,CAA8B,4BAA9B,CAA4D3C,gBAA5D;AACH,CAFD,IAEO,IAAIJ,QAAQ,GAAKmD,eAAjB,CAAuB;AAC1BjD,SAAS,CAAC6C,mBAAV,CAA8B,wBAA9B,CAAwD3C,gBAAxD;AACH;;AAED,GAAIC,yBAAJ,CAA+B;AAC3BH,SAAS,CAAC6C,mBAAV,CAA8B,gCAA9B,MAAoE1C,yBAApE;AACH;;AAEDH,SAAS,CAAC6C,mBAAV,CAA8B,oBAA9B,MAAwDzC,gBAAxD;AACAJ,SAAS,CAAC6C,mBAAV,CAA8B,qCAA9B,MAAyEzC,gBAAzE;;;;;;;;;;;;;;;AAeA,GAAIC,kBAAJ,CAAwB;AACpB,GAAM6C,CAAAA,SAAS,CAAG,EAAlB;AACA,IAAK,GAAMC,CAAAA,EAAX,GAAiB9C,CAAAA,kBAAjB,CAAqC;AACjC,GAAM+C,CAAAA,GAAG,CAAG/C,kBAAkB,CAAC8C,EAAD,CAA9B;AACAD,SAAS,CAACC,EAAD,CAAT,CAAgB,CAAEE,OAAO,CAAED,GAAG,GAAK,IAAR,CAAe,CAAf,CAAmB,CAA9B,CAAhB;AACH;;AAEDpD,SAAS,CAAC8C,kBAAV,CAA6B,oBAA7B,CAAmDI,SAAnD;AACH;;AAEDrD,CAAC,CAACyD,eAAF,CAAkBC,mBAAlB,CAAsC3C,OAAtC,CAA8C,SAACC,CAAD,CAAO;AACjDb,SAAS,CAACwD,eAAV,CAA0B3C,CAA1B;AACH,CAFD;;;AAKA,8BAAahB,CAAb,CAAgBC,QAAhB,CAA0B,SAAC2D,MAAD,CAASC,UAAT,CAAqBC,GAArB,CAA6B;AACnD,GAAMC,CAAAA,YAAY,CAAG,6BAAiB/D,CAAjB,CAAoB6D,UAApB,CAAgC,WAAhC,CAArB;AACA,GAAIE,YAAJ,CAAkB;AACd,GAAIA,YAAY,CAACC,aAAjB,CAAgC;AAC5BD,YAAY,CAACC,aAAb,CAA2BjD,OAA3B,CAAmC,SAACC,CAAD,CAAO;AACtCb,SAAS,CAACwD,eAAV,CAA0Bd,cAAKC,IAAL,CAAUJ,SAAV,CAAqB1B,CAArB,CAA1B;AACH,CAFD;AAGH;AACD,GAAI+C,YAAY,CAACE,WAAjB,CAA8B;AAC1BF,YAAY,CAACE,WAAb,CAAyBlD,OAAzB,CAAiC,SAACC,CAAD,CAAO;;AAEpCb,SAAS,CAAC+D,aAAV,CAAwBlD,CAAxB,CAA2B,IAA3B,CAAiC,0BAAjC;AACH,CAHD;AAIH;AACD,GAAI+C,YAAY,CAACI,WAAjB,CAA8B;AAC1BJ,YAAY,CAACI,WAAb,CAAyBpD,OAAzB,CAAiC,SAACC,CAAD,CAAO;AACpCb,SAAS,CAACiE,aAAV,CAAwBpD,CAAxB,CAA2B,IAA3B,CAAiC,0BAAjC;AACH,CAFD;AAGH;AACD,GAAI+C,YAAY,CAACM,WAAjB,CAA8B;AAC1BN,YAAY,CAACM,WAAb,CAAyBtD,OAAzB,CAAiC,SAACC,CAAD,CAAO;AACpCb,SAAS,CAACmE,aAAV,CAAwB,EAAxB,CAA4B,0BAA5B,CAAwD,aAAxD,CAAuE,IAAvE,CAA6E;AACzEC,SAAS,CAAEvD,CAAC,CAACuD,SAAF,EAAe,SAD+C;AAEzEC,WAAW,CAAExD,CAAC,CAACwD,WAF0D;AAGzEC,UAAU,CAAEzD,CAAC,CAACyD,UAAF,EAAgB,CAAC,sDAAD,CAH6C,CAA7E;;AAKH,CAND;AAOH;AACD,GAAIV,YAAY,CAACW,UAAjB,CAA6B;AACzB,IAAK,GAAMC,CAAAA,CAAX,GAAgBZ,CAAAA,YAAY,CAACW,UAA7B,CAAyC;AACrC,GAAIE,CAAAA,KAAK,OAAT;AACA,GAAIC,CAAAA,IAAI,OAAR;AACA,GAAIF,CAAC,CAACG,UAAF,CAAa,IAAb,CAAJ,CAAwB;AACpBF,KAAK,CAAG/B,cAAKC,IAAL,CAAUJ,SAAV,CAAqBiC,CAAC,CAACI,OAAF,CAAU,IAAV,CAAgB,EAAhB,CAArB,CAAR;AACAF,IAAI,CAAG;AACHG,eAAe,CAAE,IADd;AAEHC,KAAK,CAAE,IAFJ;AAGHC,IAAI,CAAE,IAHH,CAAP;;AAKH,CAPD,IAOO;AACHN,KAAK,CAAG/B,cAAKC,IAAL,CAAU,2BAAV,CAAuC6B,CAAvC,CAAR;AACAE,IAAI,CAAG;AACHI,KAAK,CAAE,IADJ,CAAP;;AAGH;AACD9E,SAAS,CAACgF,YAAV,CAAuBP,KAAvB,CAA8BC,IAA9B;AACH;AACJ;AACD,GAAId,YAAY,CAACqB,aAAjB,CAAgC;AAC5B,IAAK,GAAMT,CAAAA,EAAX,GAAgBZ,CAAAA,YAAY,CAACqB,aAA7B,CAA4C;AACxCjF,SAAS,CAACkF,kBAAV,CAA6BV,EAA7B,CAAgCZ,YAAY,CAACqB,aAAb,CAA2BT,EAA3B,CAAhC;AACH;AACJ;AACJ;AACJ,CAtDD;AAuDAW,YAAGC,aAAH,CAAiB3C,WAAjB,CAA8BzC,SAAS,CAACqF,SAAV,EAA9B;AACApD,OAAO;AACV,CAlHD;AAmHH,CA3H2C,CAAjB,EAA3B","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport {\n    getAppFolder,\n    getAppId,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask,\n    logWarning\n} from '../../systemTools/logger';\nimport { inquirerPrompt } from '../../systemTools/prompt';\nimport { IOS, TVOS } from '../../constants';\nimport { parsePlugins } from '../../pluginTools';\nimport { getAppFolderName } from './index';\nimport { parseProvisioningProfiles } from './provisionParser';\nimport { writeFileSync } from '../../systemTools/fileutils';\n\nexport const parseXcodeProject = async (c, platform) => {\n    logTask('parseXcodeProject');\n    // PROJECT\n    c.runtime.xcodeProj = {};\n    c.runtime.xcodeProj.provisioningStyle = getConfigProp(c, platform, 'provisioningStyle', 'Automatic');\n    c.runtime.xcodeProj.deploymentTarget = getConfigProp(c, platform, 'deploymentTarget', '10.0');\n    c.runtime.xcodeProj.provisionProfileSpecifier = getConfigProp(c, platform, 'provisionProfileSpecifier');\n    c.runtime.xcodeProj.codeSignIdentity = getConfigProp(c, platform, 'codeSignIdentity', 'iPhone Developer');\n    c.runtime.xcodeProj.systemCapabilities = getConfigProp(c, platform, 'systemCapabilities');\n    c.runtime.xcodeProj.runScheme = getConfigProp(c, platform, 'runScheme');\n    c.runtime.xcodeProj.teamID = getConfigProp(c, platform, 'teamID');\n    c.runtime.xcodeProj.id = getConfigProp(c, platform, 'id');\n    c.runtime.xcodeProj.appId = getAppId(c, platform);\n\n    if (c.runtime.xcodeProj.provisioningStyle !== 'Automatic' && !c.runtime.xcodeProj.provisionProfileSpecifier) {\n        const result = await parseProvisioningProfiles(c);\n\n        let eligibleProfile;\n\n        result.eligable.forEach((v) => {\n            const bundleId = v.Entitlements['application-identifier'];\n\n            if (bundleId === `${c.runtime.xcodeProj.teamID}.${c.runtime.xcodeProj.id}`) {\n                eligibleProfile = v;\n            }\n        });\n\n        if (eligibleProfile) {\n            const { autoFix } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'autoFix',\n                message: `Found following eligible provisioning profile on your system: ${eligibleProfile.Entitlements['application-identifier']}. Do you want ReNative to fix your app confing?`,\n                warningMessage: 'No provisionProfileSpecifier configured in appConfig despite setting provisioningStyle to manual'\n            });\n            if (autoFix) {\n                c.runtime.xcodeProj.provisionProfileSpecifier = eligibleProfile.Name;\n                c.files.appConfig.config.platforms[platform].buildSchemes[c.program.scheme].provisionProfileSpecifier = eligibleProfile.Name;\n                writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n            }\n        } else {\n            logWarning(`Your build config has provisioningStyle set to manual but no provisionProfileSpecifier configured in appConfig and no available provisioning profiles availiable for ${c.runtime.xcodeProj.id}`);\n        }\n    }\n\n    await _parseXcodeProject(c, platform);\n};\n\nconst _parseXcodeProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask('_parseXcodeProject');\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const xcode = require(`${c.paths.project.nodeModulesDir}/xcode`);\n    const appFolder = getAppFolder(c, platform);\n    const appFolderName = getAppFolderName(c, platform);\n    const projectPath = path.join(appFolder, `${appFolderName}.xcodeproj/project.pbxproj`);\n    const xcodeProj = xcode.project(projectPath);\n    xcodeProj.parse(() => {\n        const {\n            provisioningStyle, deploymentTarget,\n            provisionProfileSpecifier, codeSignIdentity, systemCapabilities, runScheme, teamID, appId\n        } = c.runtime.xcodeProj;\n\n        if (c.runtime.xcodeProj.teamID) {\n            xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM', teamID);\n        } else {\n            xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM', '\"\"');\n        }\n\n        xcodeProj.addTargetAttribute('ProvisioningStyle', provisioningStyle);\n        xcodeProj.addBuildProperty('CODE_SIGN_STYLE', provisioningStyle);\n        xcodeProj.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER', appId);\n\n        if (platform === IOS) {\n            xcodeProj.updateBuildProperty('IPHONEOS_DEPLOYMENT_TARGET', deploymentTarget);\n        } else if (platform === TVOS) {\n            xcodeProj.updateBuildProperty('TVOS_DEPLOYMENT_TARGET', deploymentTarget);\n        }\n\n        if (provisionProfileSpecifier) {\n            xcodeProj.updateBuildProperty('PROVISIONING_PROFILE_SPECIFIER', `\"${provisionProfileSpecifier}\"`);\n        }\n\n        xcodeProj.updateBuildProperty('CODE_SIGN_IDENTITY', `\"${codeSignIdentity}\"`);\n        xcodeProj.updateBuildProperty('\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"', `\"${codeSignIdentity}\"`);\n\n        // if (codeSignIdentity) {\n        //     const bc = xcodeProj.pbxXCBuildConfigurationSection();\n        //     const cs1 = 'CODE_SIGN_IDENTITY';\n        //     const cs2 = '\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"';\n        //     for (const configName in bc) {\n        //         const config = bc[configName];\n        //         if ((runScheme && config.name === runScheme) || (!runScheme)) {\n        //             if (config.buildSettings?.[cs1]) config.buildSettings[cs1] = `\"${codeSignIdentity}\"`;\n        //             if (config.buildSettings?.[cs2]) config.buildSettings[cs2] = `\"${codeSignIdentity}\"`;\n        //         }\n        //     }\n        // }\n\n        if (systemCapabilities) {\n            const sysCapObj = {};\n            for (const sk in systemCapabilities) {\n                const val = systemCapabilities[sk];\n                sysCapObj[sk] = { enabled: val === true ? 1 : 0 };\n            }\n            // const var1 = xcodeProj.getFirstProject().firstProject.attributes.TargetAttributes['200132EF1F6BF9CF00450340'];\n            xcodeProj.addTargetAttribute('SystemCapabilities', sysCapObj);\n        }\n        // FONTS\n        c.pluginConfigiOS.embeddedFontSources.forEach((v) => {\n            xcodeProj.addResourceFile(v);\n        });\n\n        // PLUGINS\n        parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n            const xcodeprojObj = getFlavouredProp(c, pluginPlat, 'xcodeproj');\n            if (xcodeprojObj) {\n                if (xcodeprojObj.resourceFiles) {\n                    xcodeprojObj.resourceFiles.forEach((v) => {\n                        xcodeProj.addResourceFile(path.join(appFolder, v));\n                    });\n                }\n                if (xcodeprojObj.sourceFiles) {\n                    xcodeprojObj.sourceFiles.forEach((v) => {\n                        // const group = xcodeProj.hash.project.objects.PBXGroup['200132F21F6BF9CF00450340'];\n                        xcodeProj.addSourceFile(v, null, '200132F21F6BF9CF00450340');\n                    });\n                }\n                if (xcodeprojObj.headerFiles) {\n                    xcodeprojObj.headerFiles.forEach((v) => {\n                        xcodeProj.addHeaderFile(v, null, '200132F21F6BF9CF00450340');\n                    });\n                }\n                if (xcodeprojObj.buildPhases) {\n                    xcodeprojObj.buildPhases.forEach((v) => {\n                        xcodeProj.addBuildPhase([], 'PBXShellScriptBuildPhase', 'ShellScript', null, {\n                            shellPath: v.shellPath || '/bin/sh',\n                            shellScript: v.shellScript,\n                            inputPaths: v.inputPaths || ['\"$(SRCROOT)/$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)\"']\n                        });\n                    });\n                }\n                if (xcodeprojObj.frameworks) {\n                    for (const k in xcodeprojObj.frameworks) {\n                        let fPath;\n                        let opts;\n                        if (k.startsWith('./')) {\n                            fPath = path.join(appFolder, k.replace('./', ''));\n                            opts = {\n                                customFramework: true,\n                                embed: true,\n                                link: true,\n                            };\n                        } else {\n                            fPath = path.join('System/Library/Frameworks', k);\n                            opts = {\n                                embed: true\n                            };\n                        }\n                        xcodeProj.addFramework(fPath, opts);\n                    }\n                }\n                if (xcodeprojObj.buildSettings) {\n                    for (const k in xcodeprojObj.buildSettings) {\n                        xcodeProj.addToBuildSettings(k, xcodeprojObj.buildSettings[k]);\n                    }\n                }\n            }\n        });\n        fs.writeFileSync(projectPath, xcodeProj.writeSync());\n        resolve();\n    });\n});\n"],"file":"xcodeParser.js"}