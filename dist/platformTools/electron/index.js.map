{"version":3,"file":"index.js","names":["configureElectronProject","c","platform","logTask","copyAssetsFolder","MACOS","_generateICNS","configureCoreWebProject","configureProject","copyBuildsFolder","merge","require","Promise","resolve","reject","isPlatformActive","appFolder","getAppFolder","templateFolder","getAppTemplateFolder","bundleAssets","getConfigProp","electronConfigPath","path","join","packagePath","appId","getAppId","fs","existsSync","logWarning","chalk","white","createPlatformBuild","then","catch","e","pkgJson","packageJson","readObjectSync","name","runtime","productName","getAppTitle","version","getAppVersion","description","getAppDescription","author","getAppAuthor","license","getAppLicense","main","writeFileSync","browserWindow","width","height","webPreferences","nodeIntegration","browserWindowExt","browserWindowStr","JSON","stringify","writeCleanFile","pattern","override","localhost","port","macConfig","mac","entitlements","entitlementsInherit","hardenedRuntime","mas","provisioningProfile","electronConfig","directories","app","buildResources","output","files","electronConfigExt","buildElectron","buildWeb","exportElectron","maxErrorLength","program","buildPath","console","log","removeDirs","executeAsync","logSuccess","runElectron","bundleIsDev","_runElectronSimulator","checkPortInUse","isPortActive","logInfo","waitForWebpack","logError","runElectronDevServer","confirmActiveBundler","elc","resolveNodeModulePath","child","spawn","detached","env","process","stdio","on","code","exit","spawnError","error","unref","runWeb","source","paths","appConfig","dirs","forEach","v","pf","dir","dest","mkdirSync","p"],"sources":["../../../src/platformTools/electron/index.js"],"sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';\nimport { createPlatformBuild } from '..';\nimport { executeAsync } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppTitle,\n    writeCleanFile,\n    getAppId,\n    getAppTemplateFolder,\n    getAppDescription,\n    getAppAuthor,\n    getAppLicense,\n    getConfigProp,\n    checkPortInUse,\n    resolveNodeModulePath,\n    waitForWebpack,\n    confirmActiveBundler\n} from '../../common';\nimport {\n    logTask,\n    logError,\n    logWarning,\n    logSuccess,\n    logInfo\n} from '../../systemTools/logger';\nimport { isPlatformActive } from '..';\nimport { isSystemWin } from '../../utils';\nimport { copyBuildsFolder, copyAssetsFolder } from '../../projectTools/projectParser';\nimport { MACOS } from '../../constants';\nimport {\n    buildWeb,\n    runWeb,\n    configureCoreWebProject\n} from '../web';\nimport {\n    mkdirSync, writeFileSync, readObjectSync, removeDirs\n} from '../../systemTools/fileutils';\n\nconst configureElectronProject = async (c, platform) => {\n    logTask(`configureElectronProject:${platform}`);\n\n    await copyAssetsFolder(c, platform, platform === MACOS ? _generateICNS : null);\n    await configureCoreWebProject(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\nconst merge = require('deepmerge');\n\nconst configureProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`configureProject:${platform}`);\n\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const appFolder = getAppFolder(c, platform);\n    const templateFolder = getAppTemplateFolder(c, platform);\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n    const electronConfigPath = path.join(appFolder, 'electronConfig.json');\n    const packagePath = path.join(appFolder, 'package.json');\n    const appId = getAppId(c, platform);\n\n    if (!fs.existsSync(packagePath)) {\n        logWarning(`Looks like your ${chalk.white(platform)} platformBuild is misconfigured!. let's repair it.`);\n        createPlatformBuild(c, platform)\n            .then(() => configureElectronProject(c, platform))\n            .then(() => resolve(c))\n            .catch(e => reject(e));\n        return;\n    }\n\n    const pkgJson = path.join(templateFolder, 'package.json');\n    const packageJson = readObjectSync(pkgJson);\n\n    packageJson.name = `${c.runtime.appId}-${platform}`;\n    packageJson.productName = `${getAppTitle(c, platform)}`;\n    packageJson.version = `${getAppVersion(c, platform)}`;\n    packageJson.description = `${getAppDescription(c, platform)}`;\n    packageJson.author = getAppAuthor(c, platform);\n    packageJson.license = `${getAppLicense(c, platform)}`;\n    packageJson.main = './main.js';\n\n    writeFileSync(packagePath, packageJson);\n\n    let browserWindow = { width: 1200, height: 800, webPreferences: { nodeIntegration: true } };\n    const browserWindowExt = getConfigProp(c, platform, 'BrowserWindow');\n    if (browserWindowExt) {\n        browserWindow = merge(browserWindow, browserWindowExt);\n    }\n    const browserWindowStr = JSON.stringify(browserWindow, null, 2);\n\n    if (bundleAssets) {\n        writeCleanFile(path.join(templateFolder, '_privateConfig', 'main.js'), path.join(appFolder, 'main.js'), [\n            { pattern: '{{PLUGIN_INJECT_BROWSER_WINDOW}}', override: browserWindowStr },\n        ]);\n    } else {\n        writeCleanFile(path.join(templateFolder, '_privateConfig', 'main.dev.js'), path.join(appFolder, 'main.js'), [\n            { pattern: '{{DEV_SERVER}}', override: `http://${c.runtime.localhost}:${c.runtime.port}` },\n            { pattern: '{{PLUGIN_INJECT_BROWSER_WINDOW}}', override: browserWindowStr },\n        ]);\n    }\n\n    const macConfig = {};\n    if (platform === MACOS) {\n        macConfig.mac = {\n            entitlements: path.join(appFolder, 'entitlements.mac.plist'),\n            entitlementsInherit: path.join(appFolder, 'entitlements.mac.plist'),\n            hardenedRuntime: true\n        };\n        macConfig.mas = {\n            entitlements: path.join(appFolder, 'entitlements.mas.plist'),\n            entitlementsInherit: path.join(appFolder, 'entitlements.mas.inherit.plist'),\n            provisioningProfile: path.join(appFolder, 'embedded.provisionprofile'),\n            hardenedRuntime: false\n        };\n    }\n\n    let electronConfig = merge({\n        appId,\n        directories: {\n            app: appFolder,\n            buildResources: path.join(appFolder, 'resources'),\n            output: path.join(appFolder, 'build/release')\n        },\n        files: [\n            '!build/release'\n        ],\n    }, macConfig);\n\n    const electronConfigExt = getConfigProp(c, platform, 'electronConfig');\n\n    if (electronConfigExt) {\n        electronConfig = merge(electronConfig, electronConfigExt);\n    }\n    writeFileSync(electronConfigPath, electronConfig);\n\n\n    resolve();\n});\n\nconst buildElectron = (c, platform) => {\n    logTask(`buildElectron:${platform}`);\n\n    return buildWeb(c, platform);\n};\n\nconst exportElectron = async (c, platform) => {\n    logTask(`exportElectron:${platform}`);\n    const { maxErrorLength } = c.program;\n    const appFolder = getAppFolder(c, platform);\n    const buildPath = path.join(appFolder, 'build');\n\n    if (fs.existsSync(buildPath)) {\n        console.log(`removing old build ${buildPath}`);\n        await removeDirs([buildPath]);\n    }\n\n    await executeAsync(c, `npx electron-builder --config ${path.join(appFolder, 'electronConfig.json')}`);\n\n    logSuccess(`Your Exported App is located in ${chalk.white(path.join(appFolder, 'build/release'))} .`);\n};\n\nconst runElectron = async (c, platform, port) => {\n    logTask(`runElectron:${platform}`);\n\n    const bundleIsDev = getConfigProp(c, platform, 'bundleIsDev') === true;\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n\n    if (bundleAssets) {\n        await buildElectron(c, platform, bundleIsDev);\n        await _runElectronSimulator(c, platform);\n    } else {\n        const isPortActive = await checkPortInUse(c, platform, port);\n        if (!isPortActive) {\n            logInfo(\n                `Looks like your ${chalk.white(platform)} devServer at port ${chalk.white(\n                    port\n                )} is not running. Starting it up for you...`\n            );\n            waitForWebpack(c, port)\n                .then(() => _runElectronSimulator(c, platform))\n                .catch(logError);\n            // await _runElectronSimulator(c, platform);\n            await runElectronDevServer(c, platform, port);\n        } else {\n            await confirmActiveBundler(c);\n            await _runElectronSimulator(c, platform);\n        }\n    }\n};\n\nconst _runElectronSimulator = async (c) => {\n    logTask(`_runElectronSimulator:${c.platform}`);\n    const appFolder = getAppFolder(c, c.platform);\n    const elc = resolveNodeModulePath(c, 'electron/cli.js');\n\n    const child = spawn('node', [elc, path.join(appFolder, '/main.js')], {\n        detached: true,\n        env: process.env,\n        stdio: 'inherit',\n    })\n        .on('close', code => process.exit(code))\n        .on('error', spawnError => console.error(spawnError));\n\n    child.unref();\n};\n\nconst runElectronDevServer = async (c, platform, port) => {\n    logTask(`runElectronDevServer:${platform}`);\n\n    return runWeb(c, platform, port);\n};\n\nconst _generateICNS = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`_generateICNS:${platform}`);\n\n    let source;\n\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const pf = path.join(v, `assets/${platform}/AppIcon.iconset`);\n            if (fs.existsSync(pf)) {\n                source = pf;\n            }\n        });\n    } else if (c.paths.appConfig.dir) {\n        source = path.join(c.paths.appConfig.dir, `assets/${platform}/AppIcon.iconset`);\n    }\n\n    const dest = path.join(getAppFolder(c, platform), 'resources/icon.icns');\n\n    if (!fs.existsSync(source)) {\n        logWarning(`Your app config is missing ${chalk.white(source)}. icon.icns will not be generated!`);\n        resolve();\n        return;\n    }\n\n    mkdirSync(path.join(getAppFolder(c, platform), 'resources'));\n\n    const p = [\n        '--convert',\n        'icns',\n        source,\n        '--output',\n        dest\n    ];\n    try {\n        executeAsync(c, `iconutil ${p.join(' ')}`);\n        resolve();\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport { configureElectronProject, runElectron, buildElectron, exportElectron, runElectronDevServer };\n"],"mappings":"iWAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQA;AACA;AACA;AACA;;;;;AAKA;;;;AAIA,GAAMA,yBAAwB,CAAG,QAA3BA,yBAAwB,CAAUC,CAAC,CAAEC,QAAQ;AAC/C,GAAAC,eAAO,8BAA6BD,QAAQ,CAAG,CAAC;;AAE1C,GAAAE,+BAAgB,EAACH,CAAC,CAAEC,QAAQ,CAAEA,QAAQ,GAAKG,gBAAK,CAAGC,aAAa,CAAG,IAAI,CAAC;AACxE,GAAAC,4BAAuB,EAACN,CAAC,CAAEC,QAAQ,CAAC;AACpCM,gBAAgB,CAACP,CAAC,CAAEC,QAAQ,CAAC;AAC5B,GAAAO,+BAAgB,EAACR,CAAC,CAAEC,QAAQ,CAAC,sEACvC,CAAC;;AACF,GAAMQ,MAAK,CAAGC,OAAO,CAAC,WAAW,CAAC;;AAElC,GAAMH,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIP,CAAC,CAAEC,QAAQ,QAAK,IAAIU,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK;AACvE,GAAAX,eAAO,sBAAqBD,QAAQ,CAAG;;AAEvC,GAAI,CAAC,GAAAa,kBAAgB,EAACd,CAAC,CAAEC,QAAQ,CAAEW,OAAO,CAAC,CAAE;;AAE7C,GAAMG,UAAS,CAAG,GAAAC,oBAAY,EAAChB,CAAC,CAAEC,QAAQ,CAAC;AAC3C,GAAMgB,eAAc,CAAG,GAAAC,4BAAoB,EAAClB,CAAC,CAAEC,QAAQ,CAAC;AACxD,GAAMkB,aAAY,CAAG,GAAAC,qBAAa,EAACpB,CAAC,CAAEC,QAAQ,CAAE,cAAc,CAAC,GAAK,IAAI;AACxE,GAAMoB,mBAAkB,CAAGC,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,qBAAqB,CAAC;AACtE,GAAMS,YAAW,CAAGF,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,cAAc,CAAC;AACxD,GAAMU,MAAK,CAAG,GAAAC,gBAAQ,EAAC1B,CAAC,CAAEC,QAAQ,CAAC;;AAEnC,GAAI,CAAC0B,WAAE,CAACC,UAAU,CAACJ,WAAW,CAAC,CAAE;AAC7B,GAAAK,kBAAU,qBAAoBC,cAAK,CAACC,KAAK,CAAC9B,QAAQ,CAAC,sDAAqD;AACxG,GAAA+B,qBAAmB,EAAChC,CAAC,CAAEC,QAAQ,CAAC;AAC3BgC,IAAI,CAAC,iBAAMlC,yBAAwB,CAACC,CAAC,CAAEC,QAAQ,CAAC,GAAC;AACjDgC,IAAI,CAAC,iBAAMrB,QAAO,CAACZ,CAAC,CAAC,GAAC;AACtBkC,KAAK,CAAC,SAAAC,CAAC,QAAItB,OAAM,CAACsB,CAAC,CAAC,GAAC;AAC1B;AACJ;;AAEA,GAAMC,QAAO,CAAGd,aAAI,CAACC,IAAI,CAACN,cAAc,CAAE,cAAc,CAAC;AACzD,GAAMoB,YAAW,CAAG,GAAAC,yBAAc,EAACF,OAAO,CAAC;;AAE3CC,WAAW,CAACE,IAAI,CAAMvC,CAAC,CAACwC,OAAO,CAACf,KAAK,KAAIxB,QAAU;AACnDoC,WAAW,CAACI,WAAW,IAAM,GAAAC,mBAAW,EAAC1C,CAAC,CAAEC,QAAQ,CAAG;AACvDoC,WAAW,CAACM,OAAO,IAAM,GAAAC,qBAAa,EAAC5C,CAAC,CAAEC,QAAQ,CAAG;AACrDoC,WAAW,CAACQ,WAAW,IAAM,GAAAC,yBAAiB,EAAC9C,CAAC,CAAEC,QAAQ,CAAG;AAC7DoC,WAAW,CAACU,MAAM,CAAG,GAAAC,oBAAY,EAAChD,CAAC,CAAEC,QAAQ,CAAC;AAC9CoC,WAAW,CAACY,OAAO,IAAM,GAAAC,qBAAa,EAAClD,CAAC,CAAEC,QAAQ,CAAG;AACrDoC,WAAW,CAACc,IAAI,CAAG,WAAW;;AAE9B,GAAAC,wBAAa,EAAC5B,WAAW,CAAEa,WAAW,CAAC;;AAEvC,GAAIgB,cAAa,CAAG,CAAEC,KAAK,CAAE,IAAI,CAAEC,MAAM,CAAE,GAAG,CAAEC,cAAc,CAAE,CAAEC,eAAe,CAAE,IAAK,CAAE,CAAC;AAC3F,GAAMC,iBAAgB,CAAG,GAAAtC,qBAAa,EAACpB,CAAC,CAAEC,QAAQ,CAAE,eAAe,CAAC;AACpE,GAAIyD,gBAAgB,CAAE;AAClBL,aAAa,CAAG5C,KAAK,CAAC4C,aAAa,CAAEK,gBAAgB,CAAC;AAC1D;AACA,GAAMC,iBAAgB,CAAGC,IAAI,CAACC,SAAS,CAACR,aAAa,CAAE,IAAI,CAAE,CAAC,CAAC;;AAE/D,GAAIlC,YAAY,CAAE;AACd,GAAA2C,sBAAc,EAACxC,aAAI,CAACC,IAAI,CAACN,cAAc,CAAE,gBAAgB,CAAE,SAAS,CAAC,CAAEK,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,SAAS,CAAC,CAAE;AACpG,CAAEgD,OAAO,CAAE,kCAAkC,CAAEC,QAAQ,CAAEL,gBAAiB,CAAC,CAC9E,CAAC;;AACN,CAAC,IAAM;AACH,GAAAG,sBAAc,EAACxC,aAAI,CAACC,IAAI,CAACN,cAAc,CAAE,gBAAgB,CAAE,aAAa,CAAC,CAAEK,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,SAAS,CAAC,CAAE;AACxG,CAAEgD,OAAO,CAAE,gBAAgB,CAAEC,QAAQ,WAAYhE,CAAC,CAACwC,OAAO,CAACyB,SAAS,KAAIjE,CAAC,CAACwC,OAAO,CAAC0B,IAAO,CAAC;AAC1F,CAAEH,OAAO,CAAE,kCAAkC,CAAEC,QAAQ,CAAEL,gBAAiB,CAAC,CAC9E,CAAC;;AACN;;AAEA,GAAMQ,UAAS,CAAG,CAAC,CAAC;AACpB,GAAIlE,QAAQ,GAAKG,gBAAK,CAAE;AACpB+D,SAAS,CAACC,GAAG,CAAG;AACZC,YAAY,CAAE/C,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,wBAAwB,CAAC;AAC5DuD,mBAAmB,CAAEhD,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,wBAAwB,CAAC;AACnEwD,eAAe,CAAE;AACrB,CAAC;AACDJ,SAAS,CAACK,GAAG,CAAG;AACZH,YAAY,CAAE/C,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,wBAAwB,CAAC;AAC5DuD,mBAAmB,CAAEhD,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,gCAAgC,CAAC;AAC3E0D,mBAAmB,CAAEnD,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,2BAA2B,CAAC;AACtEwD,eAAe,CAAE;AACrB,CAAC;AACL;;AAEA,GAAIG,eAAc,CAAGjE,KAAK,CAAC;AACvBgB,KAAK,CAALA,KAAK;AACLkD,WAAW,CAAE;AACTC,GAAG,CAAE7D,SAAS;AACd8D,cAAc,CAAEvD,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,WAAW,CAAC;AACjD+D,MAAM,CAAExD,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,eAAe;AAChD,CAAC;AACDgE,KAAK,CAAE;AACH,gBAAgB;;AAExB,CAAC,CAAEZ,SAAS,CAAC;;AAEb,GAAMa,kBAAiB,CAAG,GAAA5D,qBAAa,EAACpB,CAAC,CAAEC,QAAQ,CAAE,gBAAgB,CAAC;;AAEtE,GAAI+E,iBAAiB,CAAE;AACnBN,cAAc,CAAGjE,KAAK,CAACiE,cAAc,CAAEM,iBAAiB,CAAC;AAC7D;AACA,GAAA5B,wBAAa,EAAC/B,kBAAkB,CAAEqD,cAAc,CAAC;;;AAGjD9D,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF,GAAMqE,cAAa,CAAG,QAAhBA,cAAa,CAAIjF,CAAC,CAAEC,QAAQ,CAAK;AACnC,GAAAC,eAAO,mBAAkBD,QAAQ,CAAG;;AAEpC,MAAO,GAAAiF,aAAQ,EAAClF,CAAC,CAAEC,QAAQ,CAAC;AAChC,CAAC,CAAC;;AAEF,GAAMkF,eAAc,CAAG,QAAjBA,eAAc,CAAUnF,CAAC,CAAEC,QAAQ;AACrC,GAAAC,eAAO,oBAAmBD,QAAQ,CAAG;AAC7BmF,cAAc,CAAKpF,CAAC,CAACqF,OAAO,CAA5BD,cAAc;AAChBrE,SAAS,CAAG,GAAAC,oBAAY,EAAChB,CAAC,CAAEC,QAAQ,CAAC;AACrCqF,SAAS,CAAGhE,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,OAAO,CAAC;;AAE3CY,WAAE,CAACC,UAAU,CAAC0D,SAAS,CAAC;AACxBC,OAAO,CAACC,GAAG,uBAAuBF,SAAS,CAAG,CAAC;AACzC,GAAAG,qBAAU,EAAC,CAACH,SAAS,CAAC,CAAC;;;AAG3B,GAAAI,kBAAY,EAAC1F,CAAC,kCAAmCsB,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,qBAAqB,CAAC,CAAG;;AAErG,GAAA4E,kBAAU,qCAAoC7D,cAAK,CAACC,KAAK,CAACT,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,eAAe,CAAC,CAAC,MAAK,CAAC,sEACzG,CAAC;;;AAEF,GAAM6E,YAAW,CAAG,QAAdA,YAAW,CAAU5F,CAAC,CAAEC,QAAQ,CAAEiE,IAAI;AACxC,GAAAhE,eAAO,iBAAgBD,QAAQ,CAAG;;AAE5B4F,WAAW,CAAG,GAAAzE,qBAAa,EAACpB,CAAC,CAAEC,QAAQ,CAAE,aAAa,CAAC,GAAK,IAAI;AAChEkB,YAAY,CAAG,GAAAC,qBAAa,EAACpB,CAAC,CAAEC,QAAQ,CAAE,cAAc,CAAC,GAAK,IAAI;;AAEpEkB,YAAY;AACN8D,aAAa,CAACjF,CAAC,CAAEC,QAAQ,CAAE4F,WAAW,CAAC;AACvCC,qBAAqB,CAAC9F,CAAC,CAAEC,QAAQ,CAAC;;AAEb,GAAA8F,sBAAc,EAAC/F,CAAC,CAAEC,QAAQ,CAAEiE,IAAI,CAAC,UAAtD8B,YAAY;AACbA,YAAY;AACb,GAAAC,eAAO;AACgBnE,cAAK,CAACC,KAAK,CAAC9B,QAAQ,CAAC,uBAAsB6B,cAAK,CAACC,KAAK;AACrEmC,IAAI,CACP,8CACJ;;;AACD,GAAAgC,sBAAc,EAAClG,CAAC,CAAEkE,IAAI,CAAC;AAClBjC,IAAI,CAAC,iBAAM6D,sBAAqB,CAAC9F,CAAC,CAAEC,QAAQ,CAAC,GAAC;AAC9CiC,KAAK,CAACiE,gBAAQ,CAAC,CAAC;;AAEfC,oBAAoB,CAACpG,CAAC,CAAEC,QAAQ,CAAEiE,IAAI,CAAC;;AAEvC,GAAAmC,4BAAoB,EAACrG,CAAC,CAAC;AACvB8F,qBAAqB,CAAC9F,CAAC,CAAEC,QAAQ,CAAC,wEAGnD,CAAC;;;;;AAEF,GAAM6F,sBAAqB,CAAG,QAAxBA,sBAAqB,CAAU9F,CAAC;AAClC,GAAAE,eAAO,2BAA0BF,CAAC,CAACC,QAAQ,CAAG;AACxCc,SAAS,CAAG,GAAAC,oBAAY,EAAChB,CAAC,CAAEA,CAAC,CAACC,QAAQ,CAAC;AACvCqG,GAAG,CAAG,GAAAC,6BAAqB,EAACvG,CAAC,CAAE,iBAAiB,CAAC;;AAEjDwG,KAAK,CAAG,GAAAC,oBAAK,EAAC,MAAM,CAAE,CAACH,GAAG,CAAEhF,aAAI,CAACC,IAAI,CAACR,SAAS,CAAE,UAAU,CAAC,CAAC,CAAE;AACjE2F,QAAQ,CAAE,IAAI;AACdC,GAAG,CAAEC,OAAO,CAACD,GAAG;AAChBE,KAAK,CAAE;AACX,CAAC,CAAC;AACGC,EAAE,CAAC,OAAO,CAAE,SAAAC,IAAI,QAAIH,QAAO,CAACI,IAAI,CAACD,IAAI,CAAC,GAAC;AACvCD,EAAE,CAAC,OAAO,CAAE,SAAAG,UAAU,QAAI1B,QAAO,CAAC2B,KAAK,CAACD,UAAU,CAAC,GAAC;;AAEzDT,KAAK,CAACW,KAAK,EAAE,CAAC,qEACjB;;;AAED,GAAMf,qBAAoB,CAAG,QAAvBA,qBAAoB,CAAUpG,CAAC,CAAEC,QAAQ,CAAEiE,IAAI;AACjD,GAAAhE,eAAO,0BAAyBD,QAAQ,CAAG,CAAC;;AAErC,GAAAmH,WAAM,EAACpH,CAAC,CAAEC,QAAQ,CAAEiE,IAAI,CAAC,uEACnC,CAAC;;;AAEF,GAAM7D,cAAa,CAAG,QAAhBA,cAAa,CAAIL,CAAC,CAAEC,QAAQ,QAAK,IAAIU,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK;AACpE,GAAAX,eAAO,mBAAkBD,QAAQ,CAAG;;AAEpC,GAAIoH,OAAM;;AAEV,GAAIrH,CAAC,CAACsH,KAAK,CAACC,SAAS,CAACC,IAAI,CAAE;AACxBxH,CAAC,CAACsH,KAAK,CAACC,SAAS,CAACC,IAAI,CAACC,OAAO,CAAC,SAACC,CAAC,CAAK;AAClC,GAAMC,GAAE,CAAGrG,aAAI,CAACC,IAAI,CAACmG,CAAC,WAAYzH,QAAQ,oBAAmB;AAC7D,GAAI0B,WAAE,CAACC,UAAU,CAAC+F,EAAE,CAAC,CAAE;AACnBN,MAAM,CAAGM,EAAE;AACf;AACJ,CAAC,CAAC;AACN,CAAC,IAAM,IAAI3H,CAAC,CAACsH,KAAK,CAACC,SAAS,CAACK,GAAG,CAAE;AAC9BP,MAAM,CAAG/F,aAAI,CAACC,IAAI,CAACvB,CAAC,CAACsH,KAAK,CAACC,SAAS,CAACK,GAAG,WAAY3H,QAAQ,oBAAmB;AACnF;;AAEA,GAAM4H,KAAI,CAAGvG,aAAI,CAACC,IAAI,CAAC,GAAAP,oBAAY,EAAChB,CAAC,CAAEC,QAAQ,CAAC,CAAE,qBAAqB,CAAC;;AAExE,GAAI,CAAC0B,WAAE,CAACC,UAAU,CAACyF,MAAM,CAAC,CAAE;AACxB,GAAAxF,kBAAU,gCAA+BC,cAAK,CAACC,KAAK,CAACsF,MAAM,CAAC,sCAAqC;AACjGzG,OAAO,EAAE;AACT;AACJ;;AAEA,GAAAkH,oBAAS,EAACxG,aAAI,CAACC,IAAI,CAAC,GAAAP,oBAAY,EAAChB,CAAC,CAAEC,QAAQ,CAAC,CAAE,WAAW,CAAC,CAAC;;AAE5D,GAAM8H,EAAC,CAAG;AACN,WAAW;AACX,MAAM;AACNV,MAAM;AACN,UAAU;AACVQ,IAAI,CACP;;AACD,GAAI;AACA,GAAAnC,kBAAY,EAAC1F,CAAC,aAAc+H,CAAC,CAACxG,IAAI,CAAC,GAAG,CAAC,CAAG;AAC1CX,OAAO,EAAE;AACb,CAAE,MAAOuB,CAAC,CAAE;AACRtB,MAAM,CAACsB,CAAC,CAAC;AACb;AACJ,CAAC,CAAC"}