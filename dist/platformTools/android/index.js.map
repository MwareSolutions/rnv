{"version":3,"file":"index.js","names":["_getEntryOutputName","c","entryFile","buildConfig","platforms","platform","outputFile","ANDROID_WEAR","packageAndroid","Promise","resolve","reject","logTask","bundleAssets","getConfigProp","appFolder","getAppFolder","reactNative","isSystemWin","path","normalize","process","cwd","console","log","executeAsync","then","catch","e","runAndroid","defaultTarget","target","program","outputAab","_runGradleApp","resetAdb","net","isIP","connectToWifiDevice","getAndroidTargets","device","undefined","devicesAndEmulators","activeDevices","filter","d","isActive","inactiveDevices","askWhereToRun","length","devicesString","composeDevicesString","choices","inquirer","prompt","name","type","message","response","chosenEmulator","launchAndroidSimulator","checkForActiveEmulator","devices","dev","find","askForNewEmulator","logDebug","foundDevice","udid","includes","dv","logInfo","_checkSigningCerts","signingConfig","isRelease","privateConfig","files","workspace","appConfig","configPrivate","logWarning","command","chalk","white","paths","confirm","confirmCopy","inquirerPrompt","confirmNewKeystore","platCandidates","ANDROID_TV","ANDROID","forEach","v","platCandidate","resultCopy","dir","result","storeFile","storePassword","keyAlias","keyPassword","keystorePath","mkdirSync","keytoolCmd","env","shell","stdio","silent","updateObjectSync","logSuccess","configureProject","bundleId","getAppId","outputFolder","arch","stacktrace","info","cd","aabPath","join","apkPath","fs","existsSync","execCLI","CLI_ANDROID_ADB","Error","buildAndroid","toLowerCase","configureAndroidProperties","addNDK","config","sdks","ANDROID_NDK","ndkString","getRealPath","sdkDir","ANDROID_SDK","replace","writeFileSync","configureGradleProject","isPlatformActive","copyAssetsFolder","copyBuildsFolder","appTemplateFolder","getAppTemplateFolder","gradlew","createPlatformBuild","chmodSync","pluginConfigAndroid","pluginIncludes","pluginPaths","pluginImports","pluginPackages","pluginActivityImports","pluginActivityMethods","pluginApplicationImports","pluginApplicationMethods","pluginApplicationCreateMethods","pluginApplicationDebugServer","applyPlugin","defaultConfig","pluginActivityCreateMethods","pluginActivityResultMethods","pluginSplashActivityImports","manifestApplication","buildGradleAllProjectsRepositories","buildGradleBuildScriptRepositories","buildGradleBuildScriptDependencies","buildGradleBuildScriptDexOptions","appBuildGradleSigningConfigs","appBuildGradleImplementations","resourceStrings","appBuildGradleAfterEvaluate","parsePlugins","plugin","pluginPlat","key","injectPluginGradleSync","package","injectPluginKotlinSync","injectPluginManifestSync","injectPluginXmlValuesSync","substring","parseFonts","font","split","includedFonts","common","fontSource","fontFolder","fontDest","copyFileSync","parseSettingsGradleSync","parseAppBuildGradleSync","parseBuildGradleSync","parseMainActivitySync","parseMainApplicationSync","parseSplashActivitySync","parseValuesStringsSync","parseValuesColorsSync","parseAndroidManifestSync","parseGradlePropertiesSync","runAndroidLog","child","execa","cli","stdout","on","data","toString","red","yellow","res","err"],"sources":["../../../src/platformTools/android/index.js"],"sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular\nimport path from 'path';\nimport fs from 'fs';\nimport net from 'net';\nimport chalk from 'chalk';\nimport shell from 'shelljs';\nimport inquirer from 'inquirer';\nimport execa from 'execa';\n\nimport { executeAsync, execCLI } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getAppTemplateFolder,\n    getConfigProp,\n    getAppId\n} from '../../common';\nimport { isPlatformActive, createPlatformBuild } from '..';\nimport { isSystemWin } from '../../utils';\nimport { inquirerPrompt } from '../../systemTools/prompt';\nimport { logTask, logWarning, logDebug, logInfo, logSuccess } from '../../systemTools/logger';\nimport { copyFileSync, mkdirSync, getRealPath, updateObjectSync } from '../../systemTools/fileutils';\nimport { copyAssetsFolder, copyBuildsFolder, parseFonts } from '../../projectTools/projectParser';\nimport { ANDROID_WEAR, ANDROID, ANDROID_TV, CLI_ANDROID_ADB } from '../../constants';\nimport { parsePlugins } from '../../pluginTools';\nimport { parseAndroidManifestSync, injectPluginManifestSync } from './manifestParser';\nimport { parseMainActivitySync, parseSplashActivitySync, parseMainApplicationSync, injectPluginKotlinSync } from './kotlinParser';\nimport {\n    parseAppBuildGradleSync, parseBuildGradleSync, parseSettingsGradleSync,\n    parseGradlePropertiesSync, injectPluginGradleSync\n} from './gradleParser';\nimport { parseValuesStringsSync, injectPluginXmlValuesSync, parseValuesColorsSync } from './xmlValuesParser';\nimport { resetAdb, getAndroidTargets, composeDevicesString, launchAndroidSimulator, checkForActiveEmulator, askForNewEmulator, connectToWifiDevice } from './deviceManager';\n\nconst _getEntryOutputName = (c) => {\n    // CRAPPY BUT Android Wear does not support webview required for connecting to packager. this is hack to prevent RN connectiing to running bundler\n    const { entryFile } = c.buildConfig.platforms[c.platform];\n    // TODO Android PROD Crashes if not using this hardcoded one\n    let outputFile;\n    if (c.platform === ANDROID_WEAR) {\n        outputFile = entryFile;\n    } else {\n        outputFile = 'index.android';\n    }\n    return outputFile;\n};\n\nexport const packageAndroid = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`packageAndroid:${platform}`);\n\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets', false) === true;\n\n    if (!bundleAssets && platform !== ANDROID_WEAR) {\n        resolve();\n        return;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    const appFolder = getAppFolder(c, platform);\n    let reactNative = 'react-native';\n\n    if (isSystemWin) {\n        reactNative = path.normalize(`${process.cwd()}/node_modules/.bin/react-native.cmd`);\n    }\n\n    console.log('ANDROID PACKAGE STARTING................');\n    executeAsync(c, `${reactNative} bundle --platform android --dev false --assets-dest ${appFolder}/app/src/main/res --entry-file ${c.buildConfig.platforms[c.platform]?.entryFile}.js --bundle-output ${appFolder}/app/src/main/assets/${outputFile}.bundle --sourcemap-output ${appFolder}/app/src/main/assets/${outputFile}.bundle.map`)\n        .then(() => {\n            console.log('ANDROID PACKAGE FINISHED');\n            return resolve();\n        })\n        .catch((e) => {\n            console.log('ANDROID PACKAGE FAILED');\n            return reject(e);\n        });\n});\n\n\nexport const runAndroid = async (c, platform, defaultTarget) => {\n    const { target } = c.program;\n    logTask(`runAndroid:${platform}:${target}:${defaultTarget}`);\n\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    // shortcircuit devices logic since aabs can't be installed on a device\n    if (outputAab) return _runGradleApp(c, platform, {});\n\n    await resetAdb(c);\n\n    if (target && net.isIP(target)) {\n        await connectToWifiDevice(c, target);\n    }\n\n    let devicesAndEmulators;\n    try {\n        devicesAndEmulators = await getAndroidTargets(c, false, false, c.program.device !== undefined);\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    const activeDevices = devicesAndEmulators.filter(d => d.isActive);\n    const inactiveDevices = devicesAndEmulators.filter(d => !d.isActive);\n\n    const askWhereToRun = async () => {\n        if (activeDevices.length === 0 && inactiveDevices.length > 0) {\n        // No device active, but there are emulators created\n            const devicesString = composeDevicesString(inactiveDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([{\n                name: 'chosenEmulator',\n                type: 'list',\n                message: 'What emulator would you like to start?',\n                choices\n            }]);\n            if (response.chosenEmulator) {\n                await launchAndroidSimulator(c, platform, response.chosenEmulator, true);\n                const devices = await checkForActiveEmulator(c, platform);\n                await _runGradleApp(c, platform, devices);\n            }\n        } else if (activeDevices.length > 1) {\n            const devicesString = composeDevicesString(activeDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([{\n                name: 'chosenEmulator',\n                type: 'list',\n                message: 'Where would you like to run your app?',\n                choices\n            }]);\n            if (response.chosenEmulator) {\n                const dev = activeDevices.find(d => d.name === response.chosenEmulator);\n                await _runGradleApp(c, platform, dev);\n            }\n        } else {\n            await askForNewEmulator(c, platform);\n            const devices = await checkForActiveEmulator(c, platform);\n            await _runGradleApp(c, platform, devices);\n        }\n    };\n\n    if (target) {\n        // a target is provided\n        logDebug('Target provided', target);\n        const foundDevice = devicesAndEmulators.find(d => d.udid.includes(target) || d.name.includes(target));\n        if (foundDevice) {\n            if (foundDevice.isActive) {\n                await _runGradleApp(c, platform, foundDevice);\n            } else {\n                await launchAndroidSimulator(c, platform, foundDevice, true);\n                const device = await checkForActiveEmulator(c, platform);\n                await _runGradleApp(c, platform, device);\n            }\n        } else {\n            await askWhereToRun();\n        }\n    } else if (activeDevices.length === 1) {\n        // Only one that is active, running on that one\n        const dv = activeDevices[0];\n        logInfo(`Found device ${dv.name}:${dv.udid}!`);\n        await _runGradleApp(c, platform, dv);\n    } else if (defaultTarget) {\n        // neither a target nor an active device is found, revert to default target if available\n        logDebug('Default target used', defaultTarget);\n        const foundDevice = devicesAndEmulators.find(d => d.udid.includes(defaultTarget) || d.name.includes(defaultTarget));\n        if (!foundDevice) {\n            logDebug('Target not provided, asking where to run');\n            await askWhereToRun();\n        } else {\n            await launchAndroidSimulator(c, platform, foundDevice, true);\n            const device = await checkForActiveEmulator(c, platform);\n            await _runGradleApp(c, platform, device);\n        }\n    } else {\n        // we don't know what to do, ask the user\n        logDebug('Target not provided, asking where to run');\n        await askWhereToRun();\n    }\n};\n\n\nconst _checkSigningCerts = async (c) => {\n    logTask('_checkSigningCerts');\n    const signingConfig = getConfigProp(c, c.platform, 'signingConfig', 'Debug');\n    const isRelease = signingConfig === 'Release';\n    const privateConfig = c.files.workspace.appConfig.configPrivate?.[c.platform];\n\n    if (isRelease && !privateConfig) {\n        logWarning(`You're attempting to ${c.command} app in release mode but you have't configured your ${chalk.white(c.paths.workspace.appConfig.configPrivate)} for ${chalk.white(c.platform)} platform yet.`);\n\n        const { confirm } = await inquirer.prompt({\n            type: 'confirm',\n            name: 'confirm',\n            message: 'Do you want to configure it now?'\n        });\n\n        if (confirm) {\n            let confirmCopy = false;\n            let platCandidate;\n            const { confirmNewKeystore } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'confirmNewKeystore',\n                message: 'Do you want to generate new keystore as well?'\n            });\n\n            if (c.files.workspace.appConfig.configPrivate) {\n                const platCandidates = [ANDROID_WEAR, ANDROID_TV, ANDROID];\n\n                platCandidates.forEach((v) => {\n                    if (c.files.workspace.appConfig.configPrivate[v]) {\n                        platCandidate = v;\n                    }\n                });\n                if (platCandidate) {\n                    const resultCopy = await inquirerPrompt({\n                        type: 'confirm',\n                        name: 'confirmCopy',\n                        message: `Found existing keystore configuration for ${platCandidate}. do you want to reuse it?`\n                    });\n                    confirmCopy = resultCopy.confirmCopy;\n                }\n            }\n\n\n            if (confirmCopy) {\n                c.files.workspace.appConfig.configPrivate[c.platform] = c.files.workspace.appConfig.configPrivate[platCandidate];\n            } else {\n                let storeFile;\n\n                if (!confirmNewKeystore) {\n                    const result = await inquirerPrompt({\n                        type: 'input',\n                        name: 'storeFile',\n                        message: `Paste asolute or relative path to ${chalk.white(c.paths.workspace.appConfig.dir)} of your existing ${chalk.white('release.keystore')} file`,\n                    });\n                    storeFile = result.storeFile;\n                }\n\n                const { storePassword, keyAlias, keyPassword } = await inquirer.prompt([\n                    {\n                        type: 'password',\n                        name: 'storePassword',\n                        message: 'storePassword',\n                    },\n                    {\n                        type: 'input',\n                        name: 'keyAlias',\n                        message: 'keyAlias',\n                    },\n                    {\n                        type: 'password',\n                        name: 'keyPassword',\n                        message: 'keyPassword',\n                    }\n                ]);\n\n\n                if (confirmNewKeystore) {\n                    const keystorePath = `${c.paths.workspace.appConfig.dir}/release.keystore`;\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    const keytoolCmd = `keytool -genkey -v -keystore ${keystorePath} -alias ${keyAlias} -keypass ${keyPassword} -storepass ${storePassword} -keyalg RSA -keysize 2048 -validity 10000`;\n                    await executeAsync(c, keytoolCmd, {\n                        env: process.env,\n                        shell: true,\n                        stdio: 'inherit',\n                        silent: true,\n                    });\n                    storeFile = './release.keystore';\n                }\n\n                if (c.paths.workspace.appConfig.dir) {\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    c.files.workspace.appConfig.configPrivate = {};\n                    c.files.workspace.appConfig.configPrivate[c.platform] = { storeFile, storePassword, keyAlias, keyPassword };\n                }\n            }\n\n\n            updateObjectSync(c.paths.workspace.appConfig.configPrivate, c.files.workspace.appConfig.configPrivate);\n            logSuccess(`Successfully updated private config file at ${chalk.white(c.paths.workspace.appConfig.dir)}.`);\n            await configureProject(c, c.platform);\n        } else {\n            return Promise.reject('You selected no. Can\\'t proceed');\n        }\n    }\n};\n\nconst _runGradleApp = async (c, platform, device) => {\n    logTask(`_runGradleApp:${platform}`);\n\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'Debug');\n    const appFolder = getAppFolder(c, platform);\n    const bundleId = getAppId(c, platform);\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    const outputFolder = signingConfig === 'Debug' ? 'debug' : 'release';\n    const { arch, name } = device;\n    const stacktrace = c.program.info ? ' --debug' : '';\n\n    shell.cd(`${appFolder}`);\n\n    await _checkSigningCerts(c);\n    await executeAsync(c, `${isSystemWin ? 'gradlew.bat' : './gradlew'} ${outputAab ? 'bundle' : 'assemble'}${signingConfig}${stacktrace} -x bundleReleaseJsAndAssets`);\n    if (outputAab) {\n        const aabPath = path.join(appFolder, `app/build/outputs/bundle/${outputFolder}/app.aab`);\n        logInfo(`App built. Path ${aabPath}`);\n        return true;\n    }\n    let apkPath = path.join(appFolder, `app/build/outputs/apk/${outputFolder}/app-${outputFolder}.apk`);\n    if (!fs.existsSync(apkPath)) {\n        apkPath = path.join(appFolder, `app/build/outputs/apk/${outputFolder}/app-${outputFolder}-unsigned.apk`);\n    } if (!fs.existsSync(apkPath)) {\n        apkPath = path.join(appFolder, `app/build/outputs/apk/${outputFolder}/app-${arch}-${outputFolder}.apk`);\n    }\n    logInfo(`Installing ${apkPath} on ${name}`);\n    try {\n        await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} install -r -d -f ${apkPath}`);\n    } catch (e) {\n        if (e?.includes('INSTALL_FAILED') || e?.message?.includes('INSTALL_FAILED')) {\n            const { confirm } = await inquirerPrompt({\n                type: 'confirm',\n                message: 'It seems you already have the app installed but RNV can\\'t update it. Uninstall that one and try again?'\n            });\n\n            if (!confirm) throw new Error('User canceled');\n            await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} uninstall ${bundleId}`);\n            await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} install -r -d -f ${apkPath}`);\n        } else {\n            throw new Error(e);\n        }\n    }\n\n    if (!outputAab) await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} shell am start -n ${bundleId}/.MainActivity`);\n};\n\nexport const buildAndroid = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`buildAndroid:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'Debug');\n\n    shell.cd(`${appFolder}`);\n\n    _checkSigningCerts(c)\n        .then(() => executeAsync(c, `${isSystemWin ? 'gradlew.bat' : './gradlew'} assemble${signingConfig} -x bundleReleaseJsAndAssets`))\n        .then(() => {\n            logSuccess(`Your APK is located in ${chalk.white(path.join(appFolder, `app/build/outputs/apk/${signingConfig.toLowerCase()}`))} .`);\n            resolve();\n        }).catch(e => reject(e));\n});\n\nexport const configureAndroidProperties = (c, platform) => new Promise((resolve) => {\n    logTask(`configureAndroidProperties:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    const addNDK = c.files.workspace.config.sdks.ANDROID_NDK && !c.files.workspace.config.sdks.ANDROID_NDK.includes('<USER>');\n    const ndkString = `ndk.dir=${getRealPath(c, c.files.workspace.config.sdks.ANDROID_NDK)}`;\n    let sdkDir = getRealPath(c, c.files.workspace.config.sdks.ANDROID_SDK);\n\n    if (isSystemWin) {\n        sdkDir = sdkDir.replace(/\\\\/g, '/');\n    }\n\n    fs.writeFileSync(\n        path.join(appFolder, 'local.properties'),\n        `#Generated by ReNative (https://renative.org)\n${addNDK ? ndkString : ''}\nsdk.dir=${sdkDir}`,\n    );\n\n    resolve();\n});\n\nexport const configureGradleProject = async (c) => {\n    const { platform } = c;\n    logTask(`configureGradleProject:${platform}`);\n\n    if (!isPlatformActive(c, platform)) return;\n\n    await copyAssetsFolder(c, platform);\n    await configureAndroidProperties(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\n\nexport const configureProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`configureProject:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    const appTemplateFolder = getAppTemplateFolder(c, platform);\n\n    const gradlew = path.join(appFolder, 'gradlew');\n\n    if (!fs.existsSync(gradlew)) {\n        logWarning(`Looks like your ${chalk.white(platform)} platformBuild is misconfigured!. let's repair it.`);\n        createPlatformBuild(c, platform)\n            .then(() => configureGradleProject(c, platform))\n            .then(() => resolve(c))\n            .catch(e => reject(e));\n        return;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    mkdirSync(path.join(appFolder, 'app/src/main/assets'));\n    fs.writeFileSync(path.join(appFolder, `app/src/main/assets/${outputFile}.bundle`), '{}');\n    fs.chmodSync(gradlew, '755');\n\n    // INJECTORS\n    c.pluginConfigAndroid = {\n        pluginIncludes: \"include ':app'\",\n        pluginPaths: '',\n        pluginImports: '',\n        pluginPackages: 'MainReactPackage(),\\n',\n        pluginActivityImports: '',\n        pluginActivityMethods: '',\n        pluginApplicationImports: '',\n        pluginApplicationMethods: '',\n        pluginApplicationCreateMethods: '',\n        pluginApplicationDebugServer: '',\n        applyPlugin: '',\n        defaultConfig: '',\n        pluginActivityCreateMethods: '',\n        pluginActivityResultMethods: '',\n        pluginSplashActivityImports: '',\n        manifestApplication: '',\n        buildGradleAllProjectsRepositories: '',\n        buildGradleBuildScriptRepositories: '',\n        buildGradleBuildScriptDependencies: '',\n        buildGradleBuildScriptDexOptions: '',\n        appBuildGradleSigningConfigs: '',\n        appBuildGradleImplementations: '',\n        resourceStrings: [],\n        appBuildGradleAfterEvaluate: '',\n    };\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginGradleSync(c, pluginPlat, key, pluginPlat.package);\n        injectPluginKotlinSync(c, pluginPlat, key, pluginPlat.package);\n        injectPluginManifestSync(c, pluginPlat, key, pluginPlat.package);\n        injectPluginXmlValuesSync(c, pluginPlat, key, pluginPlat.package);\n    });\n\n    c.pluginConfigAndroid.pluginPackages = c.pluginConfigAndroid.pluginPackages.substring(0, c.pluginConfigAndroid.pluginPackages.length - 2);\n\n    // FONTS\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const { includedFonts } = c.buildConfig.common;\n            if (includedFonts) {\n                if (includedFonts.includes('*') || includedFonts.includes(key)) {\n                    if (font) {\n                        const fontSource = path.join(dir, font);\n                        if (fs.existsSync(fontSource)) {\n                            const fontFolder = path.join(appFolder, 'app/src/main/assets/fonts');\n                            mkdirSync(fontFolder);\n                            const fontDest = path.join(fontFolder, font);\n                            copyFileSync(fontSource, fontDest);\n                        } else {\n                            logWarning(`Font ${chalk.white(fontSource)} doesn't exist! Skipping.`);\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    parseSettingsGradleSync(c, platform);\n    parseAppBuildGradleSync(c, platform);\n    parseBuildGradleSync(c, platform);\n    parseMainActivitySync(c, platform);\n    parseMainApplicationSync(c, platform);\n    parseSplashActivitySync(c, platform);\n    parseValuesStringsSync(c, platform);\n    parseValuesColorsSync(c, platform);\n    parseAndroidManifestSync(c, platform);\n    parseGradlePropertiesSync(c, platform);\n\n    resolve();\n});\n\n// Resolve or reject will not be called so this will keep running\nexport const runAndroidLog = async (c) => {\n    logTask('runAndroidLog');\n    const filter = c.program.filter || '';\n    const child = execa.command(`${c.cli[CLI_ANDROID_ADB]} logcat`);\n    // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString().split('\\n');\n        d.forEach((v) => {\n            if (v.includes(' E ') && v.includes(filter)) {\n                console.log(chalk.red(v));\n            } else if (v.includes(' W ') && v.includes(filter)) {\n                console.log(chalk.yellow(v));\n            } else if (v.includes(filter)) {\n                console.log(v);\n            }\n        });\n    });\n    return child.then(res => res.stdout).catch(err => Promise.reject(`Error: ${err}`));\n};\n"],"mappings":"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"}