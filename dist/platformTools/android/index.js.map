{"version":3,"sources":["../../../src/platformTools/android/index.js"],"names":["_getEntryOutputName","c","entryFile","buildConfig","platforms","platform","outputFile","ANDROID_WEAR","packageAndroid","Promise","resolve","reject","bundleAssets","appFolder","reactNative","isSystemWin","path","normalize","process","cwd","console","log","then","catch","e","runAndroid","defaultTarget","target","program","outputAab","_runGradleApp","net","isIP","device","undefined","devicesAndEmulators","activeDevices","filter","d","isActive","inactiveDevices","askWhereToRun","length","devicesString","choices","inquirer","prompt","name","type","message","response","chosenEmulator","devices","dev","find","foundDevice","udid","includes","dv","_checkSigningCerts","signingConfig","isRelease","privateConfig","files","workspace","appConfig","configPrivate","command","chalk","white","paths","confirm","confirmCopy","confirmNewKeystore","platCandidates","ANDROID_TV","ANDROID","forEach","v","platCandidate","resultCopy","dir","result","storeFile","storePassword","keyAlias","keyPassword","keystorePath","keytoolCmd","env","shell","stdio","silent","configureProject","bundleId","outputFolder","arch","stacktrace","info","cd","aabPath","join","apkPath","fs","existsSync","CLI_ANDROID_ADB","Error","buildAndroid","toLowerCase","configureAndroidProperties","addNDK","config","sdks","ANDROID_NDK","ndkString","sdkDir","ANDROID_SDK","replace","writeFileSync","configureGradleProject","appTemplateFolder","gradlew","chmodSync","pluginConfigAndroid","pluginIncludes","pluginPaths","pluginImports","pluginPackages","pluginActivityImports","pluginActivityMethods","pluginApplicationImports","pluginApplicationMethods","pluginApplicationCreateMethods","pluginApplicationDebugServer","applyPlugin","defaultConfig","pluginActivityCreateMethods","pluginActivityResultMethods","pluginSplashActivityImports","manifestApplication","buildGradleAllProjectsRepositories","buildGradleBuildScriptRepositories","buildGradleBuildScriptDependencies","buildGradleBuildScriptDexOptions","appBuildGradleSigningConfigs","appBuildGradleImplementations","resourceStrings","appBuildGradleAfterEvaluate","plugin","pluginPlat","key","package","substring","font","split","includedFonts","common","fontSource","fontFolder","fontDest","runAndroidLog","child","execa","cli","stdout","on","data","toString","red","yellow","res","err"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular\nimport path from 'path';\nimport fs from 'fs';\nimport net from 'net';\nimport chalk from 'chalk';\nimport shell from 'shelljs';\nimport inquirer from 'inquirer';\nimport execa from 'execa';\n\nimport { executeAsync, execCLI } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getAppTemplateFolder,\n    getConfigProp,\n    getAppId\n} from '../../common';\nimport { isPlatformActive, createPlatformBuild } from '..';\nimport { isSystemWin } from '../../utils';\nimport { inquirerPrompt } from '../../systemTools/prompt';\nimport { logTask, logWarning, logDebug, logInfo, logSuccess } from '../../systemTools/logger';\nimport { copyFileSync, mkdirSync, getRealPath, updateObjectSync } from '../../systemTools/fileutils';\nimport { copyAssetsFolder, copyBuildsFolder, parseFonts } from '../../projectTools/projectParser';\nimport { ANDROID_WEAR, ANDROID, ANDROID_TV, CLI_ANDROID_ADB } from '../../constants';\nimport { parsePlugins } from '../../pluginTools';\nimport { parseAndroidManifestSync, injectPluginManifestSync } from './manifestParser';\nimport { parseMainActivitySync, parseSplashActivitySync, parseMainApplicationSync, injectPluginKotlinSync } from './kotlinParser';\nimport {\n    parseAppBuildGradleSync, parseBuildGradleSync, parseSettingsGradleSync,\n    parseGradlePropertiesSync, injectPluginGradleSync\n} from './gradleParser';\nimport { parseValuesStringsSync, injectPluginXmlValuesSync, parseValuesColorsSync } from './xmlValuesParser';\nimport { resetAdb, getAndroidTargets, composeDevicesString, launchAndroidSimulator, checkForActiveEmulator, askForNewEmulator, connectToWifiDevice } from './deviceManager';\n\nconst _getEntryOutputName = (c) => {\n    // CRAPPY BUT Android Wear does not support webview required for connecting to packager. this is hack to prevent RN connectiing to running bundler\n    const { entryFile } = c.buildConfig.platforms[c.platform];\n    // TODO Android PROD Crashes if not using this hardcoded one\n    let outputFile;\n    if (c.platform === ANDROID_WEAR) {\n        outputFile = entryFile;\n    } else {\n        outputFile = 'index.android';\n    }\n    return outputFile;\n};\n\nexport const packageAndroid = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`packageAndroid:${platform}`);\n\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets', false) === true;\n\n    if (!bundleAssets && platform !== ANDROID_WEAR) {\n        resolve();\n        return;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    const appFolder = getAppFolder(c, platform);\n    let reactNative = 'react-native';\n\n    if (isSystemWin) {\n        reactNative = path.normalize(`${process.cwd()}/node_modules/.bin/react-native.cmd`);\n    }\n\n    console.log('ANDROID PACKAGE STARTING................');\n    executeAsync(c, `${reactNative} bundle --platform android --dev false --assets-dest ${appFolder}/app/src/main/res --entry-file ${c.buildConfig.platforms[c.platform]?.entryFile}.js --bundle-output ${appFolder}/app/src/main/assets/${outputFile}.bundle --sourcemap-output ${appFolder}/app/src/main/assets/${outputFile}.bundle.map`)\n        .then(() => {\n            console.log('ANDROID PACKAGE FINISHED');\n            return resolve();\n        })\n        .catch((e) => {\n            console.log('ANDROID PACKAGE FAILED');\n            return reject(e);\n        });\n});\n\n\nexport const runAndroid = async (c, platform, defaultTarget) => {\n    const { target } = c.program;\n    logTask(`runAndroid:${platform}:${target}:${defaultTarget}`);\n\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    // shortcircuit devices logic since aabs can't be installed on a device\n    if (outputAab) return _runGradleApp(c, platform, {});\n\n    await resetAdb(c);\n\n    if (target && net.isIP(target)) {\n        await connectToWifiDevice(c, target);\n    }\n\n    let devicesAndEmulators;\n    try {\n        devicesAndEmulators = await getAndroidTargets(c, false, false, c.program.device !== undefined);\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    const activeDevices = devicesAndEmulators.filter(d => d.isActive);\n    const inactiveDevices = devicesAndEmulators.filter(d => !d.isActive);\n\n    const askWhereToRun = async () => {\n        if (activeDevices.length === 0 && inactiveDevices.length > 0) {\n        // No device active, but there are emulators created\n            const devicesString = composeDevicesString(inactiveDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([{\n                name: 'chosenEmulator',\n                type: 'list',\n                message: 'What emulator would you like to start?',\n                choices\n            }]);\n            if (response.chosenEmulator) {\n                await launchAndroidSimulator(c, platform, response.chosenEmulator, true);\n                const devices = await checkForActiveEmulator(c, platform);\n                await _runGradleApp(c, platform, devices);\n            }\n        } else if (activeDevices.length > 1) {\n            const devicesString = composeDevicesString(activeDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([{\n                name: 'chosenEmulator',\n                type: 'list',\n                message: 'Where would you like to run your app?',\n                choices\n            }]);\n            if (response.chosenEmulator) {\n                const dev = activeDevices.find(d => d.name === response.chosenEmulator);\n                await _runGradleApp(c, platform, dev);\n            }\n        } else {\n            await askForNewEmulator(c, platform);\n            const devices = await checkForActiveEmulator(c, platform);\n            await _runGradleApp(c, platform, devices);\n        }\n    };\n\n    if (target) {\n        // a target is provided\n        logDebug('Target provided', target);\n        const foundDevice = devicesAndEmulators.find(d => d.udid.includes(target) || d.name.includes(target));\n        if (foundDevice) {\n            if (foundDevice.isActive) {\n                await _runGradleApp(c, platform, foundDevice);\n            } else {\n                await launchAndroidSimulator(c, platform, foundDevice, true);\n                const device = await checkForActiveEmulator(c, platform);\n                await _runGradleApp(c, platform, device);\n            }\n        } else {\n            await askWhereToRun();\n        }\n    } else if (activeDevices.length === 1) {\n        // Only one that is active, running on that one\n        const dv = activeDevices[0];\n        logInfo(`Found device ${dv.name}:${dv.udid}!`);\n        await _runGradleApp(c, platform, dv);\n    } else if (defaultTarget) {\n        // neither a target nor an active device is found, revert to default target if available\n        logDebug('Default target used', defaultTarget);\n        const foundDevice = devicesAndEmulators.find(d => d.udid.includes(defaultTarget) || d.name.includes(defaultTarget));\n        if (!foundDevice) {\n            logDebug('Target not provided, asking where to run');\n            await askWhereToRun();\n        } else {\n            await launchAndroidSimulator(c, platform, foundDevice, true);\n            const device = await checkForActiveEmulator(c, platform);\n            await _runGradleApp(c, platform, device);\n        }\n    } else {\n        // we don't know what to do, ask the user\n        logDebug('Target not provided, asking where to run');\n        await askWhereToRun();\n    }\n};\n\n\nconst _checkSigningCerts = async (c) => {\n    logTask('_checkSigningCerts');\n    const signingConfig = getConfigProp(c, c.platform, 'signingConfig', 'Debug');\n    const isRelease = signingConfig === 'Release';\n    const privateConfig = c.files.workspace.appConfig.configPrivate?.[c.platform];\n\n    if (isRelease && !privateConfig) {\n        logWarning(`You're attempting to ${c.command} app in release mode but you have't configured your ${chalk.white(c.paths.workspace.appConfig.configPrivate)} for ${chalk.white(c.platform)} platform yet.`);\n\n        const { confirm } = await inquirer.prompt({\n            type: 'confirm',\n            name: 'confirm',\n            message: 'Do you want to configure it now?'\n        });\n\n        if (confirm) {\n            let confirmCopy = false;\n            let platCandidate;\n            const { confirmNewKeystore } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'confirmNewKeystore',\n                message: 'Do you want to generate new keystore as well?'\n            });\n\n            if (c.files.workspace.appConfig.configPrivate) {\n                const platCandidates = [ANDROID_WEAR, ANDROID_TV, ANDROID];\n\n                platCandidates.forEach((v) => {\n                    if (c.files.workspace.appConfig.configPrivate[v]) {\n                        platCandidate = v;\n                    }\n                });\n                if (platCandidate) {\n                    const resultCopy = await inquirerPrompt({\n                        type: 'confirm',\n                        name: 'confirmCopy',\n                        message: `Found existing keystore configuration for ${platCandidate}. do you want to reuse it?`\n                    });\n                    confirmCopy = resultCopy.confirmCopy;\n                }\n            }\n\n\n            if (confirmCopy) {\n                c.files.workspace.appConfig.configPrivate[c.platform] = c.files.workspace.appConfig.configPrivate[platCandidate];\n            } else {\n                let storeFile;\n\n                if (!confirmNewKeystore) {\n                    const result = await inquirerPrompt({\n                        type: 'input',\n                        name: 'storeFile',\n                        message: `Paste asolute or relative path to ${chalk.white(c.paths.workspace.appConfig.dir)} of your existing ${chalk.white('release.keystore')} file`,\n                    });\n                    storeFile = result.storeFile;\n                }\n\n                const { storePassword, keyAlias, keyPassword } = await inquirer.prompt([\n                    {\n                        type: 'password',\n                        name: 'storePassword',\n                        message: 'storePassword',\n                    },\n                    {\n                        type: 'input',\n                        name: 'keyAlias',\n                        message: 'keyAlias',\n                    },\n                    {\n                        type: 'password',\n                        name: 'keyPassword',\n                        message: 'keyPassword',\n                    }\n                ]);\n\n\n                if (confirmNewKeystore) {\n                    const keystorePath = `${c.paths.workspace.appConfig.dir}/release.keystore`;\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    const keytoolCmd = `keytool -genkey -v -keystore ${keystorePath} -alias ${keyAlias} -keypass ${keyPassword} -storepass ${storePassword} -keyalg RSA -keysize 2048 -validity 10000`;\n                    await executeAsync(c, keytoolCmd, {\n                        env: process.env,\n                        shell: true,\n                        stdio: 'inherit',\n                        silent: true,\n                    });\n                    storeFile = './release.keystore';\n                }\n\n                if (c.paths.workspace.appConfig.dir) {\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    c.files.workspace.appConfig.configPrivate = {};\n                    c.files.workspace.appConfig.configPrivate[c.platform] = { storeFile, storePassword, keyAlias, keyPassword };\n                }\n            }\n\n\n            updateObjectSync(c.paths.workspace.appConfig.configPrivate, c.files.workspace.appConfig.configPrivate);\n            logSuccess(`Successfully updated private config file at ${chalk.white(c.paths.workspace.appConfig.dir)}.`);\n            await configureProject(c, c.platform);\n        } else {\n            return Promise.reject('You selected no. Can\\'t proceed');\n        }\n    }\n};\n\nconst _runGradleApp = async (c, platform, device) => {\n    logTask(`_runGradleApp:${platform}`);\n\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'Debug');\n    const appFolder = getAppFolder(c, platform);\n    const bundleId = getAppId(c, platform);\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    const outputFolder = signingConfig === 'Debug' ? 'debug' : 'release';\n    const { arch, name } = device;\n    const stacktrace = c.program.info ? ' --debug' : '';\n\n    shell.cd(`${appFolder}`);\n\n    await _checkSigningCerts(c);\n    await executeAsync(c, `${isSystemWin ? 'gradlew.bat' : './gradlew'} ${outputAab ? 'bundle' : 'assemble'}${signingConfig}${stacktrace} -x bundleReleaseJsAndAssets`);\n    if (outputAab) {\n        const aabPath = path.join(appFolder, `app/build/outputs/bundle/${outputFolder}/app.aab`);\n        logInfo(`App built. Path ${aabPath}`);\n        return true;\n    }\n    let apkPath = path.join(appFolder, `app/build/outputs/apk/${outputFolder}/app-${outputFolder}.apk`);\n    if (!fs.existsSync(apkPath)) {\n        apkPath = path.join(appFolder, `app/build/outputs/apk/${outputFolder}/app-${outputFolder}-unsigned.apk`);\n    } if (!fs.existsSync(apkPath)) {\n        apkPath = path.join(appFolder, `app/build/outputs/apk/${outputFolder}/app-${arch}-${outputFolder}.apk`);\n    }\n    logInfo(`Installing ${apkPath} on ${name}`);\n    try {\n        await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} install -r -d -f ${apkPath}`);\n    } catch (e) {\n        if (e?.includes('INSTALL_FAILED') || e?.message?.includes('INSTALL_FAILED')) {\n            const { confirm } = await inquirerPrompt({\n                type: 'confirm',\n                message: 'It seems you already have the app installed but RNV can\\'t update it. Uninstall that one and try again?'\n            });\n\n            if (!confirm) throw new Error('User canceled');\n            await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} uninstall ${bundleId}`);\n            await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} install -r -d -f ${apkPath}`);\n        } else {\n            throw new Error(e);\n        }\n    }\n\n    if (!outputAab) await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} shell am start -n ${bundleId}/.MainActivity`);\n};\n\nexport const buildAndroid = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`buildAndroid:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'Debug');\n\n    shell.cd(`${appFolder}`);\n\n    _checkSigningCerts(c)\n        .then(() => executeAsync(c, `${isSystemWin ? 'gradlew.bat' : './gradlew'} assemble${signingConfig} -x bundleReleaseJsAndAssets`))\n        .then(() => {\n            logSuccess(`Your APK is located in ${chalk.white(path.join(appFolder, `app/build/outputs/apk/${signingConfig.toLowerCase()}`))} .`);\n            resolve();\n        }).catch(e => reject(e));\n});\n\nexport const configureAndroidProperties = (c, platform) => new Promise((resolve) => {\n    logTask(`configureAndroidProperties:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    const addNDK = c.files.workspace.config.sdks.ANDROID_NDK && !c.files.workspace.config.sdks.ANDROID_NDK.includes('<USER>');\n    const ndkString = `ndk.dir=${getRealPath(c, c.files.workspace.config.sdks.ANDROID_NDK)}`;\n    let sdkDir = getRealPath(c, c.files.workspace.config.sdks.ANDROID_SDK);\n\n    if (isSystemWin) {\n        sdkDir = sdkDir.replace(/\\\\/g, '/');\n    }\n\n    fs.writeFileSync(\n        path.join(appFolder, 'local.properties'),\n        `#Generated by ReNative (https://renative.org)\n${addNDK ? ndkString : ''}\nsdk.dir=${sdkDir}`,\n    );\n\n    resolve();\n});\n\nexport const configureGradleProject = async (c) => {\n    const { platform } = c;\n    logTask(`configureGradleProject:${platform}`);\n\n    if (!isPlatformActive(c, platform)) return;\n\n    await copyAssetsFolder(c, platform);\n    await configureAndroidProperties(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\n\nexport const configureProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`configureProject:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    const appTemplateFolder = getAppTemplateFolder(c, platform);\n\n    const gradlew = path.join(appFolder, 'gradlew');\n\n    if (!fs.existsSync(gradlew)) {\n        logWarning(`Looks like your ${chalk.white(platform)} platformBuild is misconfigured!. let's repair it.`);\n        createPlatformBuild(c, platform)\n            .then(() => configureGradleProject(c, platform))\n            .then(() => resolve(c))\n            .catch(e => reject(e));\n        return;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    mkdirSync(path.join(appFolder, 'app/src/main/assets'));\n    fs.writeFileSync(path.join(appFolder, `app/src/main/assets/${outputFile}.bundle`), '{}');\n    fs.chmodSync(gradlew, '755');\n\n    // INJECTORS\n    c.pluginConfigAndroid = {\n        pluginIncludes: \"include ':app'\",\n        pluginPaths: '',\n        pluginImports: '',\n        pluginPackages: 'MainReactPackage(),\\n',\n        pluginActivityImports: '',\n        pluginActivityMethods: '',\n        pluginApplicationImports: '',\n        pluginApplicationMethods: '',\n        pluginApplicationCreateMethods: '',\n        pluginApplicationDebugServer: '',\n        applyPlugin: '',\n        defaultConfig: '',\n        pluginActivityCreateMethods: '',\n        pluginActivityResultMethods: '',\n        pluginSplashActivityImports: '',\n        manifestApplication: '',\n        buildGradleAllProjectsRepositories: '',\n        buildGradleBuildScriptRepositories: '',\n        buildGradleBuildScriptDependencies: '',\n        buildGradleBuildScriptDexOptions: '',\n        appBuildGradleSigningConfigs: '',\n        appBuildGradleImplementations: '',\n        resourceStrings: [],\n        appBuildGradleAfterEvaluate: '',\n    };\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginGradleSync(c, pluginPlat, key, pluginPlat.package);\n        injectPluginKotlinSync(c, pluginPlat, key, pluginPlat.package);\n        injectPluginManifestSync(c, pluginPlat, key, pluginPlat.package);\n        injectPluginXmlValuesSync(c, pluginPlat, key, pluginPlat.package);\n    });\n\n    c.pluginConfigAndroid.pluginPackages = c.pluginConfigAndroid.pluginPackages.substring(0, c.pluginConfigAndroid.pluginPackages.length - 2);\n\n    // FONTS\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const { includedFonts } = c.buildConfig.common;\n            if (includedFonts) {\n                if (includedFonts.includes('*') || includedFonts.includes(key)) {\n                    if (font) {\n                        const fontSource = path.join(dir, font);\n                        if (fs.existsSync(fontSource)) {\n                            const fontFolder = path.join(appFolder, 'app/src/main/assets/fonts');\n                            mkdirSync(fontFolder);\n                            const fontDest = path.join(fontFolder, font);\n                            copyFileSync(fontSource, fontDest);\n                        } else {\n                            logWarning(`Font ${chalk.white(fontSource)} doesn't exist! Skipping.`);\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    parseSettingsGradleSync(c, platform);\n    parseAppBuildGradleSync(c, platform);\n    parseBuildGradleSync(c, platform);\n    parseMainActivitySync(c, platform);\n    parseMainApplicationSync(c, platform);\n    parseSplashActivitySync(c, platform);\n    parseValuesStringsSync(c, platform);\n    parseValuesColorsSync(c, platform);\n    parseAndroidManifestSync(c, platform);\n    parseGradlePropertiesSync(c, platform);\n\n    resolve();\n});\n\n// Resolve or reject will not be called so this will keep running\nexport const runAndroidLog = async (c) => {\n    logTask('runAndroidLog');\n    const filter = c.program.filter || '';\n    const child = execa.command(`${c.cli[CLI_ANDROID_ADB]} logcat`);\n    // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString().split('\\n');\n        d.forEach((v) => {\n            if (v.includes(' E ') && v.includes(filter)) {\n                console.log(chalk.red(v));\n            } else if (v.includes(' W ') && v.includes(filter)) {\n                console.log(chalk.yellow(v));\n            } else if (v.includes(filter)) {\n                console.log(v);\n            }\n        });\n    });\n    return child.then(res => res.stdout).catch(err => Promise.reject(`Error: ${err}`));\n};\n"],"file":"index.js"}