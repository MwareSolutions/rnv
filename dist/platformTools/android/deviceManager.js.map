{"version":3,"sources":["../../../src/platformTools/android/deviceManager.js"],"names":["CHECK_INTEVAL","currentDeviceProps","composeDevicesString","devices","returnArray","length","devicesArray","forEach","v","i","push","_getDeviceString","join","launchAndroidSimulator","c","platform","target","isIndependentThread","actualTarget","name","CLI_ANDROID_EMULATOR","detached","catch","err","includes","Promise","resolve","reject","listAndroidTargets","device","program","resetAdb","getAndroidTargets","list","trim","isTV","isTablet","udid","isDevice","isActive","avdConfig","isWear","arch","deviceIcon","deviceString","chalk","white","grey","red","magenta","key","value","icon","ranBefore","CLI_ANDROID_ADB","setTimeout","skipDevices","skipAvds","deviceOnly","devicesResult","avdResult","_parseDevicesResult","calculateDeviceDiagonal","width","height","density","widthInches","heightInches","Math","sqrt","getRunningDeviceProp","prop","rawProps","reg","lines","match","line","words","split","slice","decideIfTVRunning","model","product","mod","flavor","clientIdBase","description","hdmi","modelGroup","configuration","cecEnabled","string","toLowerCase","decideIfWearRunning","fingerprint","getDeviceType","isNotEligibleAndroid","screenSizeResult","screenDensityResult","screenProps","parseInt","diagonalInches","IS_TABLET_ABOVE_INCH","isPhone","isMobile","sysdir","tagId","tagDisplay","deviceName","avdId","AvdId","skin","image","getAvdDetails","process","env","ANDROID_SDK_HOME","ANDROID_AVD_HOME","avdConfigPaths","os","homedir","results","cPath","fs","existsSync","filesPath","readdirSync","fName","fPath","path","dirent","lstatSync","isDirectory","avdData","readFileSync","toString","initData","initLines","initLine","iniKey","iniValue","getEmulatorName","emulator","port","emulatorReply","emulatorReplyArray","emulatorName","connectToWifiDevice","ip","deviceResponse","devicesString","avdsString","skipTargetCheck","all","map","filter","w","_getDeviceProp","waitForEmulatorToBeReady","avdLines","avdDetails","e","findProcess","isSystemWin","child_process","execSync","then","matches","ANDROID","ANDROID_WEAR","ANDROID_TV","arr","replace","askForNewEmulator","emuName","files","workspace","config","defaultTargets","inquirer","prompt","type","message","confirm","_createEmulator","apiVersion","emuPlatform","CLI_ANDROID_SDKMANAGER","CLI_ANDROID_AVDMANAGER","res","checkForActiveEmulator","attempts","maxAttempts","running","poll","setInterval","clearInterval","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular\nimport path from 'path';\nimport os from 'os';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport inquirer from 'inquirer';\n\nimport { execCLI, executeTelnet } from '../../systemTools/exec';\nimport { waitForEmulator } from '../../common';\nimport { isSystemWin } from '../../utils';\nimport { logToSummary, logTask,\n    logError, logWarning,\n    logDebug, logSuccess } from '../../systemTools/logger';\nimport { IS_TABLET_ABOVE_INCH, ANDROID_WEAR, ANDROID, ANDROID_TV, CLI_ANDROID_EMULATOR, CLI_ANDROID_ADB, CLI_ANDROID_AVDMANAGER, CLI_ANDROID_SDKMANAGER } from '../../constants';\n\nconst CHECK_INTEVAL = 5000;\n\nconst currentDeviceProps = {};\n\nexport const composeDevicesString = (devices, returnArray) => {\n    logTask(`composeDevicesString:${devices ? devices.length : null}`);\n    const devicesArray = [];\n    devices.forEach((v, i) => devicesArray.push(_getDeviceString(v, !returnArray ? i : null)));\n    if (returnArray) return devicesArray;\n    return `\\n${devicesArray.join('')}`;\n};\n\nexport const launchAndroidSimulator = (c, platform, target, isIndependentThread = false) => {\n    logTask(`launchAndroidSimulator:${platform}:${target}:${isIndependentThread}`);\n\n    if (target) {\n        const actualTarget = target.name || target;\n        if (isIndependentThread) {\n            execCLI(c, CLI_ANDROID_EMULATOR, `-avd \"${actualTarget}\"`, { detached: isIndependentThread }).catch((err) => {\n                if (err.includes && err.includes('WHPX')) {\n                    logWarning(err);\n                    return logError('It seems you do not have the Windows Hypervisor Platform virtualization enabled. Enter windows features in the Windows search box and select Turn Windows features on or off in the search results. In the Windows Features dialog, enable both Hyper-V and Windows Hypervisor Platform.', true);\n                }\n                logError(err);\n            });\n            return Promise.resolve();\n        }\n        return execCLI(c, CLI_ANDROID_EMULATOR, `-avd \"${actualTarget}\"`, { detached: isIndependentThread });\n    }\n    return Promise.reject('No simulator -t target name specified!');\n};\n\nexport const listAndroidTargets = async (c) => {\n    logTask('listAndroidTargets');\n    const { program: { device } } = c;\n\n    await resetAdb(c);\n    const list = await getAndroidTargets(c, false, device, device);\n    const devices = await composeDevicesString(list);\n    logToSummary(`Android Targets:\\n${devices}`);\n    if (devices.trim() === '') logToSummary('Android Targets: No devices found');\n    return devices;\n};\n\nconst _getDeviceString = (device, i) => {\n    const {\n        isTV, isTablet, name, udid, isDevice, isActive, avdConfig, isWear, arch\n    } = device;\n    let deviceIcon = '';\n    if (isTablet) deviceIcon = 'Tablet 💊 ';\n    if (isTV) deviceIcon = 'TV 📺 ';\n    if (isWear) deviceIcon = 'Wear ⌚ ';\n    if (!deviceIcon && (udid !== 'unknown' || avdConfig)) deviceIcon = 'Phone 📱 ';\n\n    const deviceString = `${chalk.white(name)} | ${deviceIcon} | arch: ${arch} | udid: ${chalk.grey(udid)}${isDevice ? chalk.red(' (device)') : ''} ${\n        isActive ? chalk.magenta(' (active)') : ''}`;\n\n    if (i === null) return { key: name, name: deviceString, value: name, icon: deviceIcon };\n\n    return ` [${i + 1}]> ${deviceString}\\n`;\n};\n\nexport const resetAdb = async (c, ranBefore) => {\n    try {\n        if (!ranBefore) await execCLI(c, CLI_ANDROID_ADB, 'kill-server');\n    } catch (e) {\n        logWarning(e);\n    }\n    try {\n        await execCLI(c, CLI_ANDROID_ADB, 'start-server');\n    } catch (e) {\n        if (ranBefore) {\n            return Promise.reject(e);\n        }\n        logWarning(`Got error:\\n${e}\\nWill attemnt again in 5 seconds`);\n        setTimeout(resetAdb, 5000, c, true);\n    }\n};\n\nexport const getAndroidTargets = async (c, skipDevices, skipAvds, deviceOnly = false) => {\n    logTask(`getAndroidTargets:${c.platform}:${skipDevices}:${skipAvds}:${deviceOnly}`);\n\n    try {\n        let devicesResult;\n        let avdResult;\n\n        if (!skipDevices) {\n            devicesResult = await execCLI(c, CLI_ANDROID_ADB, 'devices -l');\n        }\n        if (!skipAvds) {\n            avdResult = await execCLI(c, CLI_ANDROID_EMULATOR, '-list-avds');\n        }\n        return _parseDevicesResult(c, devicesResult, avdResult, deviceOnly);\n    } catch (e) {\n        return Promise.reject(e);\n    }\n};\n\nconst calculateDeviceDiagonal = (width, height, density) => {\n    // Calculate the diagonal in inches\n    const widthInches = width / density;\n    const heightInches = height / density;\n    return Math.sqrt(widthInches * widthInches + heightInches * heightInches);\n};\n\nconst getRunningDeviceProp = async (c, udid, prop) => {\n    // avoid multiple calls to the same device\n    if (currentDeviceProps[udid]) {\n        if (!prop) return currentDeviceProps[udid];\n        return currentDeviceProps[udid][prop];\n    }\n    const rawProps = await execCLI(c, CLI_ANDROID_ADB, `-s ${udid} shell getprop`);\n    const reg = /\\[.+\\]: \\[.*\\n?[^\\[]*\\]/gm;\n    const lines = rawProps.match(reg);\n\n    lines.forEach((line) => {\n        const words = line.split(']: [');\n        const key = words[0].slice(1);\n        const value = words[1].slice(0, words[1].length - 1);\n\n        if (!currentDeviceProps[udid]) currentDeviceProps[udid] = {};\n        currentDeviceProps[udid][key] = value;\n    });\n\n    return getRunningDeviceProp(c, udid, prop);\n};\n\nconst decideIfTVRunning = async (c, device) => {\n    const { udid, model, product } = device;\n    const mod = await getRunningDeviceProp(c, udid, 'ro.product.model');\n    const name = await getRunningDeviceProp(c, udid, 'ro.product.name');\n    const flavor = await getRunningDeviceProp(c, udid, 'ro.build.flavor');\n    const clientIdBase = await getRunningDeviceProp(c, udid, 'ro.com.google.clientidbase');\n    const description = await getRunningDeviceProp(c, udid, 'ro.build.description');\n    const hdmi = await getRunningDeviceProp(c, udid, 'init.svc.hdmi');\n    const modelGroup = await getRunningDeviceProp(c, udid, 'ro.nrdp.modelgroup');\n    const configuration = await getRunningDeviceProp(c, udid, 'ro.build.configuration');\n    const cecEnabled = await getRunningDeviceProp(c, udid, 'persist.sys.cec.enabled');\n\n    let isTV = false;\n    [mod, name, flavor, clientIdBase, description, model, product].forEach((string) => {\n        if (string && string.toLowerCase().includes('tv')) isTV = true;\n    });\n\n    if (model.includes('SHIELD')) isTV = true;\n    if (hdmi) isTV = true;\n    if (modelGroup && modelGroup.toLowerCase().includes('firetv')) isTV = true;\n    if (configuration === 'tv') isTV = true;\n    if (cecEnabled) isTV = true;\n\n    return isTV;\n};\n\nconst decideIfWearRunning = async (c, device) => {\n    const { udid, model, product } = device;\n    const fingerprint = await getRunningDeviceProp(c, udid, 'ro.vendor.build.fingerprint');\n    const name = await getRunningDeviceProp(c, udid, 'ro.product.vendor.name');\n    const mod = await getRunningDeviceProp(c, udid, 'ro.product.vendor.model');\n    const flavor = await getRunningDeviceProp(c, udid, 'ro.build.flavor');\n    const description = await getRunningDeviceProp(c, udid, 'ro.build.description');\n\n    let isWear = false;\n    [fingerprint, name, mod, flavor, description, model, product].forEach((string) => {\n        if (string && string.toLowerCase().includes('wear')) isWear = true;\n    });\n    return isWear;\n};\n\nconst getDeviceType = async (device, c) => {\n    logDebug('getDeviceType - in', { device });\n\n    if (device.product === 'tunny') {\n        device.isNotEligibleAndroid = true;\n        return device;\n    }\n\n    if (device.udid !== 'unknown') {\n        const screenSizeResult = await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} shell wm size`);\n        const screenDensityResult = await execCLI(c, CLI_ANDROID_ADB, `-s ${device.udid} shell wm density`);\n        const arch = await getRunningDeviceProp(c, device.udid, 'ro.product.cpu.abi');\n        let screenProps;\n\n        if (screenSizeResult) {\n            const [width, height] = screenSizeResult.split('Physical size: ')[1].split('x');\n            screenProps = { width: parseInt(width, 10), height: parseInt(height, 10) };\n        }\n\n        if (screenDensityResult) {\n            const density = screenDensityResult.split('Physical density: ')[1];\n            screenProps = { ...screenProps, density: parseInt(density, 10) };\n        }\n\n        device.isTV = await decideIfTVRunning(c, device);\n\n        if (screenSizeResult && screenDensityResult) {\n            const { width, height, density } = screenProps;\n\n            const diagonalInches = calculateDeviceDiagonal(width, height, density);\n            screenProps = { ...screenProps, diagonalInches };\n            device.isTablet = !device.isTV && diagonalInches > IS_TABLET_ABOVE_INCH && diagonalInches <= 15;\n            device.isWear = await decideIfWearRunning(c, device);\n        }\n\n        device.isPhone = !device.isTablet && !device.isWear && !device.isTV;\n        device.isMobile = !device.isWear && !device.isTV;\n        device.screenProps = screenProps;\n        device.arch = arch;\n        logDebug('getDeviceType - out', { device });\n        return device;\n    }\n\n    if (device.avdConfig) {\n        const density = parseInt(device.avdConfig['hw.lcd.density'], 10);\n        const width = parseInt(device.avdConfig['hw.lcd.width'], 10);\n        const height = parseInt(device.avdConfig['hw.lcd.height'], 10);\n        const arch = device.avdConfig['abi.type'];\n\n        // Better detect wear\n        const sysdir = device.avdConfig['image.sysdir.1'];\n        const tagId = device.avdConfig['tag.id'];\n        const tagDisplay = device.avdConfig['tag.display'];\n        const deviceName = device.avdConfig['hw.device.name'];\n\n        device.isWear = false;\n        [sysdir, tagId, tagDisplay, deviceName].forEach((string) => {\n            if (string && string.includes('wear')) device.isWear = true;\n        });\n\n        const avdId = device.avdConfig.AvdId;\n        const name = device.avdConfig['hw.device.name'];\n        const skin = device.avdConfig['skin.name'];\n        const image = device.avdConfig['image.sysdir.1'];\n\n        device.isTV = false;\n        [avdId, name, skin, image].forEach((string) => {\n            if (string && string.toLowerCase().includes('tv')) device.isTV = true;\n        });\n\n        const diagonalInches = calculateDeviceDiagonal(width, height, density);\n        device.isTablet = !device.isTV && diagonalInches > IS_TABLET_ABOVE_INCH;\n        device.isPhone = !device.isTablet && !device.isWear && !device.isTV;\n        device.isMobile = !device.isWear && !device.isTV;\n        device.arch = arch;\n        logDebug('getDeviceType - out', { device });\n        return device;\n    }\n    return device;\n};\n\nconst getAvdDetails = (c, deviceName) => {\n    const { ANDROID_SDK_HOME, ANDROID_AVD_HOME } = process.env;\n\n    // .avd dir might be in other place than homedir. (https://developer.android.com/studio/command-line/variables)\n    const avdConfigPaths = [\n        `${ANDROID_AVD_HOME}`,\n        `${ANDROID_SDK_HOME}/.android/avd`,\n        `${os.homedir()}/.android/avd`,\n    ];\n\n    const results = {};\n\n    avdConfigPaths.forEach((cPath) => {\n        if (fs.existsSync(cPath)) {\n            const filesPath = fs.readdirSync(cPath);\n\n\n            filesPath.forEach((fName) => {\n                const fPath = path.join(cPath, fName);\n                const dirent = fs.lstatSync(fPath);\n                if (!dirent.isDirectory() && fName === `${deviceName}.ini`) {\n                    const avdData = fs.readFileSync(fPath).toString();\n                    const lines = avdData.trim().split(/\\r?\\n/);\n                    lines.forEach((line) => {\n                        const [key, value] = line.split('=');\n                        if (key === 'path') {\n                            const initData = fs.readFileSync(`${value}/config.ini`).toString();\n                            const initLines = initData.trim().split(/\\r?\\n/);\n                            const avdConfig = {};\n                            initLines.forEach((initLine) => {\n                                const [iniKey, iniValue] = initLine.split('=');\n                                // also remove the white space\n                                avdConfig[iniKey.trim()] = iniValue.trim();\n                            });\n                            results.avdConfig = avdConfig;\n                        }\n                    });\n                }\n            });\n        }\n    });\n    return results;\n};\n\nconst getEmulatorName = async (c, words) => {\n    const emulator = words[0];\n    const port = emulator.split('-')[1];\n\n    const emulatorReply = await executeTelnet(c, port, 'avd name');\n    const emulatorReplyArray = emulatorReply.split('OK');\n    const emulatorName = emulatorReplyArray[emulatorReplyArray.length - 2].trim();\n    return emulatorName;\n};\n\nexport const connectToWifiDevice = async (c, ip) => {\n    const deviceResponse = await execCLI(c, CLI_ANDROID_ADB, `connect ${ip}:5555`);\n    if (deviceResponse.includes('connected')) return true;\n    logError(`Failed to connect to ${ip}:5555`, false, true);\n    return false;\n};\n\nconst _parseDevicesResult = async (c, devicesString, avdsString, deviceOnly) => {\n    logDebug(`_parseDevicesResult:${devicesString}:${avdsString}:${deviceOnly}`);\n    const devices = [];\n    const { skipTargetCheck } = c.program;\n\n    if (devicesString) {\n        const lines = devicesString.trim().split(/\\r?\\n/);\n        logDebug('_parseDevicesResult 2', { lines });\n        if (lines.length !== 0) {\n            await Promise.all(lines.map(async (line) => {\n                const words = line.split(/[ ,\\t]+/).filter(w => w !== '');\n                if (words.length === 0) return;\n                logDebug('_parseDevicesResult 3', { words });\n\n                if (words[1] === 'device') {\n                    const isDevice = !words[0].includes('emulator');\n                    let name = _getDeviceProp(words, 'model:');\n                    const model = name;\n                    const product = _getDeviceProp(words, 'product:');\n                    logDebug('_parseDevicesResult 4', { name });\n                    if (!isDevice) {\n                        await waitForEmulatorToBeReady(c, words[0]);\n                        name = await getEmulatorName(c, words);\n                        logDebug('_parseDevicesResult 5', { name });\n                    }\n                    logDebug('_parseDevicesResult 6', { deviceOnly, isDevice });\n                    if ((deviceOnly && isDevice) || !deviceOnly) {\n                        devices.push({\n                            udid: words[0],\n                            isDevice,\n                            isActive: true,\n                            name,\n                            model,\n                            product\n                        });\n                    }\n                    return true;\n                }\n            }));\n        }\n    }\n\n    if (avdsString) {\n        const avdLines = avdsString.trim().split(/\\r?\\n/);\n        logDebug('_parseDevicesResult 7', { avdLines });\n\n        await Promise.all(avdLines.map(async (line) => {\n            let avdDetails;\n\n            try {\n                avdDetails = getAvdDetails(c, line);\n            } catch (e) {\n                logError(e);\n            }\n\n            try {\n                logDebug('_parseDevicesResult 8', { avdDetails });\n\n                // Yes, 2 greps. Hacky but it excludes the grep process corectly and quickly :)\n                // if this runs without throwing it means that the simulator is running so it needs to be excluded\n                const findProcess = isSystemWin ? `tasklist | find \"avd ${line}\"` : `ps x | grep \"avd ${line}\" | grep -v grep`;\n                child_process.execSync(findProcess);\n                logDebug('_parseDevicesResult 9 - excluding running emulator');\n            } catch (e) {\n                if (avdDetails) {\n                    devices.push({\n                        udid: 'unknown',\n                        isDevice: false,\n                        isActive: false,\n                        name: line,\n                        ...avdDetails\n                    });\n                }\n            }\n        }));\n    }\n\n    logDebug('_parseDevicesResult 10', { devices });\n\n    return Promise.all(devices.map(device => getDeviceType(device, c)))\n        .then(devicesArray => devicesArray.filter((device) => {\n            // filter devices based on selected platform\n            const { platform } = c;\n            if (skipTargetCheck) return true; // return everything if skipTargetCheck is used\n            if (device.isNotEligibleAndroid) return false;\n            const matches = (platform === ANDROID && device.isTablet) || (platform === ANDROID_WEAR && device.isWear) || (platform === ANDROID_TV && device.isTV) || (platform === ANDROID && device.isMobile);\n            logDebug('getDeviceType - filter', { device, matches, platform });\n            return matches;\n        }));\n};\n\nconst _getDeviceProp = (arr, prop) => {\n    for (let i = 0; i < arr.length; i++) {\n        const v = arr[i];\n        if (v && v.includes(prop)) return v.replace(prop, '');\n    }\n    return '';\n};\n\nexport const askForNewEmulator = async (c, platform) => {\n    logTask('askForNewEmulator');\n    const emuName = c.files.workspace.config.defaultTargets[platform];\n\n    const { confirm } = await inquirer.prompt({\n        name: 'confirm',\n        type: 'confirm',\n        message: `Do you want ReNative to create new Emulator (${chalk.white(emuName)}) for you?`\n    });\n\n    if (confirm) {\n        switch (platform) {\n            case 'android':\n                return _createEmulator(c, '28', 'google_apis', emuName)\n                    .then(() => launchAndroidSimulator(c, platform, emuName, true));\n            case 'androidtv':\n                return _createEmulator(c, '28', 'android-tv', emuName)\n                    .then(() => launchAndroidSimulator(c, platform, emuName, true));\n            case 'androidwear':\n                return _createEmulator(c, '28', 'android-wear', emuName)\n                    .then(() => launchAndroidSimulator(c, platform, emuName, true));\n            default:\n                return Promise.reject('Cannot find any active or created emulators');\n        }\n    }\n    return Promise.reject('Action canceled!');\n};\n\nconst _createEmulator = (c, apiVersion, emuPlatform, emuName) => {\n    logTask('_createEmulator');\n\n    return execCLI(c, CLI_ANDROID_SDKMANAGER, `\"system-images;android-${apiVersion};${emuPlatform};x86\"`)\n        .then(() => execCLI(c, CLI_ANDROID_AVDMANAGER, `create avd -n ${emuName} -k \"system-images;android-${apiVersion};${emuPlatform};x86\"`))\n        .catch(e => logError(e, true));\n};\n\nconst waitForEmulatorToBeReady = (c, emulator) => waitForEmulator(c, CLI_ANDROID_ADB, `-s ${emulator} shell getprop init.svc.bootanim`, res => res.includes('stopped'));\n\nexport const checkForActiveEmulator = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`checkForActiveEmulator:${platform}`);\n    let attempts = 1;\n    const maxAttempts = isSystemWin ? 20 : 10;\n    let running = false;\n    const poll = setInterval(() => {\n        // Prevent the interval from running until enough promises return to make it stop or we get a result\n        if (!running) {\n            running = true;\n            getAndroidTargets(c, false, true, false)\n                .then(async (v) => {\n                    logDebug('Available devices after filtering', v);\n                    if (v.length > 0) {\n                        logSuccess(`Found active emulator! ${chalk.white(v[0].udid)}. Will use it`);\n                        clearInterval(poll);\n                        resolve(v[0]);\n                    } else {\n                        console.log(`looking for active emulators: attempt ${attempts}/${maxAttempts}`);\n                        attempts++;\n                        if ([ANDROID_TV, ANDROID_WEAR].includes(platform) && attempts === 2) {\n                            await resetAdb(c); // from time to time adb reports a recently started atv emu as being offline. Restarting adb fixes it\n                        }\n                        if (attempts > maxAttempts) {\n                            clearInterval(poll);\n                            reject('Could not find any active emulatros');\n                            // TODO: Asking for new emulator is worng as it diverts\n                            // user from underlying failure of not being able to connect\n                            // return _askForNewEmulator(c, platform);\n                        }\n                        running = false;\n                    }\n                })\n                .catch((e) => {\n                    clearInterval(poll);\n                    logError(e);\n                });\n        }\n    }, CHECK_INTEVAL);\n});\n"],"file":"deviceManager.js"}