{"version":3,"sources":["../../../src/platformTools/android/manifestParser.js"],"names":["PROHIBITED_DUPLICATE_TAGS","SYSTEM_TAGS","_findChildNode","tag","name","node","includes","i","children","length","ch","_convertToXML","manifestObj","_parseNode","n","level","output","space","nodeKeysCount","Object","keys","forEach","v","isSingleLine","endLine","k","nextLevel","_mergeNodeParameters","nodeParamsExt","_mergeNodeChildren","nodeChildrenExt","nameExt","childNode","console","log","push","parseAndroidManifestSync","c","platform","pluginConfig","baseManifestFilePath","path","join","paths","rnv","dir","baseManifestFile","appFolder","application","package","pluginConfigAndroid","buildConfig","platforms","applicationExt","plugin","pluginPlat","key","androidManifest","prms","configPermissions","permissions","includedPermissions","excludedPermissions","platPerm","pc","includedFeatures","excludedFeatures","manifestXml","manifestFile","pattern","override","e","injectPluginManifestSync","pkg","className","split","pop","packageParams","pathFixed","modulePath"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {\n    getAppFolder,\n    writeCleanFile,\n    getAppId,\n    getBuildFilePath,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport {\n    logTask,\n    logError,\n    logWarning\n} from '../../systemTools/logger';\nimport { readObjectSync } from '../../systemTools/fileutils';\nimport { getMergedPlugin, parsePlugins } from '../../pluginTools';\n\nconst PROHIBITED_DUPLICATE_TAGS = ['intent-filter'];\nconst SYSTEM_TAGS = ['tag', 'children'];\n\nconst _findChildNode = (tag, name, node) => {\n    if (!node) {\n        logWarning('_findChildNode: Node is undefined');\n        return;\n    }\n    if (!name && !PROHIBITED_DUPLICATE_TAGS.includes(tag)) return null; // Can't determine reused child nodes without unique name identifier\n    for (let i = 0; i < node.children.length; i++) {\n        const ch = node.children[i];\n        if (ch.tag === tag) {\n            if ((ch['android:name'] === name) || PROHIBITED_DUPLICATE_TAGS.includes(tag)) return ch;\n        }\n    }\n    return null;\n};\n\nconst _convertToXML = manifestObj => _parseNode(manifestObj, 0);\n\nconst _parseNode = (n, level) => {\n    let output = '';\n    let space = '';\n    for (let i = 0; i < level; i++) {\n        space += '    ';\n    }\n\n    let nodeKeysCount = 0;\n    Object.keys(n).forEach((v) => {\n        if (!SYSTEM_TAGS.includes(v)) nodeKeysCount++;\n    });\n    const isSingleLine = nodeKeysCount < 2;\n\n    if (!n.tag) {\n        logWarning('Each node must have tag key!');\n        return;\n    }\n\n    if (n) {\n        const endLine = isSingleLine ? ' ' : '\\n';\n        output += `${space}<${n.tag}${endLine}`;\n        for (const k in n) {\n            if (!SYSTEM_TAGS.includes(k)) {\n                output += `${isSingleLine ? '' : `${space}  `}${k}=\"${n[k]}\"${endLine}`;\n            }\n        }\n    } else {\n        output += `${space}<${n.tag}`;\n    }\n    if (n.children && n.children.length) {\n        if (isSingleLine) {\n            output += '>\\n';\n        } else {\n            output += `${space}>\\n`;\n        }\n\n        const nextLevel = level += 1;\n        n.children.forEach((v) => {\n            output += _parseNode(v, nextLevel);\n        });\n        output += `${space}</${n.tag}>\\n`;\n    } else {\n        output += `${isSingleLine ? '' : space}/>\\n`;\n    }\n    return output;\n};\n\nconst _mergeNodeParameters = (node, nodeParamsExt) => {\n    if (!nodeParamsExt) {\n        logWarning('_mergeNodeParameters: nodeParamsExt value is null');\n        return;\n    }\n    if (!node) {\n        logWarning('_mergeNodeParameters: node value is null');\n        return;\n    }\n\n    for (const k in nodeParamsExt) {\n        if (!SYSTEM_TAGS.includes(k)) node[k] = nodeParamsExt[k];\n    }\n};\n\nconst _mergeNodeChildren = (node, nodeChildrenExt = []) => {\n    // console.log('_mergeNodeChildren', node, 'OVERRIDE', nodeChildrenExt);\n    if (!node) {\n        logWarning('_mergeNodeChildren: Node is undefined');\n        return;\n    }\n    if (!node.children) node.children = [];\n    nodeChildrenExt.forEach((v) => {\n        const nameExt = v['android:name'];\n        if (v.tag) {\n            const childNode = _findChildNode(v.tag, nameExt, node);\n            if (childNode) {\n                console.log('_mergeNodeChildren: FOUND EXISTING NODE TO MERGE', nameExt, v.tag);\n                _mergeNodeParameters(childNode, v);\n                _mergeNodeChildren(childNode, v.children);\n            } else {\n                console.log('_mergeNodeChildren: NO android:name found. adding to children', nameExt, v.tag);\n                node.children.push(v);\n            }\n        }\n    });\n};\n\nexport const parseAndroidManifestSync = (c, platform) => {\n    logTask(`parseAndroidManifestSync:${platform}`);\n    const pluginConfig = {};\n    try {\n        const baseManifestFilePath = path.join(c.paths.rnv.dir, `src/platformTools/android/supportFiles/AndroidManifest_${platform}.json`);\n        const baseManifestFile = readObjectSync(baseManifestFilePath);\n        const appFolder = getAppFolder(c, platform);\n        const application = _findChildNode('application', '.MainApplication', baseManifestFile);\n\n        baseManifestFile.package = getAppId(c, platform);\n\n        // appConfigs/base/plugins.json PLUGIN CONFIG ROOT OVERRIDES\n        const pluginConfigAndroid = getFlavouredProp(c, c.buildConfig?.platforms?.[platform], 'AndroidManifest');\n\n        if (pluginConfigAndroid) {\n            const applicationExt = _findChildNode('application', '.MainApplication', pluginConfigAndroid);\n            _mergeNodeParameters(application, applicationExt);\n            if (applicationExt.children) {\n                _mergeNodeChildren(application, applicationExt.children);\n            }\n        }\n\n        // appConfigs/base/plugins.json PLUGIN CONFIG OVERRIDES\n        parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n            const androidManifest = getFlavouredProp(c, pluginPlat, 'AndroidManifest');\n            if (androidManifest) {\n                _mergeNodeChildren(baseManifestFile, androidManifest.children);\n                // const pluginApplication = _findChildNode('application', '.MainApplication', pluginPlat.AndroidManifest);\n                // if (pluginApplication) {\n                //     _mergeNodeParameters(application, pluginApplication);\n                //\n                //     _mergeNodeChildren(application, pluginApplication.children);\n                // }\n            }\n        });\n\n        // appConfig PERMISSIONS OVERRIDES\n        let prms = '';\n        const configPermissions = c.buildConfig?.permissions;\n\n        const includedPermissions = getConfigProp(c, platform, 'includedPermissions') || getConfigProp(c, platform, 'permissions');\n        const excludedPermissions = getConfigProp(c, platform, 'excludedPermissions');\n        if (includedPermissions && configPermissions) {\n            const platPerm = configPermissions[platform] ? platform : 'android';\n            const pc = configPermissions[platPerm];\n            if (includedPermissions[0] === '*') {\n                for (const k in pc) {\n                    if (!(excludedPermissions && excludedPermissions.includes(k))) {\n                        prms += `\\n   <uses-permission android:name=\"${pc[k].key}\" />`;\n                        const key = pc[k].key || k;\n                        baseManifestFile.children.push({\n                            tag: 'uses-permission',\n                            'android:name': key\n                        });\n                    }\n                }\n            } else {\n                includedPermissions.forEach((v) => {\n                    if (pc[v]) {\n                        prms += `\\n   <uses-permission android:name=\"${pc[v].key}\" />`;\n                        const key = pc[v].key || k;\n                        baseManifestFile.children.push({\n                            tag: 'uses-permission',\n                            'android:name': key\n                        });\n                    }\n                });\n            }\n        }\n\n        // appConfig FEATURES OVERRIDES\n        const includedFeatures = getConfigProp(c, platform, 'includedFeatures');\n        if (includedFeatures) {\n            includedFeatures.forEach((key) => {\n                baseManifestFile.children.push({\n                    tag: 'uses-feature',\n                    'android:name': key,\n                    'android:required': true\n                });\n            });\n        }\n\n        const excludedFeatures = getConfigProp(c, platform, 'excludedFeatures');\n        if (excludedFeatures) {\n            excludedFeatures.forEach((key) => {\n                baseManifestFile.children.push({\n                    tag: 'uses-feature',\n                    'android:name': key,\n                    'android:required': false\n                });\n            });\n        }\n\n        const manifestXml = _convertToXML(baseManifestFile);\n        // get correct source of manifest\n        const manifestFile = 'app/src/main/AndroidManifest.xml';\n\n        writeCleanFile(getBuildFilePath(c, platform, manifestFile), path.join(appFolder, manifestFile), [\n            { pattern: '{{PLUGIN_MANIFEST_FILE}}', override: manifestXml },\n            { pattern: '{{PERMISIONS}}', override: prms },\n            { pattern: '{{APPLICATION_ID}}', override: baseManifestFile.package }\n        ]);\n\n        return;\n    } catch (e) {\n        logError(e);\n    }\n};\n\nexport const injectPluginManifestSync = (c, plugin, key, pkg) => {\n    const className = pkg ? pkg.split('.').pop() : null;\n    let packageParams = '';\n    if (plugin.packageParams) {\n        packageParams = plugin.packageParams.join(',');\n    }\n\n    const pathFixed = plugin.path ? `${plugin.path}` : `node_modules/${key}/android`;\n    const modulePath = `../../${pathFixed}`;\n};\n"],"file":"manifestParser.js"}