{"version":3,"sources":["../../../src/platformTools/android/gradleParser.js"],"names":["parseBuildGradleSync","c","platform","appFolder","dexOptions","pluginConfigAndroid","buildGradleBuildScriptDexOptions","path","join","pattern","override","compileSdkVersion","supportLibVersion","buildToolsVersion","buildGradleAllProjectsRepositories","buildGradleBuildScriptRepositories","buildGradleBuildScriptDependencies","parseAppBuildGradleSync","minSdkVersion","targetSdkVersion","debugSigning","appBuildGradleSigningConfigs","localProperties","files","workspace","appConfig","configPrivate","keystorePath","storeFile","keystorePathFull","startsWith","paths","dir","fs","existsSync","genPropsPath","writeFileSync","keyAlias","storePassword","keyPassword","chalk","white","pluginConfig","buildConfig","debugBuildTypes","platforms","gradle","buildTypes","debug","releaseBuildTypes","release","versionCodeOffset","isMultiApk","multiAPKs","splits","packagingOptions","compileOptions","enableAndroidX","appBuildGradleImplementations","enableHermes","applyPlugin","appBuildGradleAfterEvaluate","defaultConfig","parseSettingsGradleSync","pluginIncludes","pluginPaths","parseGradlePropertiesSync","pluginGradleProperties","gradleProps","Object","keys","forEach","key","gradleProperties","injectPluginGradleSync","plugin","pkg","className","split","pop","packageParams","keyFixed","replace","pathFixed","modulePath","projectName","skipLinking","skipImplementation","implementation","implementations","v","appBuildGradle","apply","afterEvaluate","_fixAndroidLegacy","buildGradle","BuildGradle","allProjRepos","allprojects","repositories","k","buildscriptRepos","buildscript","buildscriptDeps","dependencies","buildscriptDexOptions","project"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppVersionCode,\n    writeCleanFile,\n    getAppId,\n    getBuildFilePath,\n    getConfigProp\n} from '../../common';\nimport {\n    logTask,\n    logWarning,\n    logDebug\n} from '../../systemTools/logger';\n\nexport const parseBuildGradleSync = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n\n    let dexOptions = '';\n\n    if (c.pluginConfigAndroid.buildGradleBuildScriptDexOptions) {\n        dexOptions = `dexOptions() {\n            ${c.pluginConfigAndroid.buildGradleBuildScriptDexOptions}\n        }`;\n    }\n\n    writeCleanFile(getBuildFilePath(c, platform, 'build.gradle'), path.join(appFolder, 'build.gradle'), [\n        { pattern: '{{COMPILE_SDK_VERSION}}', override: c.pluginConfigAndroid.compileSdkVersion },\n        { pattern: '{{SUPPORT_LIB_VERSION}}', override: c.pluginConfigAndroid.supportLibVersion },\n        { pattern: '{{BUILD_TOOLS_VERSION}}', override: c.pluginConfigAndroid.buildToolsVersion },\n        { pattern: '{{PLUGIN_INJECT_ALLPROJECTS_REPOSITORIES}}', override: c.pluginConfigAndroid.buildGradleAllProjectsRepositories },\n        { pattern: '{{PLUGIN_INJECT_BUILDSCRIPT_REPOSITORIES}}', override: c.pluginConfigAndroid.buildGradleBuildScriptRepositories },\n        { pattern: '{{PLUGIN_INJECT_BUILDSCRIPT_DEPENDENCIES}}', override: c.pluginConfigAndroid.buildGradleBuildScriptDependencies },\n        { pattern: '{{PLUGIN_INJECT_DEXOPTIONS}}', override: dexOptions }\n    ]);\n};\n\nexport const parseAppBuildGradleSync = (c, platform) => {\n    logTask('parseAppBuildGradleSync');\n    const appFolder = getAppFolder(c, platform);\n\n    // ANDROID PROPS\n    c.pluginConfigAndroid.minSdkVersion = getConfigProp(c, platform, 'minSdkVersion', 21);\n    c.pluginConfigAndroid.targetSdkVersion = getConfigProp(c, platform, 'targetSdkVersion', 28);\n    c.pluginConfigAndroid.compileSdkVersion = getConfigProp(c, platform, 'compileSdkVersion', 28);\n    c.pluginConfigAndroid.supportLibVersion = getConfigProp(c, platform, 'supportLibVersion', '28.0.0');\n    c.pluginConfigAndroid.buildToolsVersion = getConfigProp(c, platform, 'buildToolsVersion', '28.0.0');\n\n    // SIGNING CONFIGS\n    const debugSigning = `\n    debug {\n        storeFile file('debug.keystore')\n        storePassword \"android\"\n        keyAlias \"androiddebugkey\"\n        keyPassword \"android\"\n    }`;\n\n    c.pluginConfigAndroid.appBuildGradleSigningConfigs = `${debugSigning}\n    release`;\n    c.pluginConfigAndroid.localProperties = '';\n    // c.files.workspace.appConfig.configPrivate = _getPrivateConfig(c, platform);\n\n    if (c.files.workspace.appConfig.configPrivate && c.files.workspace.appConfig.configPrivate[platform]) {\n        const keystorePath = c.files.workspace.appConfig.configPrivate[platform].storeFile;\n        let keystorePathFull;\n        if (keystorePath) {\n            if (keystorePath.startsWith('./')) {\n                keystorePathFull = path.join(c.paths.workspace.appConfig.dir, keystorePath);\n            } else {\n                keystorePathFull = keystorePath;\n            }\n        }\n\n        if (fs.existsSync(keystorePathFull)) {\n            const genPropsPath = path.join(appFolder, 'keystore.properties');\n            fs.writeFileSync(genPropsPath, `# auto generated by ReNative\nstoreFile=${keystorePathFull}\nkeyAlias=${c.files.workspace.appConfig.configPrivate[platform].keyAlias}\nstorePassword=${c.files.workspace.appConfig.configPrivate[platform].storePassword}\nkeyPassword=${c.files.workspace.appConfig.configPrivate[platform].keyPassword}`);\n\n            c.pluginConfigAndroid.appBuildGradleSigningConfigs = `${debugSigning}\n            release {\n                storeFile file(keystoreProps['storeFile'])\n                storePassword keystoreProps['storePassword']\n                keyAlias keystoreProps['keyAlias']\n                keyPassword keystoreProps['keyPassword']\n            }`;\n\n            c.pluginConfigAndroid.localProperties = `\n          def keystorePropsFile = rootProject.file(\"keystore.properties\")\n          def keystoreProps = new Properties()\n          keystoreProps.load(new FileInputStream(keystorePropsFile))`;\n        } else {\n            logWarning(\n                `Your ${chalk.white(keystorePathFull)} does not exist. You won't be able to make production releases without it!`,\n            );\n        }\n    }\n\n    // BUILD_TYPES\n    const pluginConfig = c.buildConfig ?? {};\n    const debugBuildTypes = pluginConfig?.platforms[platform]?.gradle?.buildTypes?.debug ?? [];\n    const releaseBuildTypes = pluginConfig?.platforms[platform]?.gradle?.buildTypes?.release ?? [];\n    c.pluginConfigAndroid.buildTypes = `\n    debug {\n        minifyEnabled false\n        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        ${debugBuildTypes.join('\\n        ')}\n    }\n    release {\n        minifyEnabled false\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        signingConfig signingConfigs.release\n        ${releaseBuildTypes.join('\\n        ')}\n    }`;\n\n\n    // MULTI APK\n    const versionCodeOffset = getConfigProp(c, platform, 'versionCodeOffset', 0);\n    const isMultiApk = getConfigProp(c, platform, 'multipleAPKs', false) === true;\n    c.pluginConfigAndroid.multiAPKs = '';\n    if (isMultiApk) {\n        c.pluginConfigAndroid.multiAPKs = `\n      ext.abiCodes = [\"armeabi-v7a\": 1, \"x86\": 2, \"arm64-v8a\": 3, \"x86_64\": 4]\n      import com.android.build.OutputFile\n\n      android.applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n          def bavc = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))\n          if (bavc != null) {\n            output.versionCodeOverride = Integer.parseInt(Integer.toString(variant.versionCode) + Integer.toString(bavc)) + ${versionCodeOffset}\n          }\n        }\n      }`;\n    }\n\n    // SPLITS\n    c.pluginConfigAndroid.splits = '';\n    if (isMultiApk) {\n        c.pluginConfigAndroid.splits = `\n    splits {\n      abi {\n          reset()\n          enable true\n          include \"armeabi-v7a\", \"x86\", \"arm64-v8a\", \"x86_64\"\n          universalApk false\n      }\n    }\n`;\n    }\n\n\n    // PACKAGING OPTIONS\n    c.pluginConfigAndroid.packagingOptions = `\n    exclude 'META-INF/DEPENDENCIES.txt'\n    exclude 'META-INF/DEPENDENCIES'\n    exclude 'META-INF/dependencies.txt'\n    exclude 'META-INF/LICENSE.txt'\n    exclude 'META-INF/LICENSE'\n    exclude 'META-INF/license.txt'\n    exclude 'META-INF/LGPL2.1'\n    exclude 'META-INF/NOTICE.txt'\n    exclude 'META-INF/NOTICE'\n    exclude 'META-INF/notice.txt'\n    pickFirst 'lib/armeabi-v7a/libc++_shared.so'\n    pickFirst 'lib/x86_64/libc++_shared.so'\n    pickFirst 'lib/x86/libc++_shared.so'\n    pickFirst 'lib/arm64-v8a/libc++_shared.so'\n    pickFirst 'lib/arm64-v8a/libjsc.so'\n    pickFirst 'lib/x86_64/libjsc.so'`;\n\n    // COMPILE OPTIONS\n    c.pluginConfigAndroid.compileOptions = `\n    sourceCompatibility 1.8\n    targetCompatibility 1.8`;\n\n    // TODO This is temporary ANDROIDX support. whole gradle parser will be refactored in the near future\n    const enableAndroidX = getConfigProp(c, platform, 'enableAndroidX', true);\n    if (enableAndroidX === true) {\n        c.pluginConfigAndroid.appBuildGradleImplementations += '    implementation \"androidx.appcompat:appcompat:1.1.0\"\\n';\n    } else {\n        c.pluginConfigAndroid.appBuildGradleImplementations += '    implementation \\'com.android.support:appcompat-v7:27.0.2\\'\\n';\n    }\n\n    c.pluginConfigAndroid.appBuildGradleImplementations += '    implementation \"androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02\"\\n';\n    // ENABLE HERMES\n    const enableHermes = getConfigProp(c, platform, 'enableHermes', false);\n\n    if (enableHermes) {\n        c.pluginConfigAndroid.appBuildGradleImplementations += '    debugImplementation files(\"../../../node_modules/hermes-engine/android/hermes-debug.aar\")\\n';\n        c.pluginConfigAndroid.appBuildGradleImplementations += '    releaseImplementation files(\"../../../node_modules/hermes-engine/android/hermes-release.aar\")\\n';\n    } else {\n        c.pluginConfigAndroid.appBuildGradleImplementations += '    implementation \\'org.webkit:android-jsc:+\\'\\n';\n    }\n    c.pluginConfigAndroid.enableHermes = `    enableHermes: ${enableHermes},`;\n\n    writeCleanFile(getBuildFilePath(c, platform, 'app/build.gradle'), path.join(appFolder, 'app/build.gradle'), [\n        { pattern: '{{PLUGIN_APPLY}}', override: c.pluginConfigAndroid.applyPlugin },\n        { pattern: '{{APPLICATION_ID}}', override: getAppId(c, platform) },\n        { pattern: '{{VERSION_CODE}}', override: getAppVersionCode(c, platform) },\n        { pattern: '{{VERSION_NAME}}', override: getAppVersion(c, platform) },\n        { pattern: '{{PLUGIN_IMPLEMENTATIONS}}', override: c.pluginConfigAndroid.appBuildGradleImplementations },\n        { pattern: '{{PLUGIN_AFTER_EVALUATE}}', override: c.pluginConfigAndroid.appBuildGradleAfterEvaluate },\n        { pattern: '{{PLUGIN_SIGNING_CONFIGS}}', override: c.pluginConfigAndroid.appBuildGradleSigningConfigs },\n        { pattern: '{{PLUGIN_SPLITS}}', override: c.pluginConfigAndroid.splits },\n        { pattern: '{{PLUGIN_ANDROID_DEFAULT_CONFIG}}', override: c.pluginConfigAndroid.defaultConfig },\n        { pattern: '{{PLUGIN_PACKAGING_OPTIONS}}', override: c.pluginConfigAndroid.packagingOptions },\n        { pattern: '{{PLUGIN_BUILD_TYPES}}', override: c.pluginConfigAndroid.buildTypes },\n        { pattern: '{{PLUGIN_MULTI_APKS}}', override: c.pluginConfigAndroid.multiAPKs },\n        { pattern: '{{MIN_SDK_VERSION}}', override: c.pluginConfigAndroid.minSdkVersion },\n        { pattern: '{{TARGET_SDK_VERSION}}', override: c.pluginConfigAndroid.targetSdkVersion },\n        { pattern: '{{COMPILE_SDK_VERSION}}', override: c.pluginConfigAndroid.compileSdkVersion },\n        { pattern: '{{PLUGIN_COMPILE_OPTIONS}}', override: c.pluginConfigAndroid.compileOptions },\n        { pattern: '{{PLUGIN_LOCAL_PROPERTIES}}', override: c.pluginConfigAndroid.localProperties },\n        { pattern: '{{PLUGIN_ENABLE_HERMES}}', override: c.pluginConfigAndroid.enableHermes }\n    ]);\n};\n\nexport const parseSettingsGradleSync = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n\n    writeCleanFile(getBuildFilePath(c, platform, 'settings.gradle'), path.join(appFolder, 'settings.gradle'), [\n        { pattern: '{{PLUGIN_INCLUDES}}', override: c.pluginConfigAndroid.pluginIncludes },\n        { pattern: '{{PLUGIN_PATHS}}', override: c.pluginConfigAndroid.pluginPaths },\n    ]);\n};\n\nexport const parseGradlePropertiesSync = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n    // GRADLE.PROPERTIES\n    let pluginGradleProperties = '';\n    const pluginConfigAndroid = c.buildConfig?.platforms?.[platform] || {};\n\n    const gradleProps = pluginConfigAndroid['gradle.properties'];\n\n    if (gradleProps) {\n        const enableAndroidX = getConfigProp(c, platform, 'enableAndroidX', true);\n        if (enableAndroidX === true) {\n            gradleProps['android.useAndroidX'] = true;\n            gradleProps['android.enableJetifier'] = true;\n        }\n\n        Object.keys(gradleProps).forEach((key) => {\n            pluginGradleProperties += `${key}=${gradleProps[key]}\\n`;\n        });\n    }\n\n    const gradleProperties = 'gradle.properties';\n    writeCleanFile(getBuildFilePath(c, platform, gradleProperties), path.join(appFolder, gradleProperties), [\n        { pattern: '{{PLUGIN_GRADLE_PROPERTIES}}', override: pluginGradleProperties }\n    ]);\n};\n\nexport const injectPluginGradleSync = (c, plugin, key, pkg) => {\n    const className = pkg ? pkg.split('.').pop() : null;\n    let packageParams = '';\n    if (plugin.packageParams) {\n        packageParams = plugin.packageParams.join(',');\n    }\n    const keyFixed = key.replace(/\\//g, '-').replace(/@/g, '');\n    const pathFixed = plugin.path ? `${plugin.path}` : `node_modules/${key}/android`;\n    const modulePath = `../../${pathFixed}`;\n\n    // APP/BUILD.GRADLE\n    if (plugin.projectName) {\n        if (!plugin.skipLinking) {\n            c.pluginConfigAndroid.pluginIncludes += `, ':${plugin.projectName}'`;\n            c.pluginConfigAndroid.pluginPaths += `project(':${\n                plugin.projectName\n            }').projectDir = new File(rootProject.projectDir, '${modulePath}')\\n`;\n        }\n        if (!plugin.skipImplementation) {\n            if (plugin.implementation) {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `${plugin.implementation}\\n`;\n            } else {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation project(':${plugin.projectName}')\\n`;\n            }\n        }\n    } else {\n        if (!plugin.skipLinking) {\n            c.pluginConfigAndroid.pluginIncludes += `, ':${keyFixed}'`;\n            c.pluginConfigAndroid.pluginPaths += `project(':${keyFixed}').projectDir = new File(rootProject.projectDir, '${modulePath}')\\n`;\n        }\n        if (!plugin.skipImplementation) {\n            if (plugin.implementation) {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `${plugin.implementation}\\n`;\n            } else {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation project(':${keyFixed}')\\n`;\n            }\n        }\n    }\n\n    if (plugin.implementations) {\n        plugin.implementations.forEach((v) => {\n            c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation ${v}\\n`;\n        });\n    }\n\n    const appBuildGradle = plugin['app/build.gradle'];\n    if (appBuildGradle) {\n        if (appBuildGradle.apply) {\n            appBuildGradle.apply.forEach((v) => {\n                c.pluginConfigAndroid.applyPlugin += `apply ${v}\\n`;\n            });\n        }\n\n        if (appBuildGradle.defaultConfig) {\n            appBuildGradle.defaultConfig.forEach((v) => {\n                c.pluginConfigAndroid.defaultConfig += `${v}\\n`;\n            });\n        }\n    }\n\n    if (plugin.afterEvaluate) {\n        plugin.afterEvaluate.forEach((v) => {\n            c.pluginConfigAndroid.appBuildGradleAfterEvaluate += ` ${v}\\n`;\n        });\n    }\n    _fixAndroidLegacy(c, pathFixed);\n\n    // BUILD.GRADLE\n    const buildGradle = plugin.BuildGradle;\n    const allProjRepos = buildGradle?.allprojects?.repositories;\n    if (allProjRepos) {\n        for (k in allProjRepos) {\n            if (allProjRepos[k] === true) {\n                c.pluginConfigAndroid.buildGradleAllProjectsRepositories += `${k}\\n`;\n            }\n        }\n    }\n\n    const buildscriptRepos = buildGradle?.buildscript?.repositories;\n    if (buildscriptRepos) {\n        for (k in buildscriptRepos) {\n            if (buildscriptRepos[k] === true) {\n                c.pluginConfigAndroid.buildGradleBuildScriptRepositories += `${k}\\n`;\n            }\n        }\n    }\n\n    const buildscriptDeps = buildGradle?.buildscript?.dependencies;\n    if (buildscriptDeps) {\n        for (k in buildscriptDeps) {\n            if (buildscriptDeps[k] === true) {\n                c.pluginConfigAndroid.buildGradleBuildScriptDependencies += `${k}\\n`;\n            }\n        }\n    }\n\n    const buildscriptDexOptions = buildGradle?.dexOptions;\n    if (buildscriptDexOptions) {\n        for (k in buildscriptDexOptions) {\n            if (buildscriptDexOptions[k] === true) {\n                c.pluginConfigAndroid.buildGradleBuildScriptDexOptions += `${k}\\n`;\n            }\n        }\n    }\n};\n\nconst _fixAndroidLegacy = (c, modulePath) => {\n    const buildGradle = path.join(c.paths.project.dir, modulePath, 'build.gradle');\n\n    if (fs.existsSync(buildGradle)) {\n        logDebug('FIX:', buildGradle);\n        writeCleanFile(buildGradle, buildGradle, [\n            { pattern: \" compile '\", override: \"  implementation '\" },\n            { pattern: ' compile \"', override: '  implementation \"' },\n            { pattern: ' testCompile \"', override: '  testImplementation \"' },\n            { pattern: \" provided '\", override: \"  compileOnly '\" },\n            { pattern: ' provided \"', override: '  compileOnly \"' },\n            { pattern: ' compile fileTree', override: '  implementation fileTree' },\n        ]);\n    }\n};\n\n// const _getPrivateConfig = (c, platform) => {\n//     let privateConfigFolder = path.join(c.paths.workspace.dir, c.files.project.package.name, c.buildConfig.id);\n//     if (!fs.existsSync(privateConfigFolder)) {\n//         privateConfigFolder = path.join(c.paths.workspace.dir, c.files.project.package.name, 'appConfigs', c.buildConfig.id);\n//     }\n//     const appConfigSPP = c.buildConfig.platforms[platform] ? c.buildConfig.platforms[platform].signingPropertiesPath : null;\n//     const appConfigSPPClean = appConfigSPP ? appConfigSPP.replace('{globalConfigDir}', c.paths.workspace.dir) : null;\n//     const privateConfigPath = appConfigSPPClean || path.join(privateConfigFolder, 'config.private.json');\n//     c.paths.workspaceConfigPath = privateConfigPath;\n//     c.paths.workspace.appConfig.dir = privateConfigPath.replace('/config.private.json', '');\n//     if (fs.existsSync(privateConfigPath)) {\n//         try {\n//             const output = JSON.parse(fs.readFileSync(privateConfigPath));\n//             output.parentFolder = c.paths.workspace.appConfig.dir;\n//             output.path = privateConfigPath;\n//             logInfo(\n//                 `Found ${chalk.white(privateConfigPath)}. Will use it for production releases!`,\n//             );\n//             return output;\n//         } catch (e) {\n//             logError(e);\n//             return null;\n//         }\n//     } else {\n//         logWarning(\n//             `You're missing ${chalk.white(privateConfigPath)} for this app: . You won't be able to make production releases without it!`,\n//         );\n//         return null;\n//     }\n// };\n"],"file":"gradleParser.js"}